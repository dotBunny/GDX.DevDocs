// Copyright (c) 2020-2022 dotBunny Inc.
// dotBunny licenses this file to you under the BSL-1.0 license.
// See the LICENSE file in the project root for more information.

using System.IO;
using Dox.Utils;

namespace Dox.Steps.Templates
{
    // ReSharper disable once ClassNeverInstantiated.Global
    public class Footer : StepBase
    {
        public const string Key = "template-footer";

        static string GetPath()
        {
            return Path.Combine(Config.InputDirectory, ".docfx", "templates", "gdx", "partials", "footer.tmpl.partial");
        }

        public override void Clean()
        {
            string path = GetPath();
            if (File.Exists(path))
            {
                Output.LogLine($"Cleaning up previous Footer template.");
                File.Delete(path);
            }
        }

        /// <inheritdoc />
        public override string GetIdentifier()
        {
            return Key;
        }

        /// <inheritdoc />
        public override string GetHeader()
        {
            return "Footer Template";
        }

        /// <inheritdoc />
        public override void Process()
        {
            string path = GetPath();
            string parent = Directory.GetParent(path)?.FullName;
            if (parent != null)
            {
                Directory.CreateDirectory(parent);
            }

            string commit = Git.GetHeadCommit(Config.InputDirectory);
            string shortCommit = commit.Substring(0, 7);
            Output.LogLine($"Using local Git commit hash {shortCommit} / {commit}.");

            TextGenerator generator = new TextGenerator();
            generator.AppendLine("<footer>");
            generator.PushIndent();
            generator.AppendLine("<div class=\"grad-bottom\"></div>");
            generator.AppendLine("<div class=\"footer\">");
            generator.PushIndent();
            generator.AppendLine("<div class=\"container\">");
            generator.PushIndent();
            generator.AppendLine("<span class=\"pull-right\">");
            generator.PushIndent();
            generator.AppendLine("<a href=\"#top\">{{__global.backToTop}}</a>");
            generator.PopIndent();
            generator.AppendLine("</span>");
            generator.AppendLine("{{{_appFooter}}}");

            generator.ApplyIndent();
            generator.Append("{{^_appFooter}}");
            generator.Append($"<span>Built on {Config.ShortDate} against <a href=\"{Config.GitCommit}{commit}\">");
            generator.Append($"<strong>{shortCommit}</strong></a>.<br />Generated by <a href=\"{Config.DoxUri}\">");
            generator.Append($"<strong>Dox</strong></a>+<a href=\"{Config.DocFxUri}\">");
            generator.Append("<strong>DocFX</strong></a>.</span>{{/_appFooter}}");
            generator.NextLine();

            generator.PopIndent();
            generator.AppendLine("</div>");
            generator.PopIndent();
            generator.AppendLine("</div>");
            generator.PopIndent();
            generator.AppendLine("</footer");

            Output.LogLine($"Writing generated Footer Template to {path}.");
            File.WriteAllText(path, generator.ToString());
        }
    }
}