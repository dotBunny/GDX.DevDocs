{
  "api/GDX.ArrayExtensions.html": {
    "href": "api/GDX.ArrayExtensions.html",
    "title": "Class ArrayExtensions | GDX",
    "keywords": "Class ArrayExtensions Array Based Extension Methods Inheritance System.Object ArrayExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : GDX Assembly : GDX.dll Syntax public static class ArrayExtensions Remarks Unit testing found in GDX.Tests.EditMode, under Runtime.ArrayExtensionsTests. Methods | Improve this Doc View Source Clear<T>(T[]) Set all elements in an array to the default values. Declaration public static void Clear<T>(this T[] targetArray) Parameters Type Name Description T[] targetArray The array to be defaulted. Type Parameters Name Description T The type of the array. Remarks This does not alter the targetArray 's length. | Improve this Doc View Source FirstIndexOfItem<T>(T[], T) Find the first index of targetItem in targetArray . Declaration public static int FirstIndexOfItem<T>(this T[] targetArray, T targetItem) where T : class Parameters Type Name Description T[] targetArray The array which to look in. T targetItem The object to be found. Returns Type Description System.Int32 The index of targetItem in targetArray , or -1 if not found. Type Parameters Name Description T The type of the array. | Improve this Doc View Source FirstIndexOfValue<T>(T[], T) Find the first index of targetValue in targetArray . Declaration public static int FirstIndexOfValue<T>(this T[] targetArray, T targetValue) where T : struct Parameters Type Name Description T[] targetArray The array which to look in. T targetValue The value to be found. Returns Type Description System.Int32 The index of targetValue in targetArray , or -1 if not found. Type Parameters Name Description T The type of the array. | Improve this Doc View Source LastIndexOfItem<T>(T[], T) Find the last index of targetItem in targetArray . Declaration public static int LastIndexOfItem<T>(this T[] targetArray, T targetItem) where T : class Parameters Type Name Description T[] targetArray The array which to look in. T targetItem The object to be found. Returns Type Description System.Int32 The index of targetItem in targetArray , or -1 if not found. Type Parameters Name Description T The type of the array. | Improve this Doc View Source LastIndexOfValue<T>(T[], T) Find the last index of targetValue in targetArray . Declaration public static int LastIndexOfValue<T>(this T[] targetArray, T targetValue) where T : struct Parameters Type Name Description T[] targetArray The array which to look in. T targetValue The value to be found. Returns Type Description System.Int32 The index of targetValue in targetArray , or -1 if not found. Type Parameters Name Description T The type of the array."
  },
  "api/GDX.ByteExtensions.html": {
    "href": "api/GDX.ByteExtensions.html",
    "title": "Class ByteExtensions | GDX",
    "keywords": "Class ByteExtensions System.Byte Based Extension Methods Inheritance System.Object ByteExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : GDX Assembly : GDX.dll Syntax public static class ByteExtensions Remarks Unit testing found in GDX.Tests.EditMode, under Runtime.ByteExtensionsTests. Methods | Improve this Doc View Source GetValueHashCode(Byte[]) Get the hash code value of targetBytes , an array of System.Byte . Declaration public static int GetValueHashCode(this byte[] targetBytes) Parameters Type Name Description System.Byte [] targetBytes The target array of System.Byte . Returns Type Description System.Int32 A System.Int32 value. Remarks Does NOT get the object's hashcode."
  },
  "api/GDX.Collections.BitArray128.html": {
    "href": "api/GDX.Collections.BitArray128.html",
    "title": "Struct BitArray128 | GDX",
    "keywords": "Struct BitArray128 A 128-bit array. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : GDX.Collections Assembly : GDX.dll Syntax public struct BitArray128 Examples Useful for packing a bunch of data with known indices tightly. if(myBitArray128[1]) { BeAwesome(); } Fields | Improve this Doc View Source Bits0 First reserved System.Int32 memory block. Declaration public int Bits0 Field Value Type Description System.Int32 Remarks Indices 0-31 | Improve this Doc View Source Bits1 Second reserved System.Int32 memory block. Declaration public int Bits1 Field Value Type Description System.Int32 Remarks Indices 32-63 | Improve this Doc View Source Bits2 Third reserved System.Int32 memory block. Declaration public int Bits2 Field Value Type Description System.Int32 Remarks Indices 64-95 | Improve this Doc View Source Bits3 Fourth reserved System.Int32 memory block. Declaration public int Bits3 Field Value Type Description System.Int32 Remarks Indices 96-127 Properties | Improve this Doc View Source Item[Int32] Access bit in array. Declaration public bool this[int index] { get; set; } Parameters Type Name Description System.Int32 index Target bit index. Property Value Type Description System.Boolean"
  },
  "api/GDX.Collections.BitArray16.html": {
    "href": "api/GDX.Collections.BitArray16.html",
    "title": "Struct BitArray16 | GDX",
    "keywords": "Struct BitArray16 A 16-bit array. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : GDX.Collections Assembly : GDX.dll Syntax public struct BitArray16 Examples Useful for packing a bunch of data with known indices tightly. if(myBitArray16[1]) { BeAwesome(); } Constructors | Improve this Doc View Source BitArray16(UInt16) Create a new BitArray16 based on provided bits0 . Declaration public BitArray16(ushort bits0) Parameters Type Name Description System.UInt16 bits0 An existing value to be used to create the backing data for a BitArray16 Fields | Improve this Doc View Source Bits0 First reserved System.UInt16 memory block (16-bits). Declaration public ushort Bits0 Field Value Type Description System.UInt16 Remarks Indices 0-15 Properties | Improve this Doc View Source Item[Byte] Access bit in array. Declaration public bool this[byte index] { get; set; } Parameters Type Name Description System.Byte index Target bit index. Property Value Type Description System.Boolean"
  },
  "api/GDX.Collections.BitArray256.html": {
    "href": "api/GDX.Collections.BitArray256.html",
    "title": "Struct BitArray256 | GDX",
    "keywords": "Struct BitArray256 A 256-bit array. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : GDX.Collections Assembly : GDX.dll Syntax public struct BitArray256 Examples Useful for packing a bunch of data with known indices tightly. if(myBitArray256[1]) { BeAwesome(); } Fields | Improve this Doc View Source Bits0 First reserved System.Int32 memory block. Declaration public int Bits0 Field Value Type Description System.Int32 Remarks Indices 0-31 | Improve this Doc View Source Bits1 Second reserved System.Int32 memory block. Declaration public int Bits1 Field Value Type Description System.Int32 Remarks Indices 32-63 | Improve this Doc View Source Bits2 Third reserved System.Int32 memory block. Declaration public int Bits2 Field Value Type Description System.Int32 Remarks Indices 64-95 | Improve this Doc View Source Bits3 Fourth reserved System.Int32 memory block. Declaration public int Bits3 Field Value Type Description System.Int32 Remarks Indices 96-127 | Improve this Doc View Source Bits4 Fifth reserved System.Int32 memory block. Declaration public int Bits4 Field Value Type Description System.Int32 Remarks Indices 128-159 | Improve this Doc View Source Bits5 Sixth reserved System.Int32 memory block. Declaration public int Bits5 Field Value Type Description System.Int32 Remarks Indices 160-191 | Improve this Doc View Source Bits6 Seventh reserved System.Int32 memory block. Declaration public int Bits6 Field Value Type Description System.Int32 Remarks Indices 192-223 | Improve this Doc View Source Bits7 Eighth reserved System.Int32 memory block. Declaration public int Bits7 Field Value Type Description System.Int32 Remarks Indices 224-255 Properties | Improve this Doc View Source Item[Int32] Access bit in array. Declaration public bool this[int index] { get; set; } Parameters Type Name Description System.Int32 index Target bit index. Property Value Type Description System.Boolean"
  },
  "api/GDX.Collections.BitArray32.html": {
    "href": "api/GDX.Collections.BitArray32.html",
    "title": "Struct BitArray32 | GDX",
    "keywords": "Struct BitArray32 A 32-bit array. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : GDX.Collections Assembly : GDX.dll Syntax public struct BitArray32 Examples Useful for packing a bunch of data with known indices tightly. if(myBitArray32[1]) { BeAwesome(); } Constructors | Improve this Doc View Source BitArray32(UInt32) Create a new BitArray32 based on provided bits0 . Declaration public BitArray32(uint bits0) Parameters Type Name Description System.UInt32 bits0 An existing value to be used to create the backing data for a BitArray32 Fields | Improve this Doc View Source Bits0 First reserved System.UInt32 memory block (32-bits). Declaration public uint Bits0 Field Value Type Description System.UInt32 Remarks Indices 0-31 Properties | Improve this Doc View Source Item[Byte] Access bit in array. Declaration public bool this[byte index] { get; set; } Parameters Type Name Description System.Byte index Target bit index. Property Value Type Description System.Boolean"
  },
  "api/GDX.Collections.BitArray512.html": {
    "href": "api/GDX.Collections.BitArray512.html",
    "title": "Struct BitArray512 | GDX",
    "keywords": "Struct BitArray512 A 512-bit array. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : GDX.Collections Assembly : GDX.dll Syntax public struct BitArray512 Examples Useful for packing a bunch of data with known indices tightly. if(myBitArray512[1]) { BeAwesome(); } Fields | Improve this Doc View Source Bits0 First reserved System.Int32 memory block. Declaration public int Bits0 Field Value Type Description System.Int32 Remarks Indices 0-31 | Improve this Doc View Source Bits1 Second reserved System.Int32 memory block. Declaration public int Bits1 Field Value Type Description System.Int32 Remarks Indices 32-63 | Improve this Doc View Source Bits10 Eleventh reserved System.Int32 memory block. Declaration public int Bits10 Field Value Type Description System.Int32 Remarks Indices 320-351 | Improve this Doc View Source Bits11 Twelfth reserved System.Int32 memory block. Declaration public int Bits11 Field Value Type Description System.Int32 Remarks Indices 352-383 | Improve this Doc View Source Bits12 Thirteenth reserved System.Int32 memory block. Declaration public int Bits12 Field Value Type Description System.Int32 Remarks Indices 384-415 | Improve this Doc View Source Bits13 Fourteenth reserved System.Int32 memory block. Declaration public int Bits13 Field Value Type Description System.Int32 Remarks Indices 416-447 | Improve this Doc View Source Bits14 Fifteenth reserved System.Int32 memory block. Declaration public int Bits14 Field Value Type Description System.Int32 Remarks Indices 448-479 | Improve this Doc View Source Bits15 Sixteenth reserved System.Int32 memory block. Declaration public int Bits15 Field Value Type Description System.Int32 Remarks Indices 480-511 | Improve this Doc View Source Bits2 Third reserved System.Int32 memory block. Declaration public int Bits2 Field Value Type Description System.Int32 Remarks Indices 64-95 | Improve this Doc View Source Bits3 Fourth reserved System.Int32 memory block. Declaration public int Bits3 Field Value Type Description System.Int32 Remarks Indices 96-127 | Improve this Doc View Source Bits4 Fifth reserved System.Int32 memory block. Declaration public int Bits4 Field Value Type Description System.Int32 Remarks Indices 128-159 | Improve this Doc View Source Bits5 Sixth reserved System.Int32 memory block. Declaration public int Bits5 Field Value Type Description System.Int32 Remarks Indices 160-191 | Improve this Doc View Source Bits6 Seventh reserved System.Int32 memory block. Declaration public int Bits6 Field Value Type Description System.Int32 Remarks Indices 192-223 | Improve this Doc View Source Bits7 Eighth reserved System.Int32 memory block. Declaration public int Bits7 Field Value Type Description System.Int32 Remarks Indices 224-255 | Improve this Doc View Source Bits8 Ninth reserved System.Int32 memory block. Declaration public int Bits8 Field Value Type Description System.Int32 Remarks Indices 256-287 | Improve this Doc View Source Bits9 Tenth reserved System.Int32 memory block. Declaration public int Bits9 Field Value Type Description System.Int32 Remarks Indices 288-319 Properties | Improve this Doc View Source Item[Int32] Access bit in array. Declaration public bool this[int index] { get; set; } Parameters Type Name Description System.Int32 index Target bit index. Property Value Type Description System.Boolean"
  },
  "api/GDX.Collections.BitArray64.html": {
    "href": "api/GDX.Collections.BitArray64.html",
    "title": "Struct BitArray64 | GDX",
    "keywords": "Struct BitArray64 A 64-bit array. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : GDX.Collections Assembly : GDX.dll Syntax public struct BitArray64 Examples Useful for packing a bunch of data with known indices tightly. if(myBitArray64[1]) { BeAwesome(); } Constructors | Improve this Doc View Source BitArray64(Int64) Create a new BitArray64 based on provided bits0 . Declaration public BitArray64(long bits0) Parameters Type Name Description System.Int64 bits0 An existing value to be used to create the backing data for a BitArray64 Fields | Improve this Doc View Source Bits0 First reserved System.Int64 memory block (64-bits). Declaration public long Bits0 Field Value Type Description System.Int64 Remarks Indices 0-63 Properties | Improve this Doc View Source Item[Byte] Access bit in array. Declaration public bool this[byte index] { get; set; } Parameters Type Name Description System.Byte index Target bit index. Property Value Type Description System.Boolean"
  },
  "api/GDX.Collections.BitArray8.html": {
    "href": "api/GDX.Collections.BitArray8.html",
    "title": "Struct BitArray8 | GDX",
    "keywords": "Struct BitArray8 A 8-bit array. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : GDX.Collections Assembly : GDX.dll Syntax public struct BitArray8 Examples Useful for packing a bunch of data with known indices tightly. if(myBitArray8[1]) { BeAwesome(); } Constructors | Improve this Doc View Source BitArray8(Byte) Create a new BitArray8 based on provided bits0 . Declaration public BitArray8(byte bits0) Parameters Type Name Description System.Byte bits0 An existing value to be used to create the backing data for a BitArray8 Fields | Improve this Doc View Source Bits0 First reserved System.Byte memory block (8-bits). Declaration public byte Bits0 Field Value Type Description System.Byte Remarks Indices 0-7 Properties | Improve this Doc View Source Item[Byte] Access bit in array. Declaration public bool this[byte index] { get; set; } Parameters Type Name Description System.Byte index Target bit index. Property Value Type Description System.Boolean"
  },
  "api/GDX.Collections.FreeList.html": {
    "href": "api/GDX.Collections.FreeList.html",
    "title": "Struct FreeList | GDX",
    "keywords": "Struct FreeList An array where indices are allocated from and stored in an in-place linked list. Allocating or deallocating a single int from this array is very fast, as is single datum lookup, but neither the allocated indices nor the free indices can be reliably iterated without an external data structure. This structure can be adapted to an arbitrary of external, parallel arrays. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : GDX.Collections Assembly : GDX.dll Syntax public struct FreeList Constructors | Improve this Doc View Source FreeList(Int32) Declaration public FreeList(int initialCapacity) Parameters Type Name Description System.Int32 initialCapacity The initial capacity of the array. Fields | Improve this Doc View Source Count The total number of currently-allocated indices. Declaration public int Count Field Value Type Description System.Int32 | Improve this Doc View Source CurrentFreeIndex The next available index of the free-list. Declaration public int CurrentFreeIndex Field Value Type Description System.Int32 | Improve this Doc View Source Indices Data storage for allocated indices as well as the in-place free-list. Declaration public int[] Indices Field Value Type Description System.Int32 [] Methods | Improve this Doc View Source AddUnchecked(Int32) Allocates an index from the free-list and stores an integer there, without checking for expansion. Declaration public int AddUnchecked(int data) Parameters Type Name Description System.Int32 data The integer value to store at the allocated index. Returns Type Description System.Int32 The index allocated from the free-list. | Improve this Doc View Source AddWithExpandCheck(Int32, out Int32) Allocates an index from the free-list and stores an integer there, expanding the array by twice the current size if necessary. Declaration public bool AddWithExpandCheck(int data, out int allocatedIndex) Parameters Type Name Description System.Int32 data The integer value to store at the allocated index. System.Int32 allocatedIndex The index allocated from the free-list. Returns Type Description System.Boolean True if the array expanded. | Improve this Doc View Source AddWithExpandCheck(Int32, out Int32, Int32) Allocates an index from the free-list and stores an integer there, expanding the array if necessary. Declaration public bool AddWithExpandCheck(int data, out int allocatedIndex, int expandBy) Parameters Type Name Description System.Int32 data The integer value to store at the allocated index. System.Int32 allocatedIndex The index allocated from the free-list. System.Int32 expandBy How much the array should expand by when out of space. Returns Type Description System.Boolean True if the array expanded. | Improve this Doc View Source Clear() Removes all allocated data and rebuilds the free-list. Declaration public void Clear() | Improve this Doc View Source GetAndRemoveAt(Int32) Retrieves the value stored at the given index and deallocates the index, adding it to the free-list. Declaration public int GetAndRemoveAt(int index) Parameters Type Name Description System.Int32 index The index to add to the free-list. Returns Type Description System.Int32 The value stored at the given index. | Improve this Doc View Source RemoveAt(Int32) Deallocates the given index and adds it to the free-list. Declaration public void RemoveAt(int index) Parameters Type Name Description System.Int32 index The index to add to the free-list."
  },
  "api/GDX.Collections.Generic.CircularBuffer-1.html": {
    "href": "api/GDX.Collections.Generic.CircularBuffer-1.html",
    "title": "Class CircularBuffer<T> | GDX",
    "keywords": "Class CircularBuffer<T> A buffer which loops back over itself as locations are used. Inheritance System.Object CircularBuffer<T> Implements System.Collections.Generic.IEnumerable <T> System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : GDX.Collections.Generic Assembly : GDX.dll Syntax public class CircularBuffer<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T The type of System.Object s contained within. Constructors | Improve this Doc View Source CircularBuffer(Int32) Create a CircularBuffer<T> with a capacity . Declaration public CircularBuffer(int capacity) Parameters Type Name Description System.Int32 capacity The maximum number of items allowed in the CircularBuffer<T> | Improve this Doc View Source CircularBuffer(Int32, T[]) Create a CircularBuffer<T> with a capacity , filling with targetItems . Declaration public CircularBuffer(int capacity, T[] targetItems) Parameters Type Name Description System.Int32 capacity The maximum number of items allowed in the CircularBuffer<T> T[] targetItems An array of values to fill the CircularBuffer<T> with. Exceptions Type Condition System.ArgumentException Invalid number of entries provided to the CircularBuffer<T> constructor. System.ArgumentNullException No items were provided to the CircularBuffer<T> constructor. Fields | Improve this Doc View Source Array Internal array of backed data for the CircularBuffer<T> . Declaration public readonly T[] Array Field Value Type Description T[] | Improve this Doc View Source Capacity The cached array length for Array . Declaration public readonly int Capacity Field Value Type Description System.Int32 | Improve this Doc View Source Count The current size of occupied elements in the CircularBuffer<T> . Declaration public int Count Field Value Type Description System.Int32 Remarks CAUTION! Changing this will alter the understanding of the data. | Improve this Doc View Source EndIndex The index of the last item in Array . Declaration public int EndIndex Field Value Type Description System.Int32 Remarks CAUTION! Changing this will alter the understanding of the data. | Improve this Doc View Source StartIndex The index of the first item in Array . Declaration public int StartIndex Field Value Type Description System.Int32 Remarks CAUTION! Changing this will alter the understanding of the data. Properties | Improve this Doc View Source Item[Int32] Access item at pseudoIndex . Declaration public T this[int pseudoIndex] { get; set; } Parameters Type Name Description System.Int32 pseudoIndex Property Value Type Description T Exceptions Type Condition System.IndexOutOfRangeException Provided index is out of buffers range. Methods | Improve this Doc View Source Add(T) Add an item to the Array . Declaration public void Add(T item) Parameters Type Name Description T item The typed System.Object to add. | Improve this Doc View Source Clear() Clear all values of the Array . Declaration public void Clear() | Improve this Doc View Source GetBack() Get the last item in the Array . Declaration public T GetBack() Returns Type Description T The last typed object in Array . | Improve this Doc View Source GetEnumerator() Get Array Enumerator. Declaration public IEnumerator<T> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <T> A System.Collections.Generic.IEnumerator<T> for the Array . | Improve this Doc View Source GetFront() Get the first item in the Array . Declaration public T GetFront() Returns Type Description T The first typed object in Array . | Improve this Doc View Source IsEmpty() Does the Array have any items in it? Declaration public bool IsEmpty() Returns Type Description System.Boolean true/false | Improve this Doc View Source IsFull() Is the Array at capacity? Declaration public bool IsFull() Returns Type Description System.Boolean true/false | Improve this Doc View Source PopBack() Remove an item from the end of the Array . Declaration public void PopBack() | Improve this Doc View Source PopFront() Remove an item from the start of the Array . Declaration public void PopFront() | Improve this Doc View Source PushBack(T) Add an item to the end of the Array . Declaration public void PushBack(T targetItem) Parameters Type Name Description T targetItem The item to add to the end of Array . | Improve this Doc View Source PushFront(T) Add an item to the start of the Array . Declaration public void PushFront(T targetItem) Parameters Type Name Description T targetItem The item to add to the start of Array . | Improve this Doc View Source ToArray() Copy Array to an array of the same type. Declaration public T[] ToArray() Returns Type Description T[] A copied version of the Array as an array. Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Get CircularBuffer<T> Enumerator. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator A System.Collections.Generic.IEnumerator<T> for the CircularBuffer<T> . Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/GDX.Collections.Generic.html": {
    "href": "api/GDX.Collections.Generic.html",
    "title": "Namespace GDX.Collections.Generic | GDX",
    "keywords": "Namespace GDX.Collections.Generic Classes CircularBuffer<T> A buffer which loops back over itself as locations are used. Structs NativeArray2D<T> A 2-Dimensional Unity.Collections.NativeArray<T> backed array. NativeSimpleList<T> A Unity.Collections.NativeArray<T> backed SimpleList<T> . NativeSimpleQueue<T> A Unity.Collections.NativeArray<T> backed simplified first-in, first-out (FIFO) data structure. NativeUniformArray3D<T> A 3-Dimensional Unity.Collections.NativeArray<T> backed array. SimpleList<T> A System.Collections.Generic.List`1 -like data structure."
  },
  "api/GDX.Collections.Generic.NativeArray2D-1.html": {
    "href": "api/GDX.Collections.Generic.NativeArray2D-1.html",
    "title": "Struct NativeArray2D<T> | GDX",
    "keywords": "Struct NativeArray2D<T> A 2-Dimensional Unity.Collections.NativeArray<T> backed array. Implements System.IDisposable Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : GDX.Collections.Generic Assembly : GDX.dll Syntax public struct NativeArray2D<T> : IDisposable where T : struct Type Parameters Name Description T Type of objects. Remarks The NativeArray2D<T> is backed by a Unity.Collections.NativeArray<T> which requires UnityEngine.CoreModule.dll. Constructors | Improve this Doc View Source NativeArray2D(Int32, Int32, Allocator, NativeArrayOptions) Create a NativeArray2D<T> . Declaration public NativeArray2D(int columnCount, int rowCount, Allocator allocator, NativeArrayOptions nativeArrayOptions) Parameters Type Name Description System.Int32 columnCount The number of columns (X). System.Int32 rowCount The number of rows (Y). Unity.Collections.Allocator allocator The Unity.Collections.Allocator type to use. Unity.Collections.NativeArrayOptions nativeArrayOptions Should the memory be cleared on allocation? Fields | Improve this Doc View Source Array The backing Unity.Collections.NativeArray<T> . Declaration public NativeArray<T> Array Field Value Type Description Unity.Collections.NativeArray <T> | Improve this Doc View Source ColumnCount The length of each pseudo-array in the dataset. Declaration public int ColumnCount Field Value Type Description System.Int32 Remarks CAUTION! Changing this will alter the understanding of the data. | Improve this Doc View Source RowCount The number of pseudo-arrays created to support the dimensionality. Declaration public int RowCount Field Value Type Description System.Int32 Remarks CAUTION! Changing this will alter the understanding of the data. Properties | Improve this Doc View Source Item[Int32, Int32] Get a typed object at a specific 2-dimensional index in Array . Declaration public T this[int x, int y] { get; set; } Parameters Type Name Description System.Int32 x The column number (X). System.Int32 y The row number (Y). Property Value Type Description T Methods | Improve this Doc View Source AddColumns(Int32, Allocator, NativeArrayOptions) Add additional columns to the dataset. Declaration public void AddColumns(int numberOfNewColumns, Allocator allocator, NativeArrayOptions nativeArrayOptions) Parameters Type Name Description System.Int32 numberOfNewColumns The number of columns add. Unity.Collections.Allocator allocator The Unity.Collections.Allocator type to use. Unity.Collections.NativeArrayOptions nativeArrayOptions Should the memory be cleared on allocation? | Improve this Doc View Source AddRows(Int32, Allocator, NativeArrayOptions) Add additional rows to the dataset. Declaration public void AddRows(int numberOfNewRows, Allocator allocator, NativeArrayOptions nativeArrayOptions) Parameters Type Name Description System.Int32 numberOfNewRows The number of rows/arrays to add. Unity.Collections.Allocator allocator The Unity.Collections.Allocator type to use. Unity.Collections.NativeArrayOptions nativeArrayOptions Should the memory be cleared on allocation? | Improve this Doc View Source Dispose() Properly dispose of Array . Declaration public void Dispose() Implements System.IDisposable"
  },
  "api/GDX.Collections.Generic.NativeSimpleList-1.html": {
    "href": "api/GDX.Collections.Generic.NativeSimpleList-1.html",
    "title": "Struct NativeSimpleList<T> | GDX",
    "keywords": "Struct NativeSimpleList<T> A Unity.Collections.NativeArray<T> backed SimpleList<T> . Implements System.IDisposable Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : GDX.Collections.Generic Assembly : GDX.dll Syntax public struct NativeSimpleList<T> : IDisposable where T : struct Type Parameters Name Description T The type of System.Object s contained within. Remarks The NativeSimpleList<T> is backed by a Unity.Collections.NativeArray<T> which requires UnityEngine.CoreModule.dll. Constructors | Improve this Doc View Source NativeSimpleList(Int32, Allocator, NativeArrayOptions) Create a SimpleList<T> with an initial capacity . Declaration public NativeSimpleList(int capacity, Allocator allocator, NativeArrayOptions nativeArrayOptions) Parameters Type Name Description System.Int32 capacity An initial sizing for the Array . Unity.Collections.Allocator allocator The Unity.Collections.Allocator type to use. Unity.Collections.NativeArrayOptions nativeArrayOptions Should the memory be cleared on allocation? | Improve this Doc View Source NativeSimpleList(NativeArray<T>) Create a NativeSimpleList<T> providing an existing arrayToUse . Declaration public NativeSimpleList(NativeArray<T> arrayToUse) Parameters Type Name Description Unity.Collections.NativeArray <T> arrayToUse An existing array to use in the NativeSimpleList<T> . | Improve this Doc View Source NativeSimpleList(NativeArray<T>, Int32) Create a NativeSimpleList<T> providing an existing arrayToUse and setting the Count . Declaration public NativeSimpleList(NativeArray<T> arrayToUse, int count) Parameters Type Name Description Unity.Collections.NativeArray <T> arrayToUse An existing array to use in the NativeSimpleList<T> . System.Int32 count An existing element count. Fields | Improve this Doc View Source Array Internal array of backed data for the SimpleList<T> . Declaration public NativeArray<T> Array Field Value Type Description Unity.Collections.NativeArray <T> | Improve this Doc View Source Count Number of elements. Declaration public int Count Field Value Type Description System.Int32 Remarks CAUTION! Changing this will alter the understanding of the data. Methods | Improve this Doc View Source AddUnchecked(T) Add an item to the NativeSimpleList<T> without checking the Array size. Declaration public void AddUnchecked(T item) Parameters Type Name Description T item A typed System.Object to add. | Improve this Doc View Source AddWithExpandCheck(T, Allocator, NativeArrayOptions) Add an item to the NativeSimpleList<T> , checking if Array needs to be resized. Declaration public void AddWithExpandCheck(T item, Allocator allocator, NativeArrayOptions nativeArrayOptions) Parameters Type Name Description T item A typed System.Object to add. Unity.Collections.Allocator allocator The Unity.Collections.Allocator type to use. Unity.Collections.NativeArrayOptions nativeArrayOptions Should the memory be cleared on allocation? | Improve this Doc View Source Clear() Clear out the Array in NativeSimpleList<T> and sets the Count to 0. Declaration public void Clear() | Improve this Doc View Source Dispose() Properly dispose of the NativeSimpleList<T> . Declaration public void Dispose() | Improve this Doc View Source Insert(T, Int32, Allocator, NativeArrayOptions) Insert an item into the NativeSimpleList<T> , checking if Array needs to be resized. Declaration public void Insert(T item, int index, Allocator allocator, NativeArrayOptions nativeArrayOptions) Parameters Type Name Description T item A typed System.Object to insert. System.Int32 index The index in Array to add the item at. Unity.Collections.Allocator allocator The Unity.Collections.Allocator type to use. Unity.Collections.NativeArrayOptions nativeArrayOptions Should the memory be cleared on allocation? | Improve this Doc View Source RemoveAt(Int32) Remove an item from the NativeSimpleList<T> at a specific index . Declaration public void RemoveAt(int index) Parameters Type Name Description System.Int32 index The target index. | Improve this Doc View Source RemoveFromBack() Remove the last element in the NativeSimpleList<T> . Declaration public void RemoveFromBack() Implements System.IDisposable"
  },
  "api/GDX.Collections.Generic.NativeSimpleQueue-1.html": {
    "href": "api/GDX.Collections.Generic.NativeSimpleQueue-1.html",
    "title": "Struct NativeSimpleQueue<T> | GDX",
    "keywords": "Struct NativeSimpleQueue<T> A Unity.Collections.NativeArray<T> backed simplified first-in, first-out (FIFO) data structure. Implements System.IDisposable Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : GDX.Collections.Generic Assembly : GDX.dll Syntax public struct NativeSimpleQueue<T> : IDisposable where T : struct Type Parameters Name Description T The type of System.Object s contained within. Remarks The NativeSimpleQueue<T> is backed by a Unity.Collections.NativeArray<T> which requires UnityEngine.CoreModule.dll. Constructors | Improve this Doc View Source NativeSimpleQueue(Int32, Allocator, NativeArrayOptions) Create a new NativeSimpleQueue<T> . Declaration public NativeSimpleQueue(int capacity, Allocator allocator, NativeArrayOptions nativeArrayOptions) Parameters Type Name Description System.Int32 capacity The maximum number of items allowed in the NativeSimpleQueue<T> Unity.Collections.Allocator allocator The Unity.Collections.Allocator type to use. Unity.Collections.NativeArrayOptions nativeArrayOptions Should the memory be cleared on allocation? Fields | Improve this Doc View Source Array Internal Unity.Collections.NativeArray<T> of backed data for the NativeSimpleQueue<T> . Declaration public NativeArray<T> Array Field Value Type Description Unity.Collections.NativeArray <T> | Improve this Doc View Source Count Number of elements. Declaration public int Count Field Value Type Description System.Int32 | Improve this Doc View Source EndIndex Last valid element (tail) index in the queue. Declaration public int EndIndex Field Value Type Description System.Int32 | Improve this Doc View Source FirstIndex First valid element (head) index in the queue. Declaration public int FirstIndex Field Value Type Description System.Int32 Methods | Improve this Doc View Source Clear() Clear the NativeSimpleQueue<T> . Declaration public void Clear() | Improve this Doc View Source Dequeue() Pop (remove and return) the first element from the NativeSimpleQueue<T> . Declaration public T Dequeue() Returns Type Description T The first element. | Improve this Doc View Source Dispose() Properly dispose of the NativeSimpleQueue<T> . Declaration public void Dispose() | Improve this Doc View Source Enqueue(T, Allocator, NativeArrayOptions) Add an item to the NativeSimpleQueue<T> at its end.. Declaration public void Enqueue(T item, Allocator allocator, NativeArrayOptions nativeArrayOptions) Parameters Type Name Description T item The typed System.Object to add. Unity.Collections.Allocator allocator The Unity.Collections.Allocator type to use. Unity.Collections.NativeArrayOptions nativeArrayOptions Should the memory be cleared on allocation? | Improve this Doc View Source GetElementAt(Int32) Retrieve the element at the provided index . Declaration public T GetElementAt(int index) Parameters Type Name Description System.Int32 index The target System.Object index. Returns Type Description T The target element. | Improve this Doc View Source Peek() Retrieve the first element from the NativeSimpleQueue<T> . Declaration public T Peek() Returns Type Description T The first element. | Improve this Doc View Source TrimExcess(Allocator, NativeArrayOptions) Shrink the capacity of the NativeSimpleQueue<T> to fit its contents. Declaration public void TrimExcess(Allocator allocator, NativeArrayOptions nativeArrayOptions) Parameters Type Name Description Unity.Collections.Allocator allocator The Unity.Collections.Allocator type to use. Unity.Collections.NativeArrayOptions nativeArrayOptions Should the memory be cleared on allocation? Implements System.IDisposable"
  },
  "api/GDX.Collections.Generic.NativeUniformArray3D-1.html": {
    "href": "api/GDX.Collections.Generic.NativeUniformArray3D-1.html",
    "title": "Struct NativeUniformArray3D<T> | GDX",
    "keywords": "Struct NativeUniformArray3D<T> A 3-Dimensional Unity.Collections.NativeArray<T> backed array. Implements System.IDisposable Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : GDX.Collections.Generic Assembly : GDX.dll Syntax public struct NativeUniformArray3D<T> : IDisposable where T : struct Type Parameters Name Description T Type of objects. Remarks The NativeArray2D<T> is backed by a Unity.Collections.NativeArray<T> which requires UnityEngine.CoreModule.dll. Constructors | Improve this Doc View Source NativeUniformArray3D(Int32, Allocator, NativeArrayOptions) Create a NativeUniformArray3D<T> with a uniform dimensional length. Declaration public NativeUniformArray3D(int stride, Allocator allocator, NativeArrayOptions nativeArrayOptions) Parameters Type Name Description System.Int32 stride X length, Y length and Z length will all be set to this value. Unity.Collections.Allocator allocator The Unity.Collections.Allocator type to use. Unity.Collections.NativeArrayOptions nativeArrayOptions Should the memory be cleared on allocation? Fields | Improve this Doc View Source Array The backing Unity.Collections.NativeArray<T> . Declaration public NativeArray<T> Array Field Value Type Description Unity.Collections.NativeArray <T> | Improve this Doc View Source Length The length of Array . Declaration public readonly int Length Field Value Type Description System.Int32 | Improve this Doc View Source Stride The stride of each dimensional segment in Array . Declaration public readonly int Stride Field Value Type Description System.Int32 Properties | Improve this Doc View Source Item[Int32, Int32, Int32] Access a specific location in the voxel. Declaration public T this[int x, int y, int z] { get; set; } Parameters Type Name Description System.Int32 x X location index. System.Int32 y Y location index. System.Int32 z Z location index. Property Value Type Description T Methods | Improve this Doc View Source Dispose() Properly dispose of the NativeUniformArray3D<T> . Declaration public void Dispose() Implements System.IDisposable"
  },
  "api/GDX.Collections.Generic.SimpleList-1.html": {
    "href": "api/GDX.Collections.Generic.SimpleList-1.html",
    "title": "Struct SimpleList<T> | GDX",
    "keywords": "Struct SimpleList<T> A System.Collections.Generic.List`1 -like data structure. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : GDX.Collections.Generic Assembly : GDX.dll Syntax public struct SimpleList<T> Type Parameters Name Description T The type of the System.Object s contained within. Constructors | Improve this Doc View Source SimpleList(T[]) Create a SimpleList<T> providing an existing arrayToUse . Declaration public SimpleList(T[] arrayToUse) Parameters Type Name Description T[] arrayToUse An existing array to use in the SimpleList<T> . | Improve this Doc View Source SimpleList(T[], Int32) Create a SimpleList<T> providing an existing arrayToUse and setting the Count . Declaration public SimpleList(T[] arrayToUse, int count) Parameters Type Name Description T[] arrayToUse An existing array to use in the SimpleList<T> . System.Int32 count An existing element count. | Improve this Doc View Source SimpleList(Int32) Create a SimpleList<T> with an initial capacity . Declaration public SimpleList(int capacity) Parameters Type Name Description System.Int32 capacity An initial sizing for the Array . Fields | Improve this Doc View Source Array Internal array of backed data for the SimpleList<T> . Declaration public T[] Array Field Value Type Description T[] | Improve this Doc View Source Count The current number of occupied elements in the CircularBuffer<T> . Declaration public int Count Field Value Type Description System.Int32 Remarks CAUTION! Changing this will alter the understanding of the data. Methods | Improve this Doc View Source AddUnchecked(T) Add an item to the SimpleList<T> without checking the Array size. Declaration public void AddUnchecked(T item) Parameters Type Name Description T item A typed System.Object to add. | Improve this Doc View Source AddWithExpandCheck(T) Add an item to the SimpleList<T> , checking if Array needs to be resized. Declaration public void AddWithExpandCheck(T item) Parameters Type Name Description T item A typed System.Object to add. | Improve this Doc View Source AddWithExpandCheck(T, Int32) Add an item to the SimpleList<T> , checking if Array needs to be resized. Declaration public void AddWithExpandCheck(T item, int howMuchToExpand) Parameters Type Name Description T item A typed System.Object to add. System.Int32 howMuchToExpand How much to expand the array by. | Improve this Doc View Source Clear() Clear out the Array in SimpleList<T> and sets the Count to 0. Declaration public void Clear() | Improve this Doc View Source Insert(T, Int32) Insert an item into the SimpleList<T> , checking if Array needs to be resized. Declaration public void Insert(T item, int index) Parameters Type Name Description T item A typed System.Object to insert. System.Int32 index The index in Array to add the item at. | Improve this Doc View Source RemoveAt(Int32) Remove an item from the SimpleList<T> at a specific index . Declaration public void RemoveAt(int index) Parameters Type Name Description System.Int32 index The target index. | Improve this Doc View Source RemoveFromBack() Remove the last element in the SimpleList<T> . Declaration public void RemoveFromBack() | Improve this Doc View Source Reserve(Int32) Resizes the Array , ensuring there are the provided number of empty spots in it. Declaration public void Reserve(int numberToReserve) Parameters Type Name Description System.Int32 numberToReserve Number of desired empty spots."
  },
  "api/GDX.Collections.html": {
    "href": "api/GDX.Collections.html",
    "title": "Namespace GDX.Collections | GDX",
    "keywords": "Namespace GDX.Collections Structs BitArray128 A 128-bit array. BitArray16 A 16-bit array. BitArray256 A 256-bit array. BitArray32 A 32-bit array. BitArray512 A 512-bit array. BitArray64 A 64-bit array. BitArray8 A 8-bit array. FreeList An array where indices are allocated from and stored in an in-place linked list. Allocating or deallocating a single int from this array is very fast, as is single datum lookup, but neither the allocated indices nor the free indices can be reliably iterated without an external data structure. This structure can be adapted to an arbitrary of external, parallel arrays. NativeSparseSet An adapter collection for external data arrays that allows constant-time insertion, deletion, and lookup by handle, as well as array-like iteration. SparseSet An adapter collection for external data arrays that allows constant-time insertion, deletion, and lookup by handle, as well as array-like iteration."
  },
  "api/GDX.Collections.NativeSparseSet.html": {
    "href": "api/GDX.Collections.NativeSparseSet.html",
    "title": "Struct NativeSparseSet | GDX",
    "keywords": "Struct NativeSparseSet An adapter collection for external data arrays that allows constant-time insertion, deletion, and lookup by handle, as well as array-like iteration. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : GDX.Collections Assembly : GDX.dll Syntax public struct NativeSparseSet Remarks The NativeSparseSet is backed by a Unity.Collections.NativeArray<T> which requires UnityEngine.CoreModule.dll. Constructors | Improve this Doc View Source NativeSparseSet(Int32, Allocator, NativeArrayOptions) Create a NativeSparseSet with an initialCapacity . Declaration public NativeSparseSet(int initialCapacity, Allocator allocator, NativeArrayOptions nativeArrayOptions) Parameters Type Name Description System.Int32 initialCapacity The initial capacity of the sparse and dense int arrays. Unity.Collections.Allocator allocator The Unity.Collections.Allocator type to use. Unity.Collections.NativeArrayOptions nativeArrayOptions Should the memory be cleared on allocation? Fields | Improve this Doc View Source Count How many indices are being used currently? Declaration public int Count Field Value Type Description System.Int32 | Improve this Doc View Source DenseArray Holds references to the sparse array for swapping indices. Declaration public NativeArray<int> DenseArray Field Value Type Description Unity.Collections.NativeArray < System.Int32 > | Improve this Doc View Source FreeIndex The first free (currently unused) index in the sparse array. Declaration public int FreeIndex Field Value Type Description System.Int32 | Improve this Doc View Source SparseArray Holds references to dense array indices. Declaration public NativeArray<int> SparseArray Field Value Type Description Unity.Collections.NativeArray < System.Int32 > Remarks Its own indices are claimed and freed via a free-list. Methods | Improve this Doc View Source AddUnchecked(out Int32, out Int32) Adds a sparse/dense index pair to the set without checking if the set needs to expand. Declaration public void AddUnchecked(out int sparseIndex, out int denseIndex) Parameters Type Name Description System.Int32 sparseIndex The sparse index allocated. System.Int32 denseIndex The dense index allocated. | Improve this Doc View Source AddWithExpandCheck(Int32, out Int32, out Int32, Allocator, NativeArrayOptions) Adds a sparse/dense index pair to the set and expands the arrays if necessary. Declaration public bool AddWithExpandCheck(int expandBy, out int sparseIndex, out int denseIndex, Allocator allocator, NativeArrayOptions nativeArrayOptions) Parameters Type Name Description System.Int32 expandBy How many indices to expand by. System.Int32 sparseIndex The sparse index allocated. System.Int32 denseIndex The dense index allocated. Unity.Collections.Allocator allocator The Unity.Collections.Allocator type to use. Unity.Collections.NativeArrayOptions nativeArrayOptions Should the memory be cleared on allocation? Returns Type Description System.Boolean True if the index pool expanded. | Improve this Doc View Source Clear() Clear the dense and sparse arrays. Declaration public void Clear() | Improve this Doc View Source Clear(NativeArray<UInt64>) Clear the dense and sparse arrays. Declaration public void Clear(NativeArray<ulong> versionArray) Parameters Type Name Description Unity.Collections.NativeArray < System.UInt64 > versionArray Array containing version numbers to check against. | Improve this Doc View Source Expand(Int32, Allocator, NativeArrayOptions) Reallocate the dense and sparse arrays with additional capacity. Declaration public void Expand(int extraCapacity, Allocator allocator, NativeArrayOptions nativeArrayOptions) Parameters Type Name Description System.Int32 extraCapacity How many indices to expand the dense and sparse arrays by. Unity.Collections.Allocator allocator The Unity.Collections.Allocator type to use. Unity.Collections.NativeArrayOptions nativeArrayOptions Should the memory be cleared on allocation? | Improve this Doc View Source Expand(Int32, ref NativeArray<UInt64>, Allocator, NativeArrayOptions) Reallocate the dense and sparse arrays with additional capacity. Declaration public void Expand(int extraCapacity, ref NativeArray<ulong> versionArray, Allocator allocator, NativeArrayOptions nativeArrayOptions) Parameters Type Name Description System.Int32 extraCapacity How many indices to expand the dense and sparse arrays by. Unity.Collections.NativeArray < System.UInt64 > versionArray Array containing version numbers to check against. Unity.Collections.Allocator allocator The Unity.Collections.Allocator type to use. Unity.Collections.NativeArrayOptions nativeArrayOptions Should the memory be cleared on allocation? | Improve this Doc View Source GetDenseIndexUnchecked(Int32) Gets the value of the sparse array at the given index without any data validation. Declaration public int GetDenseIndexUnchecked(int sparseIndex) Parameters Type Name Description System.Int32 sparseIndex The index to check in the sparse array. Returns Type Description System.Int32 The dense index at the given sparse index. | Improve this Doc View Source GetDenseIndexWithBoundsAndVersionCheck(Int32, UInt64, NativeArray<UInt64>) Gets the value of the sparse array at the given index, or -1 if the given sparse index is invalid.. Declaration public int GetDenseIndexWithBoundsAndVersionCheck(int sparseIndex, ulong version, NativeArray<ulong> versionArray) Parameters Type Name Description System.Int32 sparseIndex The index in the sparse array to check against. System.UInt64 version The version number associated with the sparse index. Unity.Collections.NativeArray < System.UInt64 > versionArray The array containing the version number to check against. Returns Type Description System.Int32 The dense index pointed to by the current sparse index, or -1 if invalid. | Improve this Doc View Source GetDenseIndexWithBoundsCheck(Int32) Gets the value of the sparse array at the given index, or -1 if the dense and sparse indices don't point to each other or if the dense index is outside the dense bounds. Declaration public int GetDenseIndexWithBoundsCheck(int sparseIndex) Parameters Type Name Description System.Int32 sparseIndex The index in the sparse array to check against. Returns Type Description System.Int32 The dense index pointed to by the current sparse index, or -1 if invalid. | Improve this Doc View Source GetDenseIndexWithVersionCheck(Int32, UInt64, NativeArray<UInt64>) Gets the value of the sparse array at the given index, or -1 if the version number does not match. Declaration public int GetDenseIndexWithVersionCheck(int sparseIndex, ulong version, NativeArray<ulong> versionArray) Parameters Type Name Description System.Int32 sparseIndex The index in the sparse array to check against. System.UInt64 version The version number associated with the sparse index. Unity.Collections.NativeArray < System.UInt64 > versionArray The array containing the version number to check against. Returns Type Description System.Int32 The dense index pointed to by the current sparse index, or -1 if invalid. | Improve this Doc View Source RemoveUnchecked(Int32) Removes the associated sparse/dense index pair from active use. Declaration public void RemoveUnchecked(int sparseIndexToRemove) Parameters Type Name Description System.Int32 sparseIndexToRemove The sparse index to remove. | Improve this Doc View Source RemoveUnchecked(Int32, out Int32, out Int32) Removes the associated sparse/dense index pair from active use. Out parameters used to manage parallel data arrays. Declaration public void RemoveUnchecked(int sparseIndexToRemove, out int indexToSwapTo, out int indexToSwapFrom) Parameters Type Name Description System.Int32 sparseIndexToRemove The sparse index to remove. System.Int32 indexToSwapTo Replace the data array value at this index with the data array value at indexToSwapFrom. System.Int32 indexToSwapFrom Set the data array value at this index to default after swapping with the data array value at indexToSwapTo. | Improve this Doc View Source RemoveUnchecked(Int32, NativeArray<UInt64>) Removes the associated sparse/dense index pair from active use and increments the version. Declaration public void RemoveUnchecked(int sparseIndexToRemove, NativeArray<ulong> versionArray) Parameters Type Name Description System.Int32 sparseIndexToRemove The sparse index to remove. Unity.Collections.NativeArray < System.UInt64 > versionArray The array where version numbers to check against are stored. | Improve this Doc View Source RemoveUnchecked(Int32, NativeArray<UInt64>, out Int32, out Int32) Removes the associated sparse/dense index pair from active use and increments the version. Out parameters used to manage parallel data arrays. Declaration public void RemoveUnchecked(int sparseIndexToRemove, NativeArray<ulong> versionArray, out int indexToSwapTo, out int indexToSwapFrom) Parameters Type Name Description System.Int32 sparseIndexToRemove The sparse index to remove. Unity.Collections.NativeArray < System.UInt64 > versionArray The array where version numbers to check against are stored. System.Int32 indexToSwapTo Replace the data array value at this index with the data array value at indexToSwapFrom. System.Int32 indexToSwapFrom Set the data array value at this index to default after swapping with the data array value at indexToSwapTo. | Improve this Doc View Source RemoveUncheckedFromDenseIndex(Int32) Removes the associated sparse/dense index pair from active use. Declaration public void RemoveUncheckedFromDenseIndex(int denseIndexToRemove) Parameters Type Name Description System.Int32 denseIndexToRemove The dense index associated with the sparse index to remove. | Improve this Doc View Source RemoveUncheckedFromDenseIndex(Int32, out Int32) Removes the associated sparse/dense index pair from active use. Out parameter used to manage parallel data arrays. Declaration public void RemoveUncheckedFromDenseIndex(int denseIndexToRemove, out int indexToSwapFrom) Parameters Type Name Description System.Int32 denseIndexToRemove The sparse index to remove. System.Int32 indexToSwapFrom Set the data array value at this index to default after swapping with the data array value at denseIndexToRemove. | Improve this Doc View Source RemoveUncheckedFromDenseIndex(Int32, UInt64[]) Removes the associated sparse/dense index pair from active use. Declaration public void RemoveUncheckedFromDenseIndex(int denseIndexToRemove, ulong[] versionArray) Parameters Type Name Description System.Int32 denseIndexToRemove The dense index associated with the sparse index to remove. System.UInt64 [] versionArray The array where version numbers to check against are stored. | Improve this Doc View Source RemoveUncheckedFromDenseIndex(Int32, NativeArray<UInt64>, out Int32) Removes the associated sparse/dense index pair from active use. Out parameter used to manage parallel data arrays. Declaration public void RemoveUncheckedFromDenseIndex(int denseIndexToRemove, NativeArray<ulong> versionArray, out int indexToSwapFrom) Parameters Type Name Description System.Int32 denseIndexToRemove The sparse index to remove. Unity.Collections.NativeArray < System.UInt64 > versionArray The array where version numbers to check against are stored. System.Int32 indexToSwapFrom Set the data array value at this index to default after swapping with the data array value at denseIndexToRemove. | Improve this Doc View Source RemoveWithBoundsAndVersionChecks(ref Int32, UInt64, NativeArray<UInt64>) Removes the associated sparse/dense index pair from active use. calls. Declaration public bool RemoveWithBoundsAndVersionChecks(ref int sparseIndexToRemove, ulong version, NativeArray<ulong> versionArray) Parameters Type Name Description System.Int32 sparseIndexToRemove The sparse index to remove. System.UInt64 version The version number of the int used to access the sparse index. Used to guard against accessing indices that have been removed and reused. Unity.Collections.NativeArray < System.UInt64 > versionArray The array where version numbers to check against are stored. Returns Type Description System.Boolean True if the element was successfully removed. | Improve this Doc View Source RemoveWithNullValueCheck(ref Int32) Returns true if the element was successfully removed. WARNING: Will not protect against accidentally removing twice if the index in question was recycled between Remove calls. Declaration public bool RemoveWithNullValueCheck(ref int sparseIndexToRemove) Parameters Type Name Description System.Int32 sparseIndexToRemove Returns Type Description System.Boolean | Improve this Doc View Source TryRemoveFromDenseIndexWithVersionCheck(Int32, UInt64, NativeArray<UInt64>) Attempts to remove the associated sparse/dense index pair from active use and increments the version if successful. Declaration public bool TryRemoveFromDenseIndexWithVersionCheck(int denseIndexToRemove, ulong version, NativeArray<ulong> versionArray) Parameters Type Name Description System.Int32 denseIndexToRemove The dense index associated with the sparse index to remove. System.UInt64 version The array where version numbers to check against are stored. Unity.Collections.NativeArray < System.UInt64 > versionArray The array where version numbers to check against are stored. Returns Type Description System.Boolean Whether or not the remove attempt succeeded. | Improve this Doc View Source TryRemoveWithVersionCheck(Int32, UInt64, NativeArray<UInt64>, out Int32, out Int32) Attempts to remove the associated sparse/dense index pair from active use and increments the version if successful. Out parameters used to manage parallel data arrays. Declaration public bool TryRemoveWithVersionCheck(int sparseIndexToRemove, ulong version, NativeArray<ulong> versionArray, out int indexToSwapTo, out int indexToSwapFrom) Parameters Type Name Description System.Int32 sparseIndexToRemove The sparse index to remove. System.UInt64 version The version number of the int used to access the sparse index. Used to guard against accessing indices that have been removed and reused. Unity.Collections.NativeArray < System.UInt64 > versionArray The array where version numbers to check against are stored. System.Int32 indexToSwapTo Replace the data array value at this index with the data array value at indexToSwapFrom. System.Int32 indexToSwapFrom Set the data array value at this index to default after swapping with the data array value at indexToSwapTo. Returns Type Description System.Boolean Whether or not the remove attempt succeeded."
  },
  "api/GDX.Collections.SparseSet.html": {
    "href": "api/GDX.Collections.SparseSet.html",
    "title": "Struct SparseSet | GDX",
    "keywords": "Struct SparseSet An adapter collection for external data arrays that allows constant-time insertion, deletion, and lookup by handle, as well as array-like iteration. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : GDX.Collections Assembly : GDX.dll Syntax public struct SparseSet Constructors | Improve this Doc View Source SparseSet(Int32) Create a SparseSet with an initialCapacity . Declaration public SparseSet(int initialCapacity) Parameters Type Name Description System.Int32 initialCapacity The initial capacity of the sparse and dense int arrays. Fields | Improve this Doc View Source Count How many indices are being used currently? Declaration public int Count Field Value Type Description System.Int32 | Improve this Doc View Source DenseArray Holds references to the sparse array for swapping indices. Declaration public int[] DenseArray Field Value Type Description System.Int32 [] | Improve this Doc View Source FreeIndex The first free (currently unused) index in the sparse array. Declaration public int FreeIndex Field Value Type Description System.Int32 | Improve this Doc View Source SparseArray Holds references to dense array indices. Declaration public int[] SparseArray Field Value Type Description System.Int32 [] Remarks Its own indices are claimed and freed via a free-list. Methods | Improve this Doc View Source AddUnchecked(out Int32, out Int32) Adds a sparse/dense index pair to the set without checking if the set needs to expand. Declaration public void AddUnchecked(out int sparseIndex, out int denseIndex) Parameters Type Name Description System.Int32 sparseIndex The sparse index allocated. System.Int32 denseIndex The dense index allocated. | Improve this Doc View Source AddUnchecked<T0>(T0, T0[]) Adds to the set without checking if the set needs to expand. Declaration public int AddUnchecked<T0>(T0 obj0, T0[] array0) Parameters Type Name Description T0 obj0 T0[] array0 Returns Type Description System.Int32 The sparse index allocated Type Parameters Name Description T0 | Improve this Doc View Source AddUnchecked<T0, T1>(T0, T0[], T1, T1[]) Adds to the set without checking if the set needs to expand. Declaration public int AddUnchecked<T0, T1>(T0 obj0, T0[] array0, T1 obj1, T1[] array1) Parameters Type Name Description T0 obj0 T0[] array0 T1 obj1 T1[] array1 Returns Type Description System.Int32 The sparse index allocated Type Parameters Name Description T0 T1 | Improve this Doc View Source AddUnchecked<T0, T1, T2>(T0, T0[], T1, T1[], T2, T2[]) Adds to the set without checking if the set needs to expand. Declaration public int AddUnchecked<T0, T1, T2>(T0 obj0, T0[] array0, T1 obj1, T1[] array1, T2 obj2, T2[] array2) Parameters Type Name Description T0 obj0 T0[] array0 T1 obj1 T1[] array1 T2 obj2 T2[] array2 Returns Type Description System.Int32 The sparse index allocated Type Parameters Name Description T0 T1 T2 | Improve this Doc View Source AddUnchecked<T0, T1, T2, T3>(T0, T0[], T1, T1[], T2, T2[], T3, T3[]) Adds to the set without checking if the set needs to expand. Declaration public int AddUnchecked<T0, T1, T2, T3>(T0 obj0, T0[] array0, T1 obj1, T1[] array1, T2 obj2, T2[] array2, T3 obj3, T3[] array3) Parameters Type Name Description T0 obj0 T0[] array0 T1 obj1 T1[] array1 T2 obj2 T2[] array2 T3 obj3 T3[] array3 Returns Type Description System.Int32 The sparse index allocated Type Parameters Name Description T0 T1 T2 T3 | Improve this Doc View Source AddUnchecked<T0, T1, T2, T3, T4>(T0, T0[], T1, T1[], T2, T2[], T3, T3[], T4, T4[]) Adds to the set without checking if the set needs to expand. Declaration public int AddUnchecked<T0, T1, T2, T3, T4>(T0 obj0, T0[] array0, T1 obj1, T1[] array1, T2 obj2, T2[] array2, T3 obj3, T3[] array3, T4 obj4, T4[] array4) Parameters Type Name Description T0 obj0 T0[] array0 T1 obj1 T1[] array1 T2 obj2 T2[] array2 T3 obj3 T3[] array3 T4 obj4 T4[] array4 Returns Type Description System.Int32 The sparse index allocated Type Parameters Name Description T0 T1 T2 T3 T4 | Improve this Doc View Source AddUnchecked<T0, T1, T2, T3, T4, T5>(T0, T0[], T1, T1[], T2, T2[], T3, T3[], T4, T4[], T5, T5[]) Adds to the set without checking if the set needs to expand. Declaration public int AddUnchecked<T0, T1, T2, T3, T4, T5>(T0 obj0, T0[] array0, T1 obj1, T1[] array1, T2 obj2, T2[] array2, T3 obj3, T3[] array3, T4 obj4, T4[] array4, T5 obj5, T5[] array5) Parameters Type Name Description T0 obj0 T0[] array0 T1 obj1 T1[] array1 T2 obj2 T2[] array2 T3 obj3 T3[] array3 T4 obj4 T4[] array4 T5 obj5 T5[] array5 Returns Type Description System.Int32 The sparse index allocated Type Parameters Name Description T0 T1 T2 T3 T4 T5 | Improve this Doc View Source AddUnchecked<T0, T1, T2, T3, T4, T5, T6>(T0, T0[], T1, T1[], T2, T2[], T3, T3[], T4, T4[], T5, T5[], T6, T6[]) Adds to the set without checking if the set needs to expand. Declaration public int AddUnchecked<T0, T1, T2, T3, T4, T5, T6>(T0 obj0, T0[] array0, T1 obj1, T1[] array1, T2 obj2, T2[] array2, T3 obj3, T3[] array3, T4 obj4, T4[] array4, T5 obj5, T5[] array5, T6 obj6, T6[] array6) Parameters Type Name Description T0 obj0 T0[] array0 T1 obj1 T1[] array1 T2 obj2 T2[] array2 T3 obj3 T3[] array3 T4 obj4 T4[] array4 T5 obj5 T5[] array5 T6 obj6 T6[] array6 Returns Type Description System.Int32 The sparse index allocated Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 | Improve this Doc View Source AddUnchecked<T0, T1, T2, T3, T4, T5, T6, T7>(T0, T0[], T1, T1[], T2, T2[], T3, T3[], T4, T4[], T5, T5[], T6, T6[], T7, T7[]) Adds to the set without checking if the set needs to expand. Declaration public int AddUnchecked<T0, T1, T2, T3, T4, T5, T6, T7>(T0 obj0, T0[] array0, T1 obj1, T1[] array1, T2 obj2, T2[] array2, T3 obj3, T3[] array3, T4 obj4, T4[] array4, T5 obj5, T5[] array5, T6 obj6, T6[] array6, T7 obj7, T7[] array7) Parameters Type Name Description T0 obj0 T0[] array0 T1 obj1 T1[] array1 T2 obj2 T2[] array2 T3 obj3 T3[] array3 T4 obj4 T4[] array4 T5 obj5 T5[] array5 T6 obj6 T6[] array6 T7 obj7 T7[] array7 Returns Type Description System.Int32 The sparse index allocated Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7 | Improve this Doc View Source AddWithExpandCheck(Int32, out Int32, out Int32) Adds a sparse/dense index pair to the set and expands the arrays if necessary. Declaration public bool AddWithExpandCheck(int expandBy, out int sparseIndex, out int denseIndex) Parameters Type Name Description System.Int32 expandBy How many indices to expand by. System.Int32 sparseIndex The sparse index allocated. System.Int32 denseIndex The dense index allocated. Returns Type Description System.Boolean True if the index pool expanded. | Improve this Doc View Source AddWithExpandCheck<T0>(T0, ref T0[], out Int32, Int32) Adds a sparse/dense index pair to the set and expands the arrays if necessary. Declaration public bool AddWithExpandCheck<T0>(T0 obj0, ref T0[] array0, out int lookupIndex, int howMuchToExpand = 16) Parameters Type Name Description T0 obj0 T0[] array0 System.Int32 lookupIndex System.Int32 howMuchToExpand Returns Type Description System.Boolean True if the index pool expanded. Type Parameters Name Description T0 | Improve this Doc View Source AddWithExpandCheck<T0, T1>(T0, ref T0[], T1, ref T1[], out Int32, Int32) Adds a sparse/dense index pair to the set and expands the arrays if necessary. Declaration public bool AddWithExpandCheck<T0, T1>(T0 obj0, ref T0[] array0, T1 obj1, ref T1[] array1, out int lookupIndex, int howMuchToExpand = 16) Parameters Type Name Description T0 obj0 T0[] array0 T1 obj1 T1[] array1 System.Int32 lookupIndex System.Int32 howMuchToExpand Returns Type Description System.Boolean True if the index pool expanded. Type Parameters Name Description T0 T1 | Improve this Doc View Source AddWithExpandCheck<T0, T1, T2>(T0, ref T0[], T1, ref T1[], T2, ref T2[], out Int32, Int32) Adds a sparse/dense index pair to the set and expands the arrays if necessary. Declaration public bool AddWithExpandCheck<T0, T1, T2>(T0 obj0, ref T0[] array0, T1 obj1, ref T1[] array1, T2 obj2, ref T2[] array2, out int lookupIndex, int howMuchToExpand = 16) Parameters Type Name Description T0 obj0 T0[] array0 T1 obj1 T1[] array1 T2 obj2 T2[] array2 System.Int32 lookupIndex System.Int32 howMuchToExpand Returns Type Description System.Boolean True if the index pool expanded. Type Parameters Name Description T0 T1 T2 | Improve this Doc View Source AddWithExpandCheck<T0, T1, T2, T3>(T0, ref T0[], T1, ref T1[], T2, ref T2[], T3, ref T3[], out Int32, Int32) Adds a sparse/dense index pair to the set and expands the arrays if necessary. Declaration public bool AddWithExpandCheck<T0, T1, T2, T3>(T0 obj0, ref T0[] array0, T1 obj1, ref T1[] array1, T2 obj2, ref T2[] array2, T3 obj3, ref T3[] array3, out int lookupIndex, int howMuchToExpand = 16) Parameters Type Name Description T0 obj0 T0[] array0 T1 obj1 T1[] array1 T2 obj2 T2[] array2 T3 obj3 T3[] array3 System.Int32 lookupIndex System.Int32 howMuchToExpand Returns Type Description System.Boolean True if the index pool expanded. Type Parameters Name Description T0 T1 T2 T3 | Improve this Doc View Source AddWithExpandCheck<T0, T1, T2, T3, T4>(T0, ref T0[], T1, ref T1[], T2, ref T2[], T3, ref T3[], T4, ref T4[], out Int32, Int32) Adds a sparse/dense index pair to the set and expands the arrays if necessary. Declaration public bool AddWithExpandCheck<T0, T1, T2, T3, T4>(T0 obj0, ref T0[] array0, T1 obj1, ref T1[] array1, T2 obj2, ref T2[] array2, T3 obj3, ref T3[] array3, T4 obj4, ref T4[] array4, out int lookupIndex, int howMuchToExpand = 16) Parameters Type Name Description T0 obj0 T0[] array0 T1 obj1 T1[] array1 T2 obj2 T2[] array2 T3 obj3 T3[] array3 T4 obj4 T4[] array4 System.Int32 lookupIndex System.Int32 howMuchToExpand Returns Type Description System.Boolean True if the index pool expanded. Type Parameters Name Description T0 T1 T2 T3 T4 | Improve this Doc View Source AddWithExpandCheck<T0, T1, T2, T3, T4, T5>(T0, ref T0[], T1, ref T1[], T2, ref T2[], T3, ref T3[], T4, ref T4[], T5, ref T5[], out Int32, Int32) Adds a sparse/dense index pair to the set and expands the arrays if necessary. Declaration public bool AddWithExpandCheck<T0, T1, T2, T3, T4, T5>(T0 obj0, ref T0[] array0, T1 obj1, ref T1[] array1, T2 obj2, ref T2[] array2, T3 obj3, ref T3[] array3, T4 obj4, ref T4[] array4, T5 obj5, ref T5[] array5, out int lookupIndex, int howMuchToExpand = 16) Parameters Type Name Description T0 obj0 T0[] array0 T1 obj1 T1[] array1 T2 obj2 T2[] array2 T3 obj3 T3[] array3 T4 obj4 T4[] array4 T5 obj5 T5[] array5 System.Int32 lookupIndex System.Int32 howMuchToExpand Returns Type Description System.Boolean True if the index pool expanded. Type Parameters Name Description T0 T1 T2 T3 T4 T5 | Improve this Doc View Source AddWithExpandCheck<T0, T1, T2, T3, T4, T5, T6>(T0, ref T0[], T1, ref T1[], T2, ref T2[], T3, ref T3[], T4, ref T4[], T5, ref T5[], T6, ref T6[], out Int32, Int32) Adds a sparse/dense index pair to the set and expands the arrays if necessary. Declaration public bool AddWithExpandCheck<T0, T1, T2, T3, T4, T5, T6>(T0 obj0, ref T0[] array0, T1 obj1, ref T1[] array1, T2 obj2, ref T2[] array2, T3 obj3, ref T3[] array3, T4 obj4, ref T4[] array4, T5 obj5, ref T5[] array5, T6 obj6, ref T6[] array6, out int lookupIndex, int howMuchToExpand = 16) Parameters Type Name Description T0 obj0 T0[] array0 T1 obj1 T1[] array1 T2 obj2 T2[] array2 T3 obj3 T3[] array3 T4 obj4 T4[] array4 T5 obj5 T5[] array5 T6 obj6 T6[] array6 System.Int32 lookupIndex System.Int32 howMuchToExpand Returns Type Description System.Boolean True if the index pool expanded. Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 | Improve this Doc View Source AddWithExpandCheck<T0, T1, T2, T3, T4, T5, T6, T7>(T0, ref T0[], T1, ref T1[], T2, ref T2[], T3, ref T3[], T4, ref T4[], T5, ref T5[], T6, ref T6[], T7, ref T7[], out Int32, Int32) Adds a sparse/dense index pair to the set and expands the arrays if necessary. Declaration public bool AddWithExpandCheck<T0, T1, T2, T3, T4, T5, T6, T7>(T0 obj0, ref T0[] array0, T1 obj1, ref T1[] array1, T2 obj2, ref T2[] array2, T3 obj3, ref T3[] array3, T4 obj4, ref T4[] array4, T5 obj5, ref T5[] array5, T6 obj6, ref T6[] array6, T7 obj7, ref T7[] array7, out int lookupIndex, int howMuchToExpand = 16) Parameters Type Name Description T0 obj0 T0[] array0 T1 obj1 T1[] array1 T2 obj2 T2[] array2 T3 obj3 T3[] array3 T4 obj4 T4[] array4 T5 obj5 T5[] array5 T6 obj6 T6[] array6 T7 obj7 T7[] array7 System.Int32 lookupIndex System.Int32 howMuchToExpand Returns Type Description System.Boolean True if the index pool expanded. Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7 | Improve this Doc View Source Clear() Clear the dense and sparse arrays. Declaration public void Clear() | Improve this Doc View Source Clear(UInt64[]) Clear the dense and sparse arrays. Declaration public void Clear(ulong[] versionArray) Parameters Type Name Description System.UInt64 [] versionArray Array containing version numbers to check against. | Improve this Doc View Source Expand(Int32) Reallocate the dense and sparse arrays with additional capacity. Declaration public void Expand(int extraCapacity) Parameters Type Name Description System.Int32 extraCapacity How many indices to expand the dense and sparse arrays by. | Improve this Doc View Source Expand(Int32, ref UInt64[]) Reallocate the dense and sparse arrays with additional capacity. Declaration public void Expand(int extraCapacity, ref ulong[] versionArray) Parameters Type Name Description System.Int32 extraCapacity How many indices to expand the dense and sparse arrays by. System.UInt64 [] versionArray Array containing version numbers to check against. | Improve this Doc View Source GetDenseIndexUnchecked(Int32) Gets the value of the sparse array at the given index without any data validation. Declaration public int GetDenseIndexUnchecked(int sparseIndex) Parameters Type Name Description System.Int32 sparseIndex The index to check in the sparse array. Returns Type Description System.Int32 The dense index at the given sparse index. | Improve this Doc View Source GetDenseIndexWithBoundsAndVersionCheck(Int32, UInt64, UInt64[]) Gets the value of the sparse array at the given index, or -1 if the given sparse index is invalid.. Declaration public int GetDenseIndexWithBoundsAndVersionCheck(int sparseIndex, ulong version, ulong[] versionArray) Parameters Type Name Description System.Int32 sparseIndex The index in the sparse array to check against. System.UInt64 version The version number associated with the sparse index. System.UInt64 [] versionArray The array containing the version number to check against. Returns Type Description System.Int32 The dense index pointed to by the current sparse index, or -1 if invalid. | Improve this Doc View Source GetDenseIndexWithBoundsCheck(Int32) Gets the value of the sparse array at the given index, or -1 if the dense and sparse indices don't point to each other or if the dense index is outside the dense bounds. Declaration public int GetDenseIndexWithBoundsCheck(int sparseIndex) Parameters Type Name Description System.Int32 sparseIndex The index in the sparse array to check against. Returns Type Description System.Int32 The dense index pointed to by the current sparse index, or -1 if invalid. | Improve this Doc View Source GetDenseIndexWithVersionCheck(Int32, UInt64, UInt64[]) Gets the value of the sparse array at the given index, or -1 if the version number does not match. Declaration public int GetDenseIndexWithVersionCheck(int sparseIndex, ulong version, ulong[] versionArray) Parameters Type Name Description System.Int32 sparseIndex The index in the sparse array to check against. System.UInt64 version The version number associated with the sparse index. System.UInt64 [] versionArray The array containing the version number to check against. Returns Type Description System.Int32 The dense index pointed to by the current sparse index, or -1 if invalid. | Improve this Doc View Source RemoveUnchecked(Int32) Removes the associated sparse/dense index pair from active use. Declaration public void RemoveUnchecked(int sparseIndexToRemove) Parameters Type Name Description System.Int32 sparseIndexToRemove The sparse index to remove. | Improve this Doc View Source RemoveUnchecked(Int32, out Int32, out Int32) Removes the associated sparse/dense index pair from active use. Out parameters used to manage parallel data arrays. Declaration public void RemoveUnchecked(int sparseIndexToRemove, out int indexToSwapTo, out int indexToSwapFrom) Parameters Type Name Description System.Int32 sparseIndexToRemove The sparse index to remove. System.Int32 indexToSwapTo Replace the data array value at this index with the data array value at indexToSwapFrom. System.Int32 indexToSwapFrom Set the data array value at this index to default after swapping with the data array value at indexToSwapTo. | Improve this Doc View Source RemoveUnchecked(Int32, UInt64[]) Removes the associated sparse/dense index pair from active use and increments the version. Declaration public void RemoveUnchecked(int sparseIndexToRemove, ulong[] versionArray) Parameters Type Name Description System.Int32 sparseIndexToRemove The sparse index to remove. System.UInt64 [] versionArray The array where version numbers to check against are stored. | Improve this Doc View Source RemoveUnchecked(Int32, UInt64[], out Int32, out Int32) Removes the associated sparse/dense index pair from active use and increments the version. Out parameters used to manage parallel data arrays. Declaration public void RemoveUnchecked(int sparseIndexToRemove, ulong[] versionArray, out int indexToSwapTo, out int indexToSwapFrom) Parameters Type Name Description System.Int32 sparseIndexToRemove The sparse index to remove. System.UInt64 [] versionArray The array where version numbers to check against are stored. System.Int32 indexToSwapTo Replace the data array value at this index with the data array value at indexToSwapFrom. System.Int32 indexToSwapFrom Set the data array value at this index to default after swapping with the data array value at indexToSwapTo. | Improve this Doc View Source RemoveUnchecked<T0>(Int32, T0[]) Declaration public void RemoveUnchecked<T0>(int sparseIndexToRemove, T0[] array0) Parameters Type Name Description System.Int32 sparseIndexToRemove T0[] array0 Type Parameters Name Description T0 | Improve this Doc View Source RemoveUnchecked<T0, T1>(Int32, T0[], T1[]) Declaration public void RemoveUnchecked<T0, T1>(int sparseIndexToRemove, T0[] array0, T1[] array1) Parameters Type Name Description System.Int32 sparseIndexToRemove T0[] array0 T1[] array1 Type Parameters Name Description T0 T1 | Improve this Doc View Source RemoveUnchecked<T0, T1, T2>(Int32, T0[], T1[], T2[]) Declaration public void RemoveUnchecked<T0, T1, T2>(int sparseIndexToRemove, T0[] array0, T1[] array1, T2[] array2) Parameters Type Name Description System.Int32 sparseIndexToRemove T0[] array0 T1[] array1 T2[] array2 Type Parameters Name Description T0 T1 T2 | Improve this Doc View Source RemoveUnchecked<T0, T1, T2, T3>(Int32, T0[], T1[], T2[], T3[]) Declaration public void RemoveUnchecked<T0, T1, T2, T3>(int sparseIndexToRemove, T0[] array0, T1[] array1, T2[] array2, T3[] array3) Parameters Type Name Description System.Int32 sparseIndexToRemove T0[] array0 T1[] array1 T2[] array2 T3[] array3 Type Parameters Name Description T0 T1 T2 T3 | Improve this Doc View Source RemoveUnchecked<T0, T1, T2, T3, T4>(Int32, T0[], T1[], T2[], T3[], T4[]) Declaration public void RemoveUnchecked<T0, T1, T2, T3, T4>(int sparseIndexToRemove, T0[] array0, T1[] array1, T2[] array2, T3[] array3, T4[] array4) Parameters Type Name Description System.Int32 sparseIndexToRemove T0[] array0 T1[] array1 T2[] array2 T3[] array3 T4[] array4 Type Parameters Name Description T0 T1 T2 T3 T4 | Improve this Doc View Source RemoveUnchecked<T0, T1, T2, T3, T4, T5>(Int32, T0[], T1[], T2[], T3[], T4[], T5[]) Declaration public void RemoveUnchecked<T0, T1, T2, T3, T4, T5>(int sparseIndexToRemove, T0[] array0, T1[] array1, T2[] array2, T3[] array3, T4[] array4, T5[] array5) Parameters Type Name Description System.Int32 sparseIndexToRemove T0[] array0 T1[] array1 T2[] array2 T3[] array3 T4[] array4 T5[] array5 Type Parameters Name Description T0 T1 T2 T3 T4 T5 | Improve this Doc View Source RemoveUnchecked<T0, T1, T2, T3, T4, T5, T6>(Int32, T0[], T1[], T2[], T3[], T4[], T5[], T6[]) Declaration public void RemoveUnchecked<T0, T1, T2, T3, T4, T5, T6>(int sparseIndexToRemove, T0[] array0, T1[] array1, T2[] array2, T3[] array3, T4[] array4, T5[] array5, T6[] array6) Parameters Type Name Description System.Int32 sparseIndexToRemove T0[] array0 T1[] array1 T2[] array2 T3[] array3 T4[] array4 T5[] array5 T6[] array6 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 | Improve this Doc View Source RemoveUnchecked<T0, T1, T2, T3, T4, T5, T6, T7>(Int32, T0[], T1[], T2[], T3[], T4[], T5[], T6[], T7[]) Declaration public void RemoveUnchecked<T0, T1, T2, T3, T4, T5, T6, T7>(int sparseIndexToRemove, T0[] array0, T1[] array1, T2[] array2, T3[] array3, T4[] array4, T5[] array5, T6[] array6, T7[] array7) Parameters Type Name Description System.Int32 sparseIndexToRemove T0[] array0 T1[] array1 T2[] array2 T3[] array3 T4[] array4 T5[] array5 T6[] array6 T7[] array7 Type Parameters Name Description T0 T1 T2 T3 T4 T5 T6 T7 | Improve this Doc View Source RemoveUncheckedFromDenseIndex(Int32) Removes the associated sparse/dense index pair from active use. Declaration public void RemoveUncheckedFromDenseIndex(int denseIndexToRemove) Parameters Type Name Description System.Int32 denseIndexToRemove The dense index associated with the sparse index to remove. | Improve this Doc View Source RemoveUncheckedFromDenseIndex(Int32, out Int32) Removes the associated sparse/dense index pair from active use. Out parameter used to manage parallel data arrays. Declaration public void RemoveUncheckedFromDenseIndex(int denseIndexToRemove, out int indexToSwapFrom) Parameters Type Name Description System.Int32 denseIndexToRemove The sparse index to remove. System.Int32 indexToSwapFrom Set the data array value at this index to default after swapping with the data array value at denseIndexToRemove. | Improve this Doc View Source RemoveUncheckedFromDenseIndex(Int32, UInt64[]) Removes the associated sparse/dense index pair from active use. Declaration public void RemoveUncheckedFromDenseIndex(int denseIndexToRemove, ulong[] versionArray) Parameters Type Name Description System.Int32 denseIndexToRemove The dense index associated with the sparse index to remove. System.UInt64 [] versionArray The array where version numbers to check against are stored. | Improve this Doc View Source RemoveUncheckedFromDenseIndex(Int32, UInt64[], out Int32) Removes the associated sparse/dense index pair from active use. Out parameter used to manage parallel data arrays. Declaration public void RemoveUncheckedFromDenseIndex(int denseIndexToRemove, ulong[] versionArray, out int indexToSwapFrom) Parameters Type Name Description System.Int32 denseIndexToRemove The sparse index to remove. System.UInt64 [] versionArray The array where version numbers to check against are stored. System.Int32 indexToSwapFrom Set the data array value at this index to default after swapping with the data array value at denseIndexToRemove. | Improve this Doc View Source RemoveWithBoundsAndVersionChecks(ref Int32, UInt64, ref UInt64[]) Removes the associated sparse/dense index pair from active use. calls. Declaration public bool RemoveWithBoundsAndVersionChecks(ref int sparseIndexToRemove, ulong version, ref ulong[] versionArray) Parameters Type Name Description System.Int32 sparseIndexToRemove The sparse index to remove. System.UInt64 version The version number of the int used to access the sparse index. Used to guard against accessing indices that have been removed and reused. System.UInt64 [] versionArray The array where version numbers to check against are stored. Returns Type Description System.Boolean True if the element was successfully removed. | Improve this Doc View Source RemoveWithNullValueCheck(ref Int32) Returns true if the element was successfully removed. WARNING: Will not protect against accidentally removing twice if the index in question was recycled between Remove calls. Declaration public bool RemoveWithNullValueCheck(ref int sparseIndexToRemove) Parameters Type Name Description System.Int32 sparseIndexToRemove Returns Type Description System.Boolean | Improve this Doc View Source TryRemoveFromDenseIndexWithVersionCheck(Int32, UInt64, UInt64[]) Attempts to remove the associated sparse/dense index pair from active use and increments the version if successful. Declaration public bool TryRemoveFromDenseIndexWithVersionCheck(int denseIndexToRemove, ulong version, ulong[] versionArray) Parameters Type Name Description System.Int32 denseIndexToRemove The dense index associated with the sparse index to remove. System.UInt64 version The array where version numbers to check against are stored. System.UInt64 [] versionArray The array where version numbers to check against are stored. Returns Type Description System.Boolean Whether or not the remove attempt succeeded. | Improve this Doc View Source TryRemoveWithVersionCheck(Int32, UInt64, UInt64[], out Int32, out Int32) Attempts to remove the associated sparse/dense index pair from active use and increments the version if successful. Out parameters used to manage parallel data arrays. Declaration public bool TryRemoveWithVersionCheck(int sparseIndexToRemove, ulong version, ulong[] versionArray, out int indexToSwapTo, out int indexToSwapFrom) Parameters Type Name Description System.Int32 sparseIndexToRemove The sparse index to remove. System.UInt64 version The version number of the int used to access the sparse index. Used to guard against accessing indices that have been removed and reused. System.UInt64 [] versionArray The array where version numbers to check against are stored. System.Int32 indexToSwapTo Replace the data array value at this index with the data array value at indexToSwapFrom. System.Int32 indexToSwapFrom Set the data array value at this index to default after swapping with the data array value at indexToSwapTo. Returns Type Description System.Boolean Whether or not the remove attempt succeeded."
  },
  "api/GDX.Developer.CommandLineParser.html": {
    "href": "api/GDX.Developer.CommandLineParser.html",
    "title": "Class CommandLineParser | GDX",
    "keywords": "Class CommandLineParser A parser specifically for command line arguments which follow the --FLAG or --KEY=VALUE format. Inheritance System.Object CommandLineParser Namespace : GDX.Developer Assembly : GDX.Developer.dll Syntax public static class CommandLineParser : object Remarks This does NOT support the /FLAG or /KEY=VALUE format. All FLAGs and KEYs are stored in Uppercase. Unit testing found in GDX.Developer.Tests.EditMode, under Runtime.CommandLineParserTests. Fields | Improve this Doc View Source Arguments The processed arguments found after parsing the arguments Declaration public static readonly Dictionary<string, string> Arguments Field Value Type Description Dictionary < System.String , System.String > | Improve this Doc View Source Flags The processed flags found in the arguments. Declaration public static readonly List<string> Flags Field Value Type Description List < System.String > Methods | Improve this Doc View Source ParseArguments() Process the environment's commandline arguments into Arguments and Flags . Declaration public static void ParseArguments() Remarks This is automatically done at runtime. | Improve this Doc View Source ProcessArguments(String[], Boolean) Process the environment's commandline arguments into Arguments and Flags . Declaration public static void ProcessArguments(string[] argumentArray, bool shouldClear = true) Parameters Type Name Description System.String [] argumentArray An array of arguments to process. System.Boolean shouldClear Should the storage containers be cleared."
  },
  "api/GDX.Developer.Editor.html": {
    "href": "api/GDX.Developer.Editor.html",
    "title": "Namespace GDX.Developer.Editor | GDX",
    "keywords": "Namespace GDX.Developer.Editor Classes Settings GDX.Developer Assembly Settings"
  },
  "api/GDX.Developer.Editor.Settings.html": {
    "href": "api/GDX.Developer.Editor.Settings.html",
    "title": "Class Settings | GDX",
    "keywords": "Class Settings GDX.Developer Assembly Settings Inheritance System.Object Settings Namespace : GDX.Developer.Editor Assembly : GDX.Developer.Editor.dll Syntax public static class Settings : object Methods | Improve this Doc View Source SettingsProvider() Get SettingsProvider() for GDX.Developer assembly. Declaration public static SettingsProvider SettingsProvider() Returns Type Description SettingsProvider A provider for project settings."
  },
  "api/GDX.Developer.html": {
    "href": "api/GDX.Developer.html",
    "title": "Namespace GDX.Developer | GDX",
    "keywords": "Namespace GDX.Developer Classes CommandLineParser A parser specifically for command line arguments which follow the --FLAG or --KEY=VALUE format."
  },
  "api/GDX.Display.html": {
    "href": "api/GDX.Display.html",
    "title": "Class Display | GDX",
    "keywords": "Class Display A collection of display related helper utilities. Inheritance System.Object Display Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : GDX Assembly : GDX.dll Syntax public static class Display Remarks Requires UnityEngine.CoreModule.dll to function correctly. Methods | Improve this Doc View Source GetScreenHeight() Returns the actual screen height being rendered on the current platform. Declaration public static int GetScreenHeight() Returns Type Description System.Int32 The pixel height of the screen resolution. Remarks This resolves issues with scaled rendering. | Improve this Doc View Source GetScreenWidth() Returns the actual screen width being rendered on the current platform. Declaration public static int GetScreenWidth() Returns Type Description System.Int32 The pixel width of the screen resolution. Remarks This resolves issues with scaled rendering. | Improve this Doc View Source IsHDREnabled() Is HDR output currently enabled (and actively being used)? Declaration public static bool IsHDREnabled() Returns Type Description System.Boolean true/false | Improve this Doc View Source IsHDRSupported() Does the current display device support HDR output? Declaration public static bool IsHDRSupported() Returns Type Description System.Boolean true/false"
  },
  "api/GDX.Editor.ConfigProvider.html": {
    "href": "api/GDX.Editor.ConfigProvider.html",
    "title": "Class ConfigProvider | GDX",
    "keywords": "Class ConfigProvider An author-time helper class to access the GDX specific configuration file in a project. Inheritance System.Object ConfigProvider Namespace : GDX.Editor Assembly : GDX.Editor.dll Syntax public static class ConfigProvider : object Methods | Improve this Doc View Source Get() Get/Create an instance of the GDXConfig . Declaration public static GDXConfig Get() Returns Type Description GDXConfig A fully realized GDXConfig . | Improve this Doc View Source GetSerializedConfig() Get a for raw editing of the GDXConfig . Declaration public static SerializedObject GetSerializedConfig() Returns Type Description SerializedObject A ."
  },
  "api/GDX.Editor.GDXConfigEditor.html": {
    "href": "api/GDX.Editor.GDXConfigEditor.html",
    "title": "Class GDXConfigEditor | GDX",
    "keywords": "Class GDXConfigEditor A custom editor for the GDXConfig scriptable object. Inheritance System.Object GDXConfigEditor Namespace : GDX.Editor Assembly : GDX.Editor.dll Syntax public class GDXConfigEditor : UnityEditor.Editor Remarks This just enforces editing through the project settings window only. Methods | Improve this Doc View Source OnInspectorGUI() Prevent the inspector actually showing for a GDXConfig to prevent unintentional editing. Declaration public override void OnInspectorGUI()"
  },
  "api/GDX.Editor.html": {
    "href": "api/GDX.Editor.html",
    "title": "Namespace GDX.Editor | GDX",
    "keywords": "Namespace GDX.Editor Classes ConfigProvider An author-time helper class to access the GDX specific configuration file in a project. GDXConfigEditor A custom editor for the GDXConfig scriptable object. InspectorLabelPropertyDrawer The drawing component of the InspectorLabelAttribute . PackageProvider A collection of information regarding the GDX package. PackageProvider.PackageDefinition A miniature package definition useful for quickly parsing a remote package definition. Settings GDX Assembly Settings SettingsStyles A helper class for generating the GDX editor experience. UpdateProvider An autonomous provider which detects and notifies if updates are available for the GDX package. VersionControl A collection of version control related helper utilities. Enums PackageProvider.InstallationType A defined collection of ways that the package could be found in a Unity project."
  },
  "api/GDX.Editor.InspectorLabelPropertyDrawer.html": {
    "href": "api/GDX.Editor.InspectorLabelPropertyDrawer.html",
    "title": "Class InspectorLabelPropertyDrawer | GDX",
    "keywords": "Class InspectorLabelPropertyDrawer The drawing component of the InspectorLabelAttribute . Inheritance System.Object InspectorLabelPropertyDrawer Namespace : GDX.Editor Assembly : GDX.Editor.dll Syntax public class InspectorLabelPropertyDrawer : PropertyDrawer Methods | Improve this Doc View Source OnGUI(Rect, SerializedProperty, GUIContent) Unity IMGUI Draw Event Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position Rectangle on the screen to use for the property GUI. SerializedProperty property The SerializedProperty to make the custom GUI for. GUIContent label The label of this property."
  },
  "api/GDX.Editor.PackageProvider.html": {
    "href": "api/GDX.Editor.PackageProvider.html",
    "title": "Class PackageProvider | GDX",
    "keywords": "Class PackageProvider A collection of information regarding the GDX package. Inheritance System.Object PackageProvider Namespace : GDX.Editor Assembly : GDX.Editor.dll Syntax public class PackageProvider : object Constructors | Improve this Doc View Source PackageProvider() Initialize a new PackageProvider . Declaration public PackageProvider() Fields | Improve this Doc View Source Definition The PackageProvider.PackageDefinition for the installed package. Declaration public readonly PackageProvider.PackageDefinition Definition Field Value Type Description PackageProvider.PackageDefinition | Improve this Doc View Source InstallationMethod The PackageProvider.InstallationType detected during construction of the package. Declaration public readonly PackageProvider.InstallationType InstallationMethod Field Value Type Description PackageProvider.InstallationType | Improve this Doc View Source PackageAssetPath Asset database path to the root of the package. Declaration public readonly string PackageAssetPath Field Value Type Description System.String Remarks This is useful for situations where you need to provide an asset database relative path. | Improve this Doc View Source PackageManifestPath Fully qualified path to the package.json file. Declaration public readonly string PackageManifestPath Field Value Type Description System.String"
  },
  "api/GDX.Editor.PackageProvider.InstallationType.html": {
    "href": "api/GDX.Editor.PackageProvider.InstallationType.html",
    "title": "Enum PackageProvider.InstallationType | GDX",
    "keywords": "Enum PackageProvider.InstallationType A defined collection of ways that the package could be found in a Unity project. Namespace : GDX.Editor Assembly : GDX.Editor.dll Syntax public enum InstallationType : int Fields Name Description Assets The package was found in the assets folder. This could be a Asset Store installation or even just a zip decompressed into a project. GitHub The package was cloned into a folder in the project from GitHub. Unknown Unable to determine how the package was installed. UPM The package was installed via Unity's traditional UPM process."
  },
  "api/GDX.Editor.PackageProvider.PackageDefinition.html": {
    "href": "api/GDX.Editor.PackageProvider.PackageDefinition.html",
    "title": "Class PackageProvider.PackageDefinition | GDX",
    "keywords": "Class PackageProvider.PackageDefinition A miniature package definition useful for quickly parsing a remote package definition. Inheritance System.Object PackageProvider.PackageDefinition Namespace : GDX.Editor Assembly : GDX.Editor.dll Syntax public class PackageDefinition : object Fields | Improve this Doc View Source unity Declaration public string unity Field Value Type Description System.String | Improve this Doc View Source version Declaration public string version Field Value Type Description System.String"
  },
  "api/GDX.Editor.Settings.html": {
    "href": "api/GDX.Editor.Settings.html",
    "title": "Class Settings | GDX",
    "keywords": "Class Settings GDX Assembly Settings Inheritance System.Object Settings Namespace : GDX.Editor Assembly : GDX.Editor.dll Syntax public static class Settings : object Properties | Improve this Doc View Source UpdateDayCountSetting The number of days between checks for updates. Declaration public static int UpdateDayCountSetting { get; } Property Value Type Description System.Int32 Remarks We use a property over methods in this case so that Unity's UI can be easily tied to this value. Methods | Improve this Doc View Source SettingsProvider() Get SettingsProvider() for GDX assembly. Declaration public static SettingsProvider SettingsProvider() Returns Type Description SettingsProvider A provider for project settings."
  },
  "api/GDX.Editor.SettingsStyles.html": {
    "href": "api/GDX.Editor.SettingsStyles.html",
    "title": "Class SettingsStyles | GDX",
    "keywords": "Class SettingsStyles A helper class for generating the GDX editor experience. Inheritance System.Object SettingsStyles Namespace : GDX.Editor Assembly : GDX.Editor.dll Syntax public static class SettingsStyles : object Fields | Improve this Doc View Source ButtonStyle A representing a button. Declaration public static readonly GUIStyle ButtonStyle Field Value Type Description GUIStyle | Improve this Doc View Source DefaultBlueColor A shade of the blue. Declaration public static readonly Color DefaultBlueColor Field Value Type Description Color Remarks Meant for default things. | Improve this Doc View Source DisabledYellowColor A shade of the yellow. Declaration public static readonly Color DisabledYellowColor Field Value Type Description Color Remarks Meant for disabled things. | Improve this Doc View Source EnabledGreenColor A shade of the green. Declaration public static readonly Color EnabledGreenColor Field Value Type Description Color Remarks Meant for enabled things. | Improve this Doc View Source InfoBoxStyle A representing an info box. Declaration public static readonly GUIStyle InfoBoxStyle Field Value Type Description GUIStyle | Improve this Doc View Source LineStyle A representing a horizontal line which respects margins/padding. Declaration public static readonly GUIStyle LineStyle Field Value Type Description GUIStyle | Improve this Doc View Source SectionHeaderStyle A representing a default section header. Declaration public static readonly GUIStyle SectionHeaderStyle Field Value Type Description GUIStyle | Improve this Doc View Source SectionHeaderTextDefaultStyle A representing a default section header text. Declaration public static readonly GUIStyle SectionHeaderTextDefaultStyle Field Value Type Description GUIStyle | Improve this Doc View Source SectionHeaderTextDisabledStyle A representing a disabled section header text. Declaration public static readonly GUIStyle SectionHeaderTextDisabledStyle Field Value Type Description GUIStyle | Improve this Doc View Source SectionHeaderToggleLayoutOptions A collection of layout parameters to use when rendering the toggle option on section headers. Declaration public static readonly GUILayoutOption[] SectionHeaderToggleLayoutOptions Field Value Type Description GUILayoutOption [] | Improve this Doc View Source SubSectionHeaderTextStyle A representing the header of a sub section definition. Declaration public static readonly GUIStyle SubSectionHeaderTextStyle Field Value Type Description GUIStyle | Improve this Doc View Source WhiteBlend25Color A blendable shade of the white at 25% opacity. Declaration public static readonly Color WhiteBlend25Color Field Value Type Description Color | Improve this Doc View Source WhiteBlend75Color A blendable shade of the white at 75% opacity. Declaration public static readonly Color WhiteBlend75Color Field Value Type Description Color | Improve this Doc View Source WrapperStyle A used to wrap all GDX editor user interfaces. Declaration public static readonly GUIStyle WrapperStyle Field Value Type Description GUIStyle Methods | Improve this Doc View Source Line(Single, Single, Single) Draw a line during the definition of a user interface experience which respects padding/margins, but also adds its own vertical padding. Declaration public static void Line(float height = 1F, float topPadding = 0F, float bottomPadding = 0F) Parameters Type Name Description System.Single height The pixel height of the line drawn, aka thickness. System.Single topPadding The additional pixel spacing above the drawn line. System.Single bottomPadding The additional pixel spacing below the drawn line. Remarks Has a small temp allocation for the height of the line. | Improve this Doc View Source SectionHeader(String, SerializedProperty, GUIContent) Draw a section header useful for project settings. Declaration public static bool SectionHeader(string text, SerializedProperty sectionToggleProperty = null, GUIContent sectionToggleContent = null) Parameters Type Name Description System.String text The section header content. SerializedProperty sectionToggleProperty A which will dictate if a section is enabled or not. GUIContent sectionToggleContent The associated with a setting. Returns Type Description System.Boolean true/false if the sections content should be enabled."
  },
  "api/GDX.Editor.UpdateProvider.html": {
    "href": "api/GDX.Editor.UpdateProvider.html",
    "title": "Class UpdateProvider | GDX",
    "keywords": "Class UpdateProvider An autonomous provider which detects and notifies if updates are available for the GDX package. Inheritance System.Object UpdateProvider Namespace : GDX.Editor Assembly : GDX.Editor.dll Syntax public static class UpdateProvider : object Fields | Improve this Doc View Source GitHubChangelogUri The public URI of the latest changes, as Markdown. Declaration public const string GitHubChangelogUri = null Field Value Type Description System.String Remarks The main branch is used to contain released versions only, so if it is found there, it is the latest release. | Improve this Doc View Source LocalPackage A collection of information about the locally installed GDX package. Declaration public static readonly PackageProvider LocalPackage Field Value Type Description PackageProvider | Improve this Doc View Source UpdatePackageDefinition If an update check has occured, this will be filled with its PackageProvider.PackageDefinition . Declaration public static PackageProvider.PackageDefinition UpdatePackageDefinition Field Value Type Description PackageProvider.PackageDefinition Methods | Improve this Doc View Source AttemptUpgrade() Attempt to do the upgrade of the package based on the established PackageProvider.InstallationType . Declaration public static void AttemptUpgrade() | Improve this Doc View Source CheckForUpdates() Check for updates! Declaration public static void CheckForUpdates() | Improve this Doc View Source GetLastChecked() Gets the last time that we checked for an update to the package. Declaration public static DateTime GetLastChecked() Returns Type Description DateTime | Improve this Doc View Source GetLastNotifiedVersion() Get the last version of the package which was presented to the user for update. Declaration public static string GetLastNotifiedVersion() Returns Type Description System.String A version string. | Improve this Doc View Source HasUpdate(PackageProvider.PackageDefinition) Is there an update available to the local package, based on the provided PackageProvider.PackageDefinition . Declaration public static bool HasUpdate(PackageProvider.PackageDefinition updatePackageDefinition) Parameters Type Name Description PackageProvider.PackageDefinition updatePackageDefinition The found PackageProvider.PackageDefinition on GitHub. Returns Type Description System.Boolean true/false if an update is found."
  },
  "api/GDX.Editor.VersionControl.html": {
    "href": "api/GDX.Editor.VersionControl.html",
    "title": "Class VersionControl | GDX",
    "keywords": "Class VersionControl A collection of version control related helper utilities. Inheritance System.Object VersionControl Namespace : GDX.Editor Assembly : GDX.Editor.dll Syntax public static class VersionControl : object Methods | Improve this Doc View Source GetAssetListFromFolder(String, String, SearchOption) Get an from an absoluteDirectoryPath . Declaration public static AssetList GetAssetListFromFolder(string absoluteDirectoryPath, string searchPattern = \"*.*\", SearchOption searchOption = null) Parameters Type Name Description System.String absoluteDirectoryPath A fully qualified path on disk to query. System.String searchPattern The search pattern to look for files with. SearchOption searchOption What level of searching should be done. Returns Type Description AssetList An containing any valid assets under version control."
  },
  "api/GDX.GDXConfig.html": {
    "href": "api/GDX.GDXConfig.html",
    "title": "Class GDXConfig | GDX",
    "keywords": "Class GDXConfig Project-wide configuration which is available at runtime. Inheritance System.Object UnityEngine.Object UnityEngine.ScriptableObject GDXConfig Inherited Members UnityEngine.ScriptableObject.SetDirty() UnityEngine.ScriptableObject.CreateInstance(System.String) UnityEngine.ScriptableObject.CreateInstance(System.Type) UnityEngine.ScriptableObject.CreateInstance<T>() UnityEngine.Object.GetInstanceID() UnityEngine.Object.GetHashCode() UnityEngine.Object.Equals(System.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform) UnityEngine.Object.Instantiate(UnityEngine.Object, UnityEngine.Transform, System.Boolean) UnityEngine.Object.Instantiate<T>(T) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform) UnityEngine.Object.Instantiate<T>(T, UnityEngine.Transform, System.Boolean) UnityEngine.Object.Destroy(UnityEngine.Object, System.Single) UnityEngine.Object.Destroy(UnityEngine.Object) UnityEngine.Object.DestroyImmediate(UnityEngine.Object, System.Boolean) UnityEngine.Object.DestroyImmediate(UnityEngine.Object) UnityEngine.Object.FindObjectsOfType(System.Type) UnityEngine.Object.FindObjectsOfType(System.Type, System.Boolean) UnityEngine.Object.DontDestroyOnLoad(UnityEngine.Object) UnityEngine.Object.DestroyObject(UnityEngine.Object, System.Single) UnityEngine.Object.DestroyObject(UnityEngine.Object) UnityEngine.Object.FindSceneObjectsOfType(System.Type) UnityEngine.Object.FindObjectsOfTypeIncludingAssets(System.Type) UnityEngine.Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) UnityEngine.Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) UnityEngine.Object.FindObjectsOfTypeAll(System.Type) UnityEngine.Object.FindObjectOfType(System.Type) UnityEngine.Object.FindObjectOfType(System.Type, System.Boolean) UnityEngine.Object.ToString() UnityEngine.Object.name UnityEngine.Object.hideFlags System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : GDX Assembly : GDX.dll Syntax public class GDXConfig : ScriptableObject Remarks Requires UnityEngine.CoreModule.dll to function correctly. Fields | Improve this Doc View Source developerBuildInfoAssemblyDefinition Ensure that there is an assembly definition wrapping the generated content. Declaration public bool developerBuildInfoAssemblyDefinition Field Value Type Description System.Boolean | Improve this Doc View Source developerBuildInfoBuildChangelistArgument The argument key for the build's changelist to be passed to the BuildInfoGenerator. Declaration public string developerBuildInfoBuildChangelistArgument Field Value Type Description System.String | Improve this Doc View Source developerBuildInfoBuildDescriptionArgument The argument key for the build description to be passed to the BuildInfoGenerator. Declaration public string developerBuildInfoBuildDescriptionArgument Field Value Type Description System.String | Improve this Doc View Source developerBuildInfoBuildNumberArgument The argument key for the build number to be passed to the BuildInfoGenerator. Declaration public string developerBuildInfoBuildNumberArgument Field Value Type Description System.String | Improve this Doc View Source developerBuildInfoBuildStreamArgument The argument key for the build's stream to be passed to the BuildInfoGenerator. Declaration public string developerBuildInfoBuildStreamArgument Field Value Type Description System.String | Improve this Doc View Source developerBuildInfoBuildTaskArgument The argument key for the build's task to be passed to the BuildInfoGenerator. Declaration public string developerBuildInfoBuildTaskArgument Field Value Type Description System.String | Improve this Doc View Source developerBuildInfoEnabled Should the BuildInfo file be written during builds? Declaration public bool developerBuildInfoEnabled Field Value Type Description System.Boolean | Improve this Doc View Source developerBuildInfoNamespace The namespace where the BuildInfo should be placed. Declaration public string developerBuildInfoNamespace Field Value Type Description System.String | Improve this Doc View Source developerBuildInfoPath The path to output the BuildInfo file. Declaration public string developerBuildInfoPath Field Value Type Description System.String | Improve this Doc View Source developerCommandLineParserArgumentPrefix What should be used to denote arguments in the command line? Declaration public string developerCommandLineParserArgumentPrefix Field Value Type Description System.String | Improve this Doc View Source developerCommandLineParserArgumentSplit What should be used to split arguments from their values in the command line? Declaration public string developerCommandLineParserArgumentSplit Field Value Type Description System.String | Improve this Doc View Source ResourcesPath Resource path at runtime. Declaration public const string ResourcesPath = \"GDX/GDXConfig.asset\" Field Value Type Description System.String | Improve this Doc View Source updateProviderCheckForUpdates Should GDX check for updates at editor time? Declaration public bool updateProviderCheckForUpdates Field Value Type Description System.Boolean Methods | Improve this Doc View Source Get() Get a loaded instance of the GDXConfig from resources. Declaration public static GDXConfig Get() Returns Type Description GDXConfig A instance of GDXConfig . Remarks Requires UnityEngine.CoreModule.dll to function correctly."
  },
  "api/GDX.html": {
    "href": "api/GDX.html",
    "title": "Namespace GDX | GDX",
    "keywords": "Namespace GDX Classes ArrayExtensions Array Based Extension Methods ByteExtensions System.Byte Based Extension Methods Display A collection of display related helper utilities. GDXConfig Project-wide configuration which is available at runtime. IListExtensions System.Collections.Generic.IList<T> Based Extension Methods InspectorLabelAttribute Override the label content of the scripting variable. Localization A collection of localization related helper utilities. Memory A collection of memory related helper utilities. Platform A collection of platform related helper utilities. SimpleListExtensions SimpleList<T> Based Extension Methods StringExtensions System.String Based Extension Methods Strings A collection of string related helper utilities. Vector2Extensions UnityEngine.Vector2 Based Extension Methods Vector3Extensions UnityEngine.Vector3 Based Extension Methods Structs SemanticVersion A Semantic Versioning structure. Enums Localization.Language A list of supported languages."
  },
  "api/GDX.IListExtensions.html": {
    "href": "api/GDX.IListExtensions.html",
    "title": "Class IListExtensions | GDX",
    "keywords": "Class IListExtensions System.Collections.Generic.IList<T> Based Extension Methods Inheritance System.Object IListExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : GDX Assembly : GDX.dll Syntax public static class IListExtensions Remarks Unit testing found in GDX.Tests.EditMode, under Runtime.IListExtensionsTests. Methods | Improve this Doc View Source AddUniqueItem<T>(IList<T>, T) Add an item to a System.Collections.Generic.IList<T> , but only if it is not already contained. Declaration public static bool AddUniqueItem<T>(this IList<T> targetList, T targetItem) where T : class Parameters Type Name Description System.Collections.Generic.IList <T> targetList The System.Collections.Generic.IList<T> to add too. T targetItem The target object to add.. Returns Type Description System.Boolean true/false if this operation was able to add the item. Type Parameters Name Description T The type of the System.Collections.Generic.IList<T> . | Improve this Doc View Source AddUniqueValue<T>(IList<T>, T) Add a value to a System.Collections.Generic.IList<T> , but only if it is not already contained. Declaration public static bool AddUniqueValue<T>(this IList<T> targetList, T targetValue) where T : struct Parameters Type Name Description System.Collections.Generic.IList <T> targetList The System.Collections.Generic.IList<T> to add too. T targetValue The target value to add.. Returns Type Description System.Boolean true/false if this operation was able to add the value. Type Parameters Name Description T The type of the System.Collections.Generic.IList<T> . | Improve this Doc View Source ContainsItem<T>(IList<T>, T) Does targetList contain targetItem ? Declaration public static bool ContainsItem<T>(this IList<T> targetList, T targetItem) where T : class Parameters Type Name Description System.Collections.Generic.IList <T> targetList The System.Collections.Generic.IList<T> to look in. T targetItem The target object to look for. Returns Type Description System.Boolean true/false Type Parameters Name Description T The type of the System.Collections.Generic.IList<T> . Remarks Avoids using System.Collections.Generic.EqualityComparer`1 . | Improve this Doc View Source ContainsValue<T>(IList<T>, Object) Does targetList contain targetValue ? Declaration public static bool ContainsValue<T>(this IList<T> targetList, object targetValue) where T : struct Parameters Type Name Description System.Collections.Generic.IList <T> targetList The System.Collections.Generic.IList<T> to look in. System.Object targetValue The value to look for. Returns Type Description System.Boolean true/false Type Parameters Name Description T The type of the System.Collections.Generic.IList<T> . Remarks WARNING: This will box the targetValue . You should probably write your own explicit implementation. | Improve this Doc View Source RemoveFirstItem<T>(IList<T>, T) Removes the first targetItem from the provided targetList . Declaration public static bool RemoveFirstItem<T>(this IList<T> targetList, T targetItem) where T : class Parameters Type Name Description System.Collections.Generic.IList <T> targetList The target System.Collections.Generic.IList<T> . T targetItem The target object to remove from the targetList . Returns Type Description System.Boolean true/false if the item was removed. Type Parameters Name Description T The type of the System.Collections.Generic.IList<T> . Remarks Avoids using System.Collections.Generic.EqualityComparer`1 . | Improve this Doc View Source RemoveFirstValue<T>(IList<T>, Object) Removes the first targetValue from the provided targetList . Declaration public static bool RemoveFirstValue<T>(this IList<T> targetList, object targetValue) where T : struct Parameters Type Name Description System.Collections.Generic.IList <T> targetList The target System.Collections.Generic.IList<T> . System.Object targetValue The value to remove from the targetList . Returns Type Description System.Boolean true/false if a value was removed. Type Parameters Name Description T The type of the System.Collections.Generic.IList<T> . Remarks WARNING: This will box the targetValue . You should probably write your own explicit implementation. | Improve this Doc View Source RemoveItems<T>(IList<T>, T) Removes all targetItem from the provided targetList . Declaration public static bool RemoveItems<T>(this IList<T> targetList, T targetItem) where T : class Parameters Type Name Description System.Collections.Generic.IList <T> targetList The target System.Collections.Generic.IList<T> . T targetItem The target object to remove from the targetList . Returns Type Description System.Boolean true/false if the item was removed. Type Parameters Name Description T The type of the System.Collections.Generic.IList<T> . Remarks Avoids using System.Collections.Generic.EqualityComparer`1 . | Improve this Doc View Source RemoveItemSwap<T>(IList<T>, Int32) Replaces the object found at the provided index with the last object in targetList , then removes the last item from the targetList . Declaration public static void RemoveItemSwap<T>(this IList<T> targetList, int index) Parameters Type Name Description System.Collections.Generic.IList <T> targetList The target System.Collections.Generic.IList<T> . System.Int32 index The index of the item to remove. Type Parameters Name Description T The type of the System.Collections.Generic.IList<T> . Remarks This make sure that you are always removing from the end of a System.Collections.Generic.IList<T> . | Improve this Doc View Source RemoveLastItem<T>(IList<T>, T) Removes the last targetItem from the provided targetList . Declaration public static bool RemoveLastItem<T>(this IList<T> targetList, T targetItem) where T : class Parameters Type Name Description System.Collections.Generic.IList <T> targetList The target System.Collections.Generic.IList<T> . T targetItem The target object to remove from the targetList . Returns Type Description System.Boolean true/false if the item was removed. Type Parameters Name Description T The type of the System.Collections.Generic.IList<T> . Remarks Avoids using System.Collections.Generic.EqualityComparer`1 . | Improve this Doc View Source RemoveLastValue<T>(IList<T>, Object) Removes the last targetValue from the provided targetList . Declaration public static bool RemoveLastValue<T>(this IList<T> targetList, object targetValue) where T : struct Parameters Type Name Description System.Collections.Generic.IList <T> targetList The target System.Collections.Generic.IList<T> . System.Object targetValue The value to remove from the targetList . Returns Type Description System.Boolean true/false if a value was removed. Type Parameters Name Description T The type of the System.Collections.Generic.IList<T> . Remarks WARNING: This will box the targetValue . You should probably write your own explicit implementation. | Improve this Doc View Source RemoveValues<T>(IList<T>, Object) Removes all targetValue from the provided targetList . Declaration public static bool RemoveValues<T>(this IList<T> targetList, object targetValue) where T : struct Parameters Type Name Description System.Collections.Generic.IList <T> targetList The target System.Collections.Generic.IList<T> . System.Object targetValue The value to remove from the targetList . Returns Type Description System.Boolean true/false if values were removed. Type Parameters Name Description T The type of the System.Collections.Generic.IList<T> . Remarks WARNING: This will box the targetValue . You should probably write your own explicit implementation. | Improve this Doc View Source Shuffle<T>(IList<T>) Shuffle the items in the targetList . Declaration public static void Shuffle<T>(this IList<T> targetList) Parameters Type Name Description System.Collections.Generic.IList <T> targetList The target System.Collections.Generic.IList<T> . Type Parameters Name Description T The type of the System.Collections.Generic.IList<T> . Remarks Requires UnityEngine.CoreModule.dll to function correctly."
  },
  "api/GDX.InspectorLabelAttribute.html": {
    "href": "api/GDX.InspectorLabelAttribute.html",
    "title": "Class InspectorLabelAttribute | GDX",
    "keywords": "Class InspectorLabelAttribute Override the label content of the scripting variable. Inheritance System.Object System.Attribute UnityEngine.PropertyAttribute InspectorLabelAttribute Inherited Members UnityEngine.PropertyAttribute.order System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : GDX Assembly : GDX.dll Syntax public class InspectorLabelAttribute : PropertyAttribute Constructors | Improve this Doc View Source InspectorLabelAttribute(String) Create a new instance of InspectorLabelAttribute . Declaration public InspectorLabelAttribute(string label) Parameters Type Name Description System.String label The labels UnityEngine.GUIContent.text . Fields | Improve this Doc View Source Label Label Text Declaration public readonly string Label Field Value Type Description System.String"
  },
  "api/GDX.IO.Compression.html": {
    "href": "api/GDX.IO.Compression.html",
    "title": "Namespace GDX.IO.Compression | GDX",
    "keywords": "Namespace GDX.IO.Compression Classes TarFile"
  },
  "api/GDX.IO.Compression.TarFile.html": {
    "href": "api/GDX.IO.Compression.TarFile.html",
    "title": "Class TarFile | GDX",
    "keywords": "Class TarFile Inheritance System.Object TarFile Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : GDX.IO.Compression Assembly : GDX.dll Syntax public static class TarFile Methods | Improve this Doc View Source ExtractToDirectory(String, String, Boolean) Extracts all the files in the specified tarball to a directory on the file system. Declaration public static void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName, bool forceGZipDataFormat = false) Parameters Type Name Description System.String sourceArchiveFileName The path to the archive that is to be extracted. System.String destinationDirectoryName The path to the directory in which to place the extracted files, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory. System.Boolean forceGZipDataFormat Enforce inflating the file via a System.IO.Compression.GZipStream ."
  },
  "api/GDX.Localization.html": {
    "href": "api/GDX.Localization.html",
    "title": "Class Localization | GDX",
    "keywords": "Class Localization A collection of localization related helper utilities. Inheritance System.Object Localization Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : GDX Assembly : GDX.dll Syntax public static class Localization Fields | Improve this Doc View Source LocalTimestampFormat The local ISO 8601 compliant System.DateTime . System.DateTime.ToString(System.String) . Declaration public const string LocalTimestampFormat = \"yyyy-MM-dd HH\\\\:mm\\\\:ss\" Field Value Type Description System.String | Improve this Doc View Source UtcTimestampFormat The UTC ISO 8601 compliant System.DateTime . System.DateTime.ToString(System.String) . Declaration public const string UtcTimestampFormat = \"yyyy-MM-ddTHH\\\\:mm\\\\:ss.fffffffzzz\" Field Value Type Description System.String Methods | Improve this Doc View Source GetISO639_1(Localization.Language) Get the ISO 639-1 language code for targetLanguage . Declaration public static string GetISO639_1(this Localization.Language targetLanguage) Parameters Type Name Description Localization.Language targetLanguage The target Localization.Language . Returns Type Description System.String The language code. Remarks Two additional non-compliant values may be returned DEV or DEFAULT. | Improve this Doc View Source GetTimestampFormat(Localization.Language) Get the localized System.DateTime . System.DateTime.ToString(System.String) for targetLanguage . Declaration public static string GetTimestampFormat(this Localization.Language targetLanguage) Parameters Type Name Description Localization.Language targetLanguage The target Localization.Language . Returns Type Description System.String The format System.String ."
  },
  "api/GDX.Localization.Language.html": {
    "href": "api/GDX.Localization.Language.html",
    "title": "Enum Localization.Language | GDX",
    "keywords": "Enum Localization.Language A list of supported languages. Namespace : GDX Assembly : GDX.dll Syntax public enum Language : ushort Fields Name Description Default Development English French German Polish Russian Spanish Extension Methods Localization.GetISO639_1() Localization.GetTimestampFormat()"
  },
  "api/GDX.Mathematics.Byte2.html": {
    "href": "api/GDX.Mathematics.Byte2.html",
    "title": "Struct Byte2 | GDX",
    "keywords": "Struct Byte2 A System.Byte vector. Implements System.IEquatable < Byte2 > System.IFormattable Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : GDX.Mathematics Assembly : GDX.dll Syntax [Serializable] public struct Byte2 : IEquatable<Byte2>, IFormattable Constructors | Improve this Doc View Source Byte2(Byte2) Constructs a Byte2 from a Byte2 value. Declaration public Byte2(Byte2 xy) Parameters Type Name Description Byte2 xy The value to copy. | Improve this Doc View Source Byte2(Boolean) Constructs a Byte2 from a single System.Boolean value by converting it to System.Byte and assigning it to every component. Declaration public Byte2(bool v) Parameters Type Name Description System.Boolean v The System.Boolean value to transcribe. | Improve this Doc View Source Byte2(Byte) Constructs a Byte2 from a single System.Byte value by assigning it to every component. Declaration public Byte2(byte v) Parameters Type Name Description System.Byte v The value to copy to x and y . | Improve this Doc View Source Byte2(Byte, Byte) Constructs a Byte2 from two System.Byte values. Declaration public Byte2(byte x, byte y) Parameters Type Name Description System.Byte x X value. System.Byte y Y value. | Improve this Doc View Source Byte2(Double) Constructs a Byte2 from a single System.Double value by converting it to System.Byte and assigning it to every component. Declaration public Byte2(double v) Parameters Type Name Description System.Double v The System.Double value to transcribe. | Improve this Doc View Source Byte2(Int32, Int32) Create a Byte2 from two System.Int32 values. Declaration public Byte2(int x, int y) Parameters Type Name Description System.Int32 x X value. System.Int32 y Y value. | Improve this Doc View Source Byte2(Single) Constructs a Byte2 from a single System.Single value by converting it to System.Byte and assigning it to every component. Declaration public Byte2(float v) Parameters Type Name Description System.Single v The System.Single value to transcribe. Fields | Improve this Doc View Source x X System.Byte . Declaration public byte x Field Value Type Description System.Byte | Improve this Doc View Source y Y System.Byte . Declaration public byte y Field Value Type Description System.Byte Properties | Improve this Doc View Source Item[Int32] Get the System.Byte at the provided index . Declaration public byte this[int index] { get; set; } Parameters Type Name Description System.Int32 index Returns the byte element at a specified index. Property Value Type Description System.Byte Exceptions Type Condition System.ArgumentException Out of range check. Methods | Improve this Doc View Source Equals(Byte2) Does the Byte2 equal another Byte2 . Declaration public bool Equals(Byte2 rhs) Parameters Type Name Description Byte2 rhs Target Byte2 to compare with. Returns Type Description System.Boolean Returns true if the Byte2 is equal to a given Byte2 , false otherwise. | Improve this Doc View Source Equals(Object) Does the Byte2 equal another System.Object (casted). Declaration public override bool Equals(object o) Parameters Type Name Description System.Object o Target System.Object to compare with. Returns Type Description System.Boolean Returns true if the Byte2 is equal to a given Byte2 , false otherwise. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Get a hash code from the Byte2 . Declaration public override int GetHashCode() Returns Type Description System.Int32 A System.Int32 value. Overrides System.ValueType.GetHashCode() Remarks This loosely based on the Fowler–Noll–Vo (FNV) hash function. | Improve this Doc View Source ToString() Returns a System.String representation of the Byte2 . Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() | Improve this Doc View Source ToString(String, IFormatProvider) Convert the Byte2 to a System.String using the provided format . Declaration public string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description System.String format Specified format System.String . System.IFormatProvider formatProvider Culture-specific format information. Returns Type Description System.String Returns a string representation of the Byte2 using a specified format and culture-specific format information. Operators | Improve this Doc View Source Addition(Byte2, Byte2) Add two Byte2 . Declaration public static Byte2 operator +(Byte2 lhs, Byte2 rhs) Parameters Type Name Description Byte2 lhs Left-hand side Byte2 . Byte2 rhs Right-hand side Byte2 . Returns Type Description Byte2 Returns the result of an addition operation on two Byte2 . | Improve this Doc View Source Addition(Byte2, Byte) Add a System.Byte to both components of a Byte2 . Declaration public static Byte2 operator +(Byte2 lhs, byte rhs) Parameters Type Name Description Byte2 lhs Left-hand side Byte2 . System.Byte rhs Right-hand side System.Byte . Returns Type Description Byte2 Returns the result of an addition operation on an Byte2 and an System.Byte value. | Improve this Doc View Source Addition(Byte, Byte2) Add a Byte2 to a System.Byte . Declaration public static Byte2 operator +(byte lhs, Byte2 rhs) Parameters Type Name Description System.Byte lhs Left-hand side System.Byte . Byte2 rhs Right-hand side Byte2 . Returns Type Description Byte2 Returns the result of an addition operation on an System.Byte value and an Byte2 . | Improve this Doc View Source BitwiseAnd(Byte2, Byte2) Bitwise AND two Byte2 values. Declaration public static Byte2 operator &(Byte2 lhs, Byte2 rhs) Parameters Type Name Description Byte2 lhs Left-hand side Byte2 . Byte2 rhs Right-hand side Byte2 . Returns Type Description Byte2 Returns the result of a bitwise AND operation on two Byte2 . | Improve this Doc View Source BitwiseAnd(Byte2, Byte) Bitwise AND a Byte2 and a System.Byte . Declaration public static Byte2 operator &(Byte2 lhs, byte rhs) Parameters Type Name Description Byte2 lhs Left-hand side Byte2 . System.Byte rhs Right-hand side System.Byte . Returns Type Description Byte2 Returns the result of a bitwise AND operation on a Byte2 and a System.Byte value. | Improve this Doc View Source BitwiseAnd(Byte, Byte2) Bitwise AND a System.Byte and a Byte2 . Declaration public static Byte2 operator &(byte lhs, Byte2 rhs) Parameters Type Name Description System.Byte lhs Left-hand side System.Byte . Byte2 rhs Right-hand side Byte2 . Returns Type Description Byte2 Returns the result of a bitwise AND operation on a System.Byte and a Byte2 value. | Improve this Doc View Source BitwiseOr(Byte2, Byte2) Bitwise OR two Byte2 values. Declaration public static Byte2 operator |(Byte2 lhs, Byte2 rhs) Parameters Type Name Description Byte2 lhs Left-hand side Byte2 . Byte2 rhs Right-hand side Byte2 . Returns Type Description Byte2 Returns the result of a bitwise OR operation on two Byte2 . | Improve this Doc View Source BitwiseOr(Byte2, Byte) Bitwise OR a Byte2 and a System.Byte . Declaration public static Byte2 operator |(Byte2 lhs, byte rhs) Parameters Type Name Description Byte2 lhs Left-hand side Byte2 . System.Byte rhs Right-hand side System.Byte . Returns Type Description Byte2 Returns the result of a bitwise OR operation on a Byte2 and a System.Byte value. | Improve this Doc View Source BitwiseOr(Byte, Byte2) Bitwise OR a System.Byte and a Byte2 . Declaration public static Byte2 operator |(byte lhs, Byte2 rhs) Parameters Type Name Description System.Byte lhs Left-hand side System.Byte . Byte2 rhs Right-hand side Byte2 . Returns Type Description Byte2 Returns the result of a bitwise OR operation on a System.Byte and a Byte2 value. | Improve this Doc View Source Decrement(Byte2) Decrement Byte2 values. Declaration public static Byte2 operator --(Byte2 val) Parameters Type Name Description Byte2 val Target Byte2 . Returns Type Description Byte2 Returns the result of a decrement operation on a Byte2 . | Improve this Doc View Source Division(Byte2, Byte2) Divide a Byte2 by another Byte2 . Declaration public static Byte2 operator /(Byte2 lhs, Byte2 rhs) Parameters Type Name Description Byte2 lhs Left-hand side Byte2 . Byte2 rhs Right-hand side Byte2 . Returns Type Description Byte2 Returns the result of a division operation on two Byte2 . | Improve this Doc View Source Division(Byte2, Byte) Divide a Byte2 by a System.Byte . Declaration public static Byte2 operator /(Byte2 lhs, byte rhs) Parameters Type Name Description Byte2 lhs Left-hand side Byte2 . System.Byte rhs Right-hand side System.Byte . Returns Type Description Byte2 Returns the result of a division operation on a Byte2 and System.Byte value. | Improve this Doc View Source Division(Byte, Byte2) Divide a System.Byte by a Byte2 . Declaration public static Byte2 operator /(byte lhs, Byte2 rhs) Parameters Type Name Description System.Byte lhs Left-hand side System.Byte . Byte2 rhs Right-hand side Byte2 . Returns Type Description Byte2 Returns the result of a division operation on a System.Byte value and Byte2 . | Improve this Doc View Source ExclusiveOr(Byte2, Byte2) Bitwise XOR two Byte2 values. Declaration public static Byte2 operator ^(Byte2 lhs, Byte2 rhs) Parameters Type Name Description Byte2 lhs Left-hand side Byte2 . Byte2 rhs Right-hand side Byte2 . Returns Type Description Byte2 Returns the result of a bitwise EXCLUSIVE OR operation on two Byte2 . | Improve this Doc View Source ExclusiveOr(Byte2, Byte) Bitwise XOR a Byte2 and a System.Byte . Declaration public static Byte2 operator ^(Byte2 lhs, byte rhs) Parameters Type Name Description Byte2 lhs Left-hand side Byte2 . System.Byte rhs Right-hand side System.Byte . Returns Type Description Byte2 Returns the result of a bitwise XOR operation on a Byte2 and a System.Byte value. | Improve this Doc View Source ExclusiveOr(Byte, Byte2) Bitwise XOR a System.Byte and a Byte2 . Declaration public static Byte2 operator ^(byte lhs, Byte2 rhs) Parameters Type Name Description System.Byte lhs Left-hand side System.Byte . Byte2 rhs Right-hand side Byte2 . Returns Type Description Byte2 Returns the result of a bitwise XOR operation on a System.Byte and a Byte2 value. | Improve this Doc View Source Explicit(Boolean to Byte2) Explicitly converts a single System.Boolean value to a Byte2 by converting it to System.Byte and assigning it to every component. Declaration public static explicit operator Byte2(bool v) Parameters Type Name Description System.Boolean v The System.Boolean value to transcribe. Returns Type Description Byte2 A new Byte2 . | Improve this Doc View Source Explicit(Double to Byte2) Explicitly converts a single System.Double value to a Byte2 by converting it to System.Byte and assigning it to every component. Declaration public static explicit operator Byte2(double v) Parameters Type Name Description System.Double v The System.Double value to transcribe. Returns Type Description Byte2 A new Byte2 . | Improve this Doc View Source Explicit(Single to Byte2) Explicitly converts a single System.Single value to a Byte2 by converting it to System.Byte and assigning it to every component. Declaration public static explicit operator Byte2(float v) Parameters Type Name Description System.Single v The System.Single value to transcribe. Returns Type Description Byte2 A new Byte2 . | Improve this Doc View Source Implicit(Byte to Byte2) Implicitly converts a single System.Byte value to a Byte2 by assigning it to every component. Declaration public static implicit operator Byte2(byte v) Parameters Type Name Description System.Byte v The System.Byte value to transcribe. Returns Type Description Byte2 A new Byte2 . | Improve this Doc View Source Increment(Byte2) Increment Byte2 values. Declaration public static Byte2 operator ++(Byte2 val) Parameters Type Name Description Byte2 val Target Byte2 . Returns Type Description Byte2 Returns the result of an increment operation on a Byte2 . | Improve this Doc View Source Modulus(Byte2, Byte2) Modulus a Byte2 by another Byte2 . Declaration public static Byte2 operator %(Byte2 lhs, Byte2 rhs) Parameters Type Name Description Byte2 lhs Left-hand side Byte2 . Byte2 rhs Right-hand side Byte2 . Returns Type Description Byte2 Returns the result of a modulus operation on two Byte2 . | Improve this Doc View Source Modulus(Byte2, Byte) Modulus a Byte2 by a System.Byte . Declaration public static Byte2 operator %(Byte2 lhs, byte rhs) Parameters Type Name Description Byte2 lhs Left-hand side Byte2 . System.Byte rhs Right-hand side System.Byte . Returns Type Description Byte2 Returns the result of a modulus operation on a Byte2 and System.Byte value. | Improve this Doc View Source Modulus(Byte, Byte2) Modulus a System.Byte by a Byte2 . Declaration public static Byte2 operator %(byte lhs, Byte2 rhs) Parameters Type Name Description System.Byte lhs Left-hand side System.Byte . Byte2 rhs Right-hand side Byte2 . Returns Type Description Byte2 Returns the result of a modulus operation on a System.Byte value and Byte2 . | Improve this Doc View Source Multiply(Byte2, Byte2) Multiply two Byte2 . Declaration public static Byte2 operator *(Byte2 lhs, Byte2 rhs) Parameters Type Name Description Byte2 lhs Left-hand side Byte2 . Byte2 rhs Right-hand side Byte2 . Returns Type Description Byte2 Returns the result of a multiplication operation on two Byte2 . | Improve this Doc View Source Multiply(Byte2, Byte) Multiply a Byte2 by a System.Byte . Declaration public static Byte2 operator *(Byte2 lhs, byte rhs) Parameters Type Name Description Byte2 lhs Left-hand side Byte2 . System.Byte rhs Right-hand side System.Byte . Returns Type Description Byte2 Returns the result of a multiplication operation on a Byte2 and a System.Byte value. | Improve this Doc View Source Multiply(Byte, Byte2) Multiply a System.Byte by a Byte2 . Declaration public static Byte2 operator *(byte lhs, Byte2 rhs) Parameters Type Name Description System.Byte lhs Left-hand side System.Byte . Byte2 rhs Right-hand side Byte2 . Returns Type Description Byte2 Returns the result of a multiplication operation on a System.Byte and a Byte2 value. | Improve this Doc View Source OnesComplement(Byte2) Bitwise NOT Byte2 values. Declaration public static Byte2 operator ~(Byte2 val) Parameters Type Name Description Byte2 val Target Byte2 . Returns Type Description Byte2 Returns the result of a bitwise NOT operation on a Byte2 . | Improve this Doc View Source Subtraction(Byte2, Byte2) Subtract a Byte2 from another Byte2 . Declaration public static Byte2 operator -(Byte2 lhs, Byte2 rhs) Parameters Type Name Description Byte2 lhs Left-hand side Byte2 . Byte2 rhs Right-hand side Byte2 . Returns Type Description Byte2 Returns the result of a subtraction operation on two Byte2 . | Improve this Doc View Source Subtraction(Byte2, Byte) Subtract a System.Byte from both components of a Byte2 . Declaration public static Byte2 operator -(Byte2 lhs, byte rhs) Parameters Type Name Description Byte2 lhs Left-hand side Byte2 . System.Byte rhs Right-hand side System.Byte . Returns Type Description Byte2 Returns the result of a subtraction operation on a Byte2 and a System.Byte value. | Improve this Doc View Source Subtraction(Byte, Byte2) Subtract both components of a Byte2 from a System.Byte . Declaration public static Byte2 operator -(byte lhs, Byte2 rhs) Parameters Type Name Description System.Byte lhs Left-hand side System.Byte . Byte2 rhs Right-hand side Byte2 . Returns Type Description Byte2 Returns the result of a subtraction operation on an System.Byte value and an Byte2 . | Improve this Doc View Source UnaryNegation(Byte2) Unary minus Byte2 values. Declaration public static Byte2 operator -(Byte2 val) Parameters Type Name Description Byte2 val Target Byte2 . Returns Type Description Byte2 Returns the result of an unary minus operation on a Byte2 . | Improve this Doc View Source UnaryPlus(Byte2) Unary plus Byte2 values. Declaration public static Byte2 operator +(Byte2 val) Parameters Type Name Description Byte2 val Target Byte2 . Returns Type Description Byte2 Returns the result of an unary plus operation on a Byte2 . Implements System.IEquatable<T> System.IFormattable"
  },
  "api/GDX.Mathematics.html": {
    "href": "api/GDX.Mathematics.html",
    "title": "Namespace GDX.Mathematics | GDX",
    "keywords": "Namespace GDX.Mathematics Structs Byte2 A System.Byte vector."
  },
  "api/GDX.Mathematics.Random.html": {
    "href": "api/GDX.Mathematics.Random.html",
    "title": "Namespace GDX.Mathematics.Random | GDX",
    "keywords": "Namespace GDX.Mathematics.Random Classes MersenneTwister Generates pseudo-random value using the Mersenne Twister algorithm."
  },
  "api/GDX.Mathematics.Random.MersenneTwister.html": {
    "href": "api/GDX.Mathematics.Random.MersenneTwister.html",
    "title": "Class MersenneTwister | GDX",
    "keywords": "Class MersenneTwister Generates pseudo-random value using the Mersenne Twister algorithm. Inheritance System.Object System.Random MersenneTwister Inherited Members System.Random.Sample() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : GDX.Mathematics.Random Assembly : GDX.dll Syntax public class MersenneTwister : Random Remarks Adapted from the work of Akihilo Kramot (Takel), originally based on a C-program for MT19937 by Takuji Nishimura, considering the suggestions by Topher Cooper and Marc Rieffel in July-Aug. 1997. See the Mersenne Twister Homepage for details on the algorithm. Constructors | Improve this Doc View Source MersenneTwister() Creates a new pseudo-random number generator with a default seed. Declaration public MersenneTwister() Remarks new System.Random (). System.Random.Next() is used for the seed. | Improve this Doc View Source MersenneTwister(Int32) Creates a new pseudo-random number generator with the given seed . Declaration public MersenneTwister(int seed) Parameters Type Name Description System.Int32 seed A System.Int32 value to use as a seed. | Improve this Doc View Source MersenneTwister(Int32[]) Creates a pseudo-random number generator initialized with the given array. Declaration public MersenneTwister(int[] initKey) Parameters Type Name Description System.Int32 [] initKey The array for System.Int32 initializing keys. Methods | Improve this Doc View Source Next() Returns the next pseudo-random System.Int32 . Declaration public override int Next() Returns Type Description System.Int32 A pseudo-random System.Int32 value. Overrides System.Random.Next() | Improve this Doc View Source Next(Int32) Returns the next pseudo-random System.Int32 up to maxValue . Declaration public override int Next(int maxValue) Parameters Type Name Description System.Int32 maxValue The maximum value of the pseudo-random number to create. Returns Type Description System.Int32 A pseudo-random System.Int32 value which is at most maxValue . Overrides System.Random.Next(System.Int32) Exceptions Type Condition System.ArgumentOutOfRangeException When maxValue < 0. | Improve this Doc View Source Next(Int32, Int32) Returns the next pseudo-random System.Int32 at least minValue and up to maxValue . Declaration public override int Next(int minValue, int maxValue) Parameters Type Name Description System.Int32 minValue The minimum value of the pseudo-random number to create. System.Int32 maxValue The maximum value of the pseudo-random number to create. Returns Type Description System.Int32 A pseudo-random System.Int32 value which is at least minValue and at most maxValue . Overrides System.Random.Next(System.Int32, System.Int32) Exceptions Type Condition System.ArgumentOutOfRangeException If minValue >= maxValue . | Improve this Doc View Source NextBoolean() Returns a pseudo-random System.Boolean . Declaration public bool NextBoolean() Returns Type Description System.Boolean A System.Boolean value of either true or false. | Improve this Doc View Source NextBytes(Byte[]) Fills a buffer with pseudo-random System.Byte . Declaration public override void NextBytes(byte[] buffer) Parameters Type Name Description System.Byte [] buffer The buffer to fill. Overrides System.Random.NextBytes(System.Byte[]) Exceptions Type Condition System.ArgumentNullException If buffer == null . | Improve this Doc View Source NextDouble() Returns the next pseudo-random System.Double value. Declaration public override double NextDouble() Returns Type Description System.Double A pseudo-random System.Double floating point value. Overrides System.Random.NextDouble() Remarks There are two common ways to create a double floating point using MT19937: using GDX.Mathematics.Random.MersenneTwister.GenerateUnsignedInteger and dividing by 0xFFFFFFFF + 1, or else generating two double words and shifting the first by 26 bits and adding the second. In a newer measurement of the randomness of MT19937 published in the journal \"Monte Carlo Methods and Applications, Vol. 12, No. 5-6, pp. 385 – 393 (2006)\" entitled \"A Repetition Test for Pseudo-Random Number Generators\", it was found that the 32-bit version of generating a double fails at the 95% confidence level when measuring for expected repetitions of a particular number in a sequence of numbers generated by the algorithm. Due to this, the 53-bit method is implemented here and the 32-bit method of generating a double is not. If, for some reason, the 32-bit method is needed, it can be generated by the following: (System.Double)NextUInt32() / ((UInt64)UInt32.MaxValue + 1); | Improve this Doc View Source NextDouble(Boolean) Returns a pseudo-random System.Double number greater than or equal to zero, and either strictly less than one, or less than or equal to one, depending on the value of the given parameter. Declaration public double NextDouble(bool includeOne) Parameters Type Name Description System.Boolean includeOne If true , the pseudo-random System.Double number returned will be less than or equal to one; otherwise, the pseudo-random number returned will be strictly less than one. Returns Type Description System.Double If includeOne is true , this method returns a System.Double -precision pseudo-random number greater than or equal to zero, and less than or equal to one. If includeOne is false , this method returns a System.Double -precision pseudo-random number greater than or equal to zero and strictly less than one. | Improve this Doc View Source NextDoublePositive() Returns a pseudo-random System.Double number greater than 0.0 and less than 1.0. Declaration public double NextDoublePositive() Returns Type Description System.Double A pseudo-random System.Double number greater than 0.0 and less than 1.0. | Improve this Doc View Source NextSingle() Returns a pseudo-random System.Single number between 0.0 and 1.0. Declaration public float NextSingle() Returns Type Description System.Single A System.Single -precision floating point number greater than or equal to 0.0, and less than 1.0. | Improve this Doc View Source NextSingle(Boolean) Returns a pseudo-random System.Single number greater than or equal to zero, and either strictly less than one, or less than or equal to one, depending on the value of the given boolean parameter. Declaration public float NextSingle(bool includeOne) Parameters Type Name Description System.Boolean includeOne If true , the pseudo-random number returned will be less than or equal to one; otherwise, the pseudo-random number returned will be strictly less than one. Returns Type Description System.Single If includeOne is true , this method returns a System.Single -precision pseudo-random number greater than or equal to zero, and less than or equal to one. If includeOne is false , this method returns a single-precision pseudo-random number greater than or equal to zero and strictly less than one. | Improve this Doc View Source NextSinglePositive() Returns a pseudo-random positive System.Single number greater than 0.0 and less than 1.0. Declaration public float NextSinglePositive() Returns Type Description System.Single A pseudo-random number greater than 0.0 and less than 1.0. | Improve this Doc View Source NextUInt() Returns the next pseudo-random System.UInt32 . Declaration public virtual uint NextUInt() Returns Type Description System.UInt32 A pseudo-random System.UInt32 value. | Improve this Doc View Source NextUInt(UInt32) Returns the next pseudo-random System.UInt32 up to maxValue . Declaration public virtual uint NextUInt(uint maxValue) Parameters Type Name Description System.UInt32 maxValue The maximum value of the pseudo-random number to create. Returns Type Description System.UInt32 A pseudo-random System.UInt32 value which is at most maxValue . | Improve this Doc View Source NextUInt(UInt32, UInt32) Returns the next pseudo-random System.UInt32 at least minValue and up to maxValue . Declaration public virtual uint NextUInt(uint minValue, uint maxValue) Parameters Type Name Description System.UInt32 minValue The minimum value of the pseudo-random number to create. System.UInt32 maxValue The maximum value of the pseudo-random number to create. Returns Type Description System.UInt32 A pseudo-random System.UInt32 value which is at least minValue and at most maxValue . Exceptions Type Condition System.ArgumentOutOfRangeException If minValue >= maxValue ."
  },
  "api/GDX.Memory.html": {
    "href": "api/GDX.Memory.html",
    "title": "Class Memory | GDX",
    "keywords": "Class Memory A collection of memory related helper utilities. Inheritance System.Object Memory Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : GDX Assembly : GDX.dll Syntax public static class Memory Remarks Requires UnityEngine.CoreModule.dll to function correctly. Methods | Improve this Doc View Source CleanUp() Cleanup Memory Mono Heap (Garbage Collection) Unity Resources Declaration public static void CleanUp() Remarks Requires UnityEngine.CoreModule.dll to function correctly. | Improve this Doc View Source CleanUpAsync() Cleanup Memory Mono Heap (Garbage Collection) Unity Resources Declaration public static void CleanUpAsync() Remarks Requires UnityEngine.CoreModule.dll to function correctly."
  },
  "api/GDX.Platform.html": {
    "href": "api/GDX.Platform.html",
    "title": "Class Platform | GDX",
    "keywords": "Class Platform A collection of platform related helper utilities. Inheritance System.Object Platform Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : GDX Assembly : GDX.dll Syntax public static class Platform Methods | Improve this Doc View Source EnsureFileFolderHierarchyExists(String) Validate that all parent directories are created for a given filePath . Declaration public static void EnsureFileFolderHierarchyExists(string filePath) Parameters Type Name Description System.String filePath The path to process and validate. | Improve this Doc View Source EnsureFolderHierarchyExists(String) Validate that all directories are created for a given folderPath . Declaration public static void EnsureFolderHierarchyExists(string folderPath) Parameters Type Name Description System.String folderPath The path to process and validate. | Improve this Doc View Source GetHardwareGeneration() Gets the current platforms hardware generation number? Declaration public static int GetHardwareGeneration() Returns Type Description System.Int32 true/false Remarks Requires UnityEngine.CoreModule.dll to function correctly."
  },
  "api/GDX.SemanticVersion.html": {
    "href": "api/GDX.SemanticVersion.html",
    "title": "Struct SemanticVersion | GDX",
    "keywords": "Struct SemanticVersion A Semantic Versioning structure. Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : GDX Assembly : GDX.dll Syntax public struct SemanticVersion Remarks https://semver.org/ Constructors | Improve this Doc View Source SemanticVersion(String) Create a SemanticVersion based on a formatted System.String . Declaration public SemanticVersion(string version) Parameters Type Name Description System.String version A formatted version semantic version string (2020.1.0). Fields | Improve this Doc View Source Major Major Version. Declaration public readonly int Major Field Value Type Description System.Int32 Remarks Is incremented when you make incompatible API changes. | Improve this Doc View Source Minor Minor Version. Declaration public readonly int Minor Field Value Type Description System.Int32 Remarks Is incremented when you add functionality in a backwards-compatible manner. | Improve this Doc View Source Patch Patch Version Declaration public readonly int Patch Field Value Type Description System.Int32 Remarks Is incremented when you make backwards-compatible fixes. Methods | Improve this Doc View Source Equals(Object) Does the obj equal this SemanticVersion . Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj An System.Object to compare against. Returns Type Description System.Boolean Returns the result of an EQUALITY operation. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Get the hash code of the SemanticVersion . Declaration public override int GetHashCode() Returns Type Description System.Int32 A System.Int32 value. Overrides System.ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(SemanticVersion, SemanticVersion) Determine if SemanticVersion is equal to another SemanticVersion . Declaration public static bool operator ==(SemanticVersion lhs, SemanticVersion rhs) Parameters Type Name Description SemanticVersion lhs Left-hand side SemanticVersion . SemanticVersion rhs Right-hand side SemanticVersion . Returns Type Description System.Boolean Returns the result of a EQUALITY operation on two SemanticVersion values. | Improve this Doc View Source GreaterThan(SemanticVersion, SemanticVersion) Determine if SemanticVersion is greater than another SemanticVersion . Declaration public static bool operator>(SemanticVersion lhs, SemanticVersion rhs) Parameters Type Name Description SemanticVersion lhs Left-hand side SemanticVersion . SemanticVersion rhs Right-hand side SemanticVersion . Returns Type Description System.Boolean Returns the result of a GREATER THAN operation on two SemanticVersion values. | Improve this Doc View Source GreaterThanOrEqual(SemanticVersion, SemanticVersion) Determine if SemanticVersion is greater than or equal to another SemanticVersion . Declaration public static bool operator >=(SemanticVersion lhs, SemanticVersion rhs) Parameters Type Name Description SemanticVersion lhs Left-hand side SemanticVersion . SemanticVersion rhs Right-hand side SemanticVersion . Returns Type Description System.Boolean Returns the result of a GREATER THAN OR EQUAL operation on two SemanticVersion values. | Improve this Doc View Source Inequality(SemanticVersion, SemanticVersion) Determine if SemanticVersion does not equal than another SemanticVersion . Declaration public static bool operator !=(SemanticVersion lhs, SemanticVersion rhs) Parameters Type Name Description SemanticVersion lhs Left-hand side SemanticVersion . SemanticVersion rhs Right-hand side SemanticVersion . Returns Type Description System.Boolean Returns the result of a NOT EQUAL operation on two SemanticVersion values. | Improve this Doc View Source LessThan(SemanticVersion, SemanticVersion) Determine if SemanticVersion is less than another SemanticVersion . Declaration public static bool operator <(SemanticVersion lhs, SemanticVersion rhs) Parameters Type Name Description SemanticVersion lhs Left-hand side SemanticVersion . SemanticVersion rhs Right-hand side SemanticVersion . Returns Type Description System.Boolean Returns the result of a LESS THAN operation on two SemanticVersion values. | Improve this Doc View Source LessThanOrEqual(SemanticVersion, SemanticVersion) Determine if SemanticVersion is less than or equal to another SemanticVersion . Declaration public static bool operator <=(SemanticVersion lhs, SemanticVersion rhs) Parameters Type Name Description SemanticVersion lhs Left-hand side SemanticVersion . SemanticVersion rhs Right-hand side SemanticVersion . Returns Type Description System.Boolean Returns the result of a LESS THAN OR EQUAL operation on two SemanticVersion values."
  },
  "api/GDX.SimpleListExtensions.html": {
    "href": "api/GDX.SimpleListExtensions.html",
    "title": "Class SimpleListExtensions | GDX",
    "keywords": "Class SimpleListExtensions SimpleList<T> Based Extension Methods Inheritance System.Object SimpleListExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : GDX Assembly : GDX.dll Syntax public static class SimpleListExtensions Remarks Unit testing found in GDX.Tests.EditMode, under Runtime.SimpleListExtensionsTests. Methods | Improve this Doc View Source AddUncheckedUniqueItem<T>(ref SimpleList<T>, T) Add an item to the SimpleList<T> without checking the internal size, making sure that the item is not already contained in the SimpleList<T> . Declaration public static bool AddUncheckedUniqueItem<T>(this ref SimpleList<T> targetSimpleList, T targetItem) where T : class Parameters Type Name Description SimpleList <T> targetSimpleList The target SimpleList<T> to add to. T targetItem The target class object to add. Returns Type Description System.Boolean true/false if the operation was able to add the item successfully. Type Parameters Name Description T The type of the SimpleList<T> . | Improve this Doc View Source AddUncheckedUniqueValue<T>(ref SimpleList<T>, T) Add a value to the SimpleList<T> without checking the internal size, making sure that the value is not already contained in the SimpleList<T> . Declaration public static bool AddUncheckedUniqueValue<T>(this ref SimpleList<T> targetSimpleList, T targetValue) where T : struct Parameters Type Name Description SimpleList <T> targetSimpleList The target SimpleList<T> to add to. T targetValue The value to add. Returns Type Description System.Boolean true/false if the operation was able to add the value successfully. Type Parameters Name Description T The type of the SimpleList<T> . | Improve this Doc View Source AddWithExpandCheckUniqueItem<T>(ref SimpleList<T>, T) Add an item to the SimpleList<T> with checking the internal size (expanding as necessary), making sure that the item is not already contained in the SimpleList<T> . Declaration public static bool AddWithExpandCheckUniqueItem<T>(this ref SimpleList<T> targetSimpleList, T targetItem) where T : class Parameters Type Name Description SimpleList <T> targetSimpleList The target SimpleList<T> to add to. T targetItem The target class object to add. Returns Type Description System.Boolean true/false if the operation was able to add the item successfully. Type Parameters Name Description T The type of the SimpleList<T> . | Improve this Doc View Source AddWithExpandCheckUniqueValue<T>(ref SimpleList<T>, T) Add a value to the SimpleList<T> with checking the internal size (expanding as necessary), making sure that the value is not already contained in the SimpleList<T> . Declaration public static bool AddWithExpandCheckUniqueValue<T>(this ref SimpleList<T> targetSimpleList, T targetValue) where T : struct Parameters Type Name Description SimpleList <T> targetSimpleList The target SimpleList<T> to add to. T targetValue The value to add. Returns Type Description System.Boolean true/false if the operation was able to add the value successfully. Type Parameters Name Description T The type of the SimpleList<T> . | Improve this Doc View Source ContainsItem<T>(ref SimpleList<T>, T) Does targetSimpleList contain targetItem ? Declaration public static bool ContainsItem<T>(this ref SimpleList<T> targetSimpleList, T targetItem) where T : class Parameters Type Name Description SimpleList <T> targetSimpleList The SimpleList<T> to look in. T targetItem The target class object to look for. Returns Type Description System.Boolean true/false Type Parameters Name Description T The type of the SimpleList<T> . Remarks Avoids using System.Collections.Generic.EqualityComparer`1 . | Improve this Doc View Source ContainsValue<T>(ref SimpleList<T>, Object) Does targetSimpleList contain targetValue ? Declaration public static bool ContainsValue<T>(this ref SimpleList<T> targetSimpleList, object targetValue) where T : struct Parameters Type Name Description SimpleList <T> targetSimpleList The SimpleList<T> to look in. System.Object targetValue The value to look for. Returns Type Description System.Boolean true/false Type Parameters Name Description T The type of the SimpleList<T> . Remarks WARNING: This will box the targetValue . You should probably write your own explicit implementation. | Improve this Doc View Source RemoveFirstItem<T>(ref SimpleList<T>, T) Removes the first targetItem from the provided targetSimpleList . Declaration public static bool RemoveFirstItem<T>(this ref SimpleList<T> targetSimpleList, T targetItem) where T : class Parameters Type Name Description SimpleList <T> targetSimpleList The target SimpleList<T> . T targetItem The target object to remove from the targetSimpleList . Returns Type Description System.Boolean true/false if an item was removed. Type Parameters Name Description T The type of the SimpleList<T> . Remarks Avoids using System.Collections.Generic.EqualityComparer`1 . | Improve this Doc View Source RemoveFirstValue<T>(ref SimpleList<T>, Object) Removes the first targetValue from the provided targetSimpleList . Declaration public static bool RemoveFirstValue<T>(this ref SimpleList<T> targetSimpleList, object targetValue) where T : struct Parameters Type Name Description SimpleList <T> targetSimpleList The target SimpleList<T> . System.Object targetValue The value to remove from the targetSimpleList . Returns Type Description System.Boolean true/false if a value was removed. Type Parameters Name Description T The type of the SimpleList<T> . Remarks WARNING: This will box the targetValue . You should probably write your own explicit implementation. | Improve this Doc View Source RemoveItems<T>(ref SimpleList<T>, T) Removes all targetItem from the provided targetSimpleList . Declaration public static bool RemoveItems<T>(this ref SimpleList<T> targetSimpleList, T targetItem) where T : class Parameters Type Name Description SimpleList <T> targetSimpleList The target SimpleList<T> . T targetItem The item to remove from the targetSimpleList . Returns Type Description System.Boolean true/false if items were removed. Type Parameters Name Description T The type of the SimpleList<T> . | Improve this Doc View Source RemoveLastItem<T>(ref SimpleList<T>, T) Removes the last targetItem from the provided targetSimpleList . Declaration public static bool RemoveLastItem<T>(this ref SimpleList<T> targetSimpleList, T targetItem) where T : class Parameters Type Name Description SimpleList <T> targetSimpleList The target SimpleList<T> . T targetItem The target object to remove from the targetSimpleList . Returns Type Description System.Boolean true/false if an item was removed. Type Parameters Name Description T The type of the SimpleList<T> . Remarks Avoids using System.Collections.Generic.EqualityComparer`1 . | Improve this Doc View Source RemoveLastValue<T>(ref SimpleList<T>, Object) Removes the last targetValue from the provided targetSimpleList . Declaration public static bool RemoveLastValue<T>(this ref SimpleList<T> targetSimpleList, object targetValue) where T : struct Parameters Type Name Description SimpleList <T> targetSimpleList The target SimpleList<T> . System.Object targetValue The value to remove from the targetSimpleList . Returns Type Description System.Boolean true/false if a value was removed. Type Parameters Name Description T The type of the SimpleList<T> . Remarks WARNING: This will box the targetValue . You should probably write your own explicit implementation. | Improve this Doc View Source RemoveValues<T>(ref SimpleList<T>, Object) Removes all targetValue from the provided targetSimpleList . Declaration public static bool RemoveValues<T>(this ref SimpleList<T> targetSimpleList, object targetValue) where T : struct Parameters Type Name Description SimpleList <T> targetSimpleList The target SimpleList<T> . System.Object targetValue The value to remove from the targetSimpleList . Returns Type Description System.Boolean true/false if values were removed. Type Parameters Name Description T The type of the SimpleList<T> . Remarks WARNING: This will box the targetValue . You should probably write your own explicit implementation."
  },
  "api/GDX.StringExtensions.html": {
    "href": "api/GDX.StringExtensions.html",
    "title": "Class StringExtensions | GDX",
    "keywords": "Class StringExtensions System.String Based Extension Methods Inheritance System.Object StringExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : GDX Assembly : GDX.dll Syntax public static class StringExtensions Remarks Unit testing found in GDX.Tests.EditMode, under Runtime.StringExtensionsTests. Fields | Improve this Doc View Source EncryptionDefaultKey The default encryption key used when none is provided to the encryption related extensions. Declaration public static byte[] EncryptionDefaultKey Field Value Type Description System.Byte [] Remarks You can change this at runtime during some sort of initialization pass to being something unique to your project, but it is not absolutely necessary. This must be a multiple of 8 bytes. | Improve this Doc View Source EncryptionInitializationVector The IV (Initialization Vector) provided to the System.Security.Cryptography.DESCryptoServiceProvider . Declaration public static byte[] EncryptionInitializationVector Field Value Type Description System.Byte [] Remarks You can change this at runtime during some sort of initialization pass to being something unique to your project, but it is not absolutely necessary. This must be a multiple of 8 bytes. Methods | Improve this Doc View Source Decrypt(String, Byte[]) Decrypt an encrypted System.String created by Encrypt(String, Byte[]) . Declaration public static string Decrypt(this string encryptedString, byte[] encryptionKey = null) Parameters Type Name Description System.String encryptedString The encrypted System.String . System.Byte [] encryptionKey The key used to encrypt the System.String . Returns Type Description System.String The decrypted System.String . Remarks This will have quite a few allocations. | Improve this Doc View Source Encrypt(String, Byte[]) Encrypt a System.String utilizing a System.Security.Cryptography.DESCryptoServiceProvider . Declaration public static string Encrypt(this string decryptedString, byte[] encryptionKey = null) Parameters Type Name Description System.String decryptedString The original System.String . System.Byte [] encryptionKey The key to be used when encrypting the System.String . This must be a multiple of 8 bytes. Returns Type Description System.String The encrypted System.String . Remarks This will have quite a few allocations. | Improve this Doc View Source GetAfterFirst(String, String, StringComparison) Get the System.String after the first identified splitString in targetString . Declaration public static string GetAfterFirst(this string targetString, string splitString, StringComparison comparison = StringComparison.Ordinal) Parameters Type Name Description System.String targetString The target System.String to look in. System.String splitString The divider which the targetString should be split on. System.StringComparison comparison Specifies the culture, case, and sort rules to be used. Returns Type Description System.String The content following the splitString , or targetString if none is found. | Improve this Doc View Source GetAfterLast(String, String, StringComparison) Get the System.String after the last identified splitString in targetString . Declaration public static string GetAfterLast(this string targetString, string splitString, StringComparison comparison = StringComparison.Ordinal) Parameters Type Name Description System.String targetString The target System.String to look in. System.String splitString The divider which the targetString should be split on. System.StringComparison comparison Specifies the culture, case, and sort rules to be used. Returns Type Description System.String The content following the splitString , or targetString if none is found. | Improve this Doc View Source GetBeforeFirst(String, String, StringComparison) Get the System.String before the first identified splitString in targetString . Declaration public static string GetBeforeFirst(this string targetString, string splitString, StringComparison comparison = StringComparison.Ordinal) Parameters Type Name Description System.String targetString The target System.String to look in. System.String splitString The divider which the targetString should be split on. System.StringComparison comparison Specifies the culture, case, and sort rules to be used. Returns Type Description System.String The content before the splitString , or targetString if none is found. | Improve this Doc View Source GetBeforeLast(String, String, StringComparison) Get the System.String before the last identified splitString in targetString . Declaration public static string GetBeforeLast(this string targetString, string splitString, StringComparison comparison = StringComparison.Ordinal) Parameters Type Name Description System.String targetString The target System.String to look in. System.String splitString The divider which the targetString should be split on. System.StringComparison comparison Specifies the culture, case, and sort rules to be used. Returns Type Description System.String The content before the splitString , or targetString if none is found. | Improve this Doc View Source GetLowerCaseHashCode(String) Get the hash code value of targetString (converted to an uppercase System.String ). Declaration public static int GetLowerCaseHashCode(this string targetString) Parameters Type Name Description System.String targetString The target System.String . Returns Type Description System.Int32 A System.Int32 value. Remarks This loosely based on the Fowler–Noll–Vo (FNV) hash function. It's value will be identical to the value produced natively by processing a System.String with System.String.ToLower . System.String.GetHashCode , but with no allocations. | Improve this Doc View Source GetUpperCaseHashCode(String) Get the hash code value of targetString (converted to an uppercase System.String ). Declaration public static int GetUpperCaseHashCode(this string targetString) Parameters Type Name Description System.String targetString The target System.String . Returns Type Description System.Int32 A System.Int32 value. Remarks This loosely based on the Fowler–Noll–Vo (FNV) hash function. It's value will be identical to the value produced natively by processing a System.String with System.String.ToUpper . System.String.GetHashCode , but with no allocations. | Improve this Doc View Source HasLowerCase(String) Determine if there are any lowercase letters in the provided targetString . Declaration public static bool HasLowerCase(this string targetString) Parameters Type Name Description System.String targetString The target System.String . Returns Type Description System.Boolean true/false if lowercase letters were found. | Improve this Doc View Source HasUpperCase(String) Determine if there are any uppercase letters in the provided targetString . Declaration public static bool HasUpperCase(this string targetString) Parameters Type Name Description System.String targetString The target System.String . Returns Type Description System.Boolean true/false if uppercase letters were found. | Improve this Doc View Source SplitCamelCase(String, String) Create a new string, splitting an existing string up based on camel case formatting. Declaration public static string SplitCamelCase(this string targetString, string divider = \" \") Parameters Type Name Description System.String targetString The target System.String . System.String divider The System.String to put in between the split System.String . Returns Type Description System.String A new System.String ."
  },
  "api/GDX.Strings.html": {
    "href": "api/GDX.Strings.html",
    "title": "Class Strings | GDX",
    "keywords": "Class Strings A collection of string related helper utilities. Inheritance System.Object Strings Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : GDX Assembly : GDX.dll Syntax public static class Strings Fields | Improve this Doc View Source AssetPathPrefix Useful prefix when dealing with asset paths. Declaration public const string AssetPathPrefix = \"Assets/\" Field Value Type Description System.String | Improve this Doc View Source NewLineIndicators An array of System.Char used to indicate newlines. Declaration public static readonly char[] NewLineIndicators Field Value Type Description System.Char [] | Improve this Doc View Source Null A null value string useful for default method parameters. Declaration public const string Null = null Field Value Type Description System.String | Improve this Doc View Source PackageName Reference to the Unity package name for GDX. Declaration public const string PackageName = \"com.dotbunny.gdx\" Field Value Type Description System.String | Improve this Doc View Source PreviousFolder Useful System.String to move up to a parent in pathing. Declaration public const string PreviousFolder = \"..\" Field Value Type Description System.String | Improve this Doc View Source TestDefine The GDX test suite preprocessor define. Declaration public const string TestDefine = \"GDX_TESTS\" Field Value Type Description System.String | Improve this Doc View Source VersionIndicators An array of System.Char used to split versions. Declaration public static readonly char[] VersionIndicators Field Value Type Description System.Char []"
  },
  "api/GDX.Vector2Extensions.html": {
    "href": "api/GDX.Vector2Extensions.html",
    "title": "Class Vector2Extensions | GDX",
    "keywords": "Class Vector2Extensions UnityEngine.Vector2 Based Extension Methods Inheritance System.Object Vector2Extensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : GDX Assembly : GDX.dll Syntax public static class Vector2Extensions Remarks Unit testing found in GDX.Tests.EditMode, under Runtime.Vector2ExtensionsTests. Methods | Improve this Doc View Source Approximately(Vector2, Vector2) Is one UnityEngine.Vector2 approximately similar to another UnityEngine.Vector2 ? Declaration public static bool Approximately(this Vector2 targetVector2, Vector2 otherVector2) Parameters Type Name Description UnityEngine.Vector2 targetVector2 Point A UnityEngine.Vector2 otherVector2 Point B Returns Type Description System.Boolean Are the two UnityEngine.Vector2 approximately the same? Remarks Includes optimized Unity.Mathematics approach. | Improve this Doc View Source Midpoint(Vector2, Vector2) Get the midpoint between two UnityEngine.Vector2 s. Declaration public static Vector2 Midpoint(this Vector2 targetVector2, Vector2 otherVector2) Parameters Type Name Description UnityEngine.Vector2 targetVector2 Point A UnityEngine.Vector2 otherVector2 Point B Returns Type Description UnityEngine.Vector2 The midpoint between targetVector2 and otherVector2 ."
  },
  "api/GDX.Vector3Extensions.html": {
    "href": "api/GDX.Vector3Extensions.html",
    "title": "Class Vector3Extensions | GDX",
    "keywords": "Class Vector3Extensions UnityEngine.Vector3 Based Extension Methods Inheritance System.Object Vector3Extensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : GDX Assembly : GDX.dll Syntax public static class Vector3Extensions Remarks Unit testing found in GDX.Tests.EditMode, under Runtime.Vector3ExtensionsTests. Methods | Improve this Doc View Source Approximately(Vector3, Vector3) Is one UnityEngine.Vector3 approximately similar to another UnityEngine.Vector3 ? Declaration public static bool Approximately(this Vector3 targetVector3, Vector3 otherVector3) Parameters Type Name Description UnityEngine.Vector3 targetVector3 Point A UnityEngine.Vector3 otherVector3 Point B Returns Type Description System.Boolean Are the two UnityEngine.Vector3 approximately the same? Remarks Includes optimized Unity.Mathematics approach. | Improve this Doc View Source Midpoint(Vector3, Vector3) Get the midpoint between two UnityEngine.Vector3 s. Declaration public static Vector3 Midpoint(this Vector3 targetVector3, Vector3 otherVector3) Parameters Type Name Description UnityEngine.Vector3 targetVector3 Point A UnityEngine.Vector3 otherVector3 Point B Returns Type Description UnityEngine.Vector3 The midpoint between targetVector3 and otherVector3 ."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Scripting API | GDX",
    "keywords": "Scripting API GitHub Repository"
  },
  "changelog.html": {
    "href": "changelog.html",
    "title": "Changelog | GDX",
    "keywords": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [1.2.1] - 2021-01-24 \"Old Is New\" A DocFX generated site is now being stood up by our internal CI when a new commit is made to the main branch. Added A proper Getting Started section to the manual Changed Fixes to compilation of code requiring C# 8 using UNITY_2020_2_OR_NEWER preprocessor in GDX.IO.Compression.TarFile , GDX.StringExtensions and GDX.Editor.UpdateProvider . Removed Removed the Wiki links and entries on GitHub, favoring discussions and content additions to the documentation . [1.2.0] - 2021-01-20 \"Cisco's Birthday\" A bit of refactoring around BuildInfo to make it a little easier to work with and some small additions to functionality by request. Added Separation of checking folders and files path structure, new GDX.Platform.EnsureFileFolderHiearchyExists() just for files. The ability (by default) to encompass the BuildInfo output folder in an assembly definition. An ability from Project Settings to output a default BuildInfo file. AssemblyInfo to each assembly to support internal access during unit testing. Applied MethodImplOptions.AggressiveInlining to many methods. A bunch of split related functionality to GDX.StringExtensions . GetAfterFirst() GetAfterLast() GetBeforeFirst() GetBeforeLast() GDX.Vector2Extensions and GDX.Vector3Extensions with associated unit testing. Approximately() Midpoint() GDX.StringExtensions SplitCamelCase() to help with formatting of internal data. Encrypt() and Decrypt() for all your string hiding needs. Changed All classes/structs with unit testing will reference the class in a comments GDX.ListExtensions renamed to GDX.IListExtensions (as well as its unit test class) Removed feature highlight section from README.md . Dropped in some unsafe attributes to GDX.StringExtensions.HasLowerCase() and GDX.StringExtensions.HasUpperCase() in GDX.StringExtensions . Reorganized Project Settings sections to be alphabetically sorted. GDX.Platform.EnsureFolderHierarchyExists() 's argument to be labeled folderPath to provide further clarity of the functional intent. Combined GDX.Developer.Build.BuildInfoGenerator into GDX.Developer.Build.BuildInfoProvider . Renamed Editor.Build.BuildInfoGeneratorTests to Editor.Build.BuildInfoProviderTests Fixed issue with output folder structure was not present for BuildInfo generation. Renamed GDX.Editor.SettingsGUILayout to GDX.Editor.SettingsStyles , while exposing more internals for reuse. [1.1.2] - 2021-01-18 \"EditMode Enabled\" Fixes for author-time code accessing runtime only parts. Added Added more EditMode unit test coverage. GDX.Developer.Build.BuildInfoGeneratorTests GDX.Developer.CommandLineParserTests Changed Renamed GDX.Editor.Config to GDX.Editor.ConfigProvider Fixed a bug where author-time calls to GDXConfig.Get() would return a null as it is meant for runtime only, they will now route through an editor safe path. Moved all Tests to follow the test runner naming EditMode for editor runnable unit tests, namespaces included inside the assembly have been stripped down as well. Exposed GDX.Developer.CommandLineParser.ProcessArguments() to allow for manual arguments to be added. [1.1.1] - 2021-01-17 \"Let Us Build\" A minor problem came to light after pushing the button. Changed GDX.Developer.Build.BuildInfoGenerator will now forcibly tell the GDX.Developer.CommandLineParser to do its thing prior to filling out the file. [1.1.0] - 2021-01-17 \"Breaking Bad\" We are breaking some rules! This should have been a major release as we have altered method names to be consistent across the API. Added GDX assembly documentation contains remarks where a function or class requires the presence of Unity's CoreModule to function correctly. GDX.GDXConfig scriptable object self creates to store persistent project-wide configurations for both runtime and author-time, editable through Project Settings . GDX.InspectorLabelAttribute (and supporting GDX.Editor.InspectorLabelPropertyDrawer ) to facilitate a quick way of replacing a labels content in the inspector. GDX.IO.Compression.TarFile support for decompressing tarballs. GDX.SemanticVersion struct for assistance with versioning. GDX.StringExtensions gained HasLowerCase() and HasUpperCase() checks. GDX.Strings.Null is a constant null value string GDX.Editor.Config static utility class to help with GDX.GDXConfig at author-time. GDX.Editor.Settings to drive specific GDX assembly settings to show up in the Project Settings window. GDX.Editor.SettingsGUILayout to assist with creating a consistent feel for GDX settings. GDX.Editor.GDXConfigEditor enforces that a selected GDXConfig does not allow for inspector changes. GDX.Editor.UpdateProvider , GDX.Editor.PackageProvider to facilitate updating of GDX package from different installation sources. GDX.Editor.VersionControl static utility class to help with VCS operations. Unit test coverage for extension classes. GDX.ArrayExtensionsTests GDX.ListExtensionsTests GDX.SimpleListExtensionsTests Additional coverage was added to GDX.StringExtensionsTests to cover HasUpperCase() and HasLowerCase() methods. GDX.Developer a separate assembly with more developer specific functionality. GDX.Developer.CommandLineParser to provide a simple, yet configurable argument parser. GDX.Developer.Editor.Build.BuildInfoProvider to facilitate automated BuildInfo generation across different pipelines. GDX.Developer.Editor.Build.BuildInfoGenerator to generate content for the BuildInfo file. GDX.Developer.Editor.Settings to drive specific GDX.Developer assembly settings to show up in the Project Settings window. Changed Updated the README.md header with logo and badges. Added release names to CHANGELOG.md as well as removed namespace sub-lists, settling on having full names in description instead. Altered arrangement of LICENSE with the hopes of appeasing the GitHub overlords of license type detection. GDX.ArrayExtensions to be more specific Corrected documentation of Clear() Class based operations FirstIndexOfItem() and LastIndexOfItem() Struct based operations FirstIndexOfValue() and LastIndexOfValue() Correctly moved into GDX namespace. GDX.ByteExtensions to be more specific Renamed hashing method to GetValueHashCode() GDX.ListExtensions to be more specific. Class based operations AddUniqueItem() , ContainsItem() , RemoveItems() , RemoveFirstItem() and RemoveLastItem() .. Struct based operations AddUniqueValue() , ContainsValue() , RemoveValues() , RemoveFirstValue() and RemoveLastValue() . GDX.SimpleListExtensions to be more specific. Class based operations AddUncheckedUniqueItem() , AddWithExpandCheckUniqueItem() , ContainsItem() , RemoveItems() , RemoveFirstItem() and RemoveLastItem() . Struct based operations AddUncheckedUniqueValue() , AddWithExpandCheckUniqueValue() , ContainsValue() , RemoveValues() , RemoveFirstValue() and RemoveLastValue() . Moved GDX.Collections.Byte2 to GDX.Mathematics.Byte2 as it made more sense to alongside other similar types in Unity.Mathematics . Removed Removed unused static StringBuilder from GDX.Strings . [1.0.0] - 2021-01-03 \"The Beginning\" Initial release containing only the GDX core library. Added Numerous static extension based functionality classes. GDX.AddressablesExtensions GDX.ArrayExtensions GDX.ByteExtensions GDX.ListExtensions GDX.SimpleListExtensions GDX.StringExtensions Numerous static utility classes. GDX.Display GDX.Localization GDX.Memory GDX.Platform GDX.Strings Bit array structures. GDX.Collections.BitArray8 GDX.Collections.BitArray16 GDX.Collections.BitArray32 GDX.Collections.BitArray64 GDX.Collections.BitArray128 GDX.Collections.BitArray256 GDX.Collections.BitArray512 Byte vector GDX.Collections.Byte2 . Sparse index pool structures GDX.Collections.SparseSet and GDX.Collections.NativeSparseSet GDX.Collections.FreeList Revolving buffer GDX.Collections.Generic.CircularBuffer . List -like structure GDX.Collections.Generic.SimpleList . A few NativeArray based structures. GDX.Collections.Generic.NativeArray2D GDX.Collections.Generic.NativeSimpleList GDX.Collections.Generic.NativeSimpleQueue GDX.Collections.Generic.NativeUniformArray3D . Numerous int32 buffer operation jobs. GDX.Jobs.ParallelFor.IntegerBufferCopyJob GDX.Jobs.ParallelFor.IntegerBufferFillJob GDX.Jobs.ParallelFor.IntegerBufferSwapJob Deterministic random GDX.Mathematics.Random.MersenneTwister ."
  },
  "index.html": {
    "href": "index.html",
    "title": "Game Development Extensions | GDX",
    "keywords": "Game Development Extensions Game Development Extensions, a battle-tested library of game-ready high-performance C# code."
  },
  "license.html": {
    "href": "license.html",
    "title": "MIT License | GDX",
    "keywords": "MIT License Copyright (c) 2020-2021 dotBunny Inc. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "manual/getting-started.html": {
    "href": "manual/getting-started.html",
    "title": "Getting Started | GDX",
    "keywords": "Getting Started Installation There are many options to getting GDX into your project; each comes with its benefits and drawbacks. Unity Package Manager Installing via the package manager system (UPM) in Unity will provide an immutable (unable to be modified) copy of the package inside of your project. There is two available methods available for this option, pick one! UPM: Package Manager Window The simplest and most straight forward method is to use Unity's built in workflow, once you have found and opened the Package Manager window (Window -> Package Manager), follow these steps: Find the + button in the upper left portion of the Package Manager window, clicking it should reveal a dropdown menu. Select Add package from git URL... In the presented text field, enter: https://github.com/dotBunny/GDX.git After entering the URL, click Add . UPM: Package Manifest The above workflow provides a user interface for your project's manifest.json file. Alternatively, you can enter the necessary line into that file manually by opening Packages/manifest.json in a text editor and adding the dependency your self: { \"dependencies\": { \"com.dotbunny.gdx\": \"https://github.com/dotBunny/GDX.git\", } } Asset Store Discussions to bring the package to the Asset Store are ongoing, we are looking to do this in the near future (1.5). OpenUPM The GDX package is registered with OpenUPM , and releases are automatically reflected in that registry. The package is registered as com.dotbunny.gdx . For detailed instructions on how to use the OpenUPM system and it's limitations, please consult their \" Installing a UPM package \" documentation. Cloned Repository It is possible for the repository to be cloned into a sub-folder in your project's Assets folder. This option makes it easy to modify GDX to your liking, as well as access additional in-development branches. git clone https://github.com/dotBunny/GDX.git This method is how typical development is done on GDX ."
  }
}