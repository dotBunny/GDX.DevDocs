<?xml version="1.0" encoding="utf-8"?>
<DuplicatesReport ToolsVersion="212.0.20211221.192418">
  <Statistics>
    <CodebaseCost>189882</CodebaseCost>
    <TotalDuplicatesCost>19625</TotalDuplicatesCost>
    <TotalFragmentsCost>44272</TotalFragmentsCost>
  </Statistics>
  <Duplicates>
    <Duplicate Cost="580">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Pooling\ArrayPoolTests.cs</FileName>
        <OffsetRange Start="1322" End="2320"></OffsetRange>
        <LineRange Start="31" End="51"></LineRange>
        <Text>{
            int[] minimums = new int[] { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
            int[] maximums = new int[] { 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

            ArrayPool&lt;int&gt; arrayPool = new ArrayPool&lt;int&gt;(minimums, maximums);

            bool evaluate = arrayPool.ArrayPools is { Length: 31 } &amp;&amp; arrayPool.ArrayPools[4].Count == 1 &amp;&amp;
                            arrayPool.ArrayPools[4].Pool is
                            {
                                Length: 2
                            } &amp;&amp; arrayPool.ArrayPools[4].Pool[0] != null &amp;&amp;
                            arrayPool.ArrayPools[4].Pool[0].Length == 16 &amp;&amp; arrayPool.ArrayPools[4].Pool[1] == null;

            if (evaluate)
            {
                int[] array = arrayPool.Get(16);
                evaluate =  array is { Length: 16 };
            }

            Assert.IsTrue(evaluate);
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Pooling\ArrayPoolTests.cs</FileName>
        <OffsetRange Start="3458" End="4367"></OffsetRange>
        <LineRange Start="78" End="95"></LineRange>
        <Text>{
            int[] minimums = new int[] { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
            int[] maximums = new int[] { 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

            ArrayPool&lt;int&gt; arrayPool = new ArrayPool&lt;int&gt;(minimums, maximums);

            bool evaluate = arrayPool.ArrayPools is { Length: 31 } &amp;&amp; arrayPool.ArrayPools[4].Count == 1 &amp;&amp;
                            arrayPool.ArrayPools[4].Pool is { Length: 2 } &amp;&amp; arrayPool.ArrayPools[4].Pool[0] != null &amp;&amp;
                            arrayPool.ArrayPools[4].Pool[0].Length == 16 &amp;&amp; arrayPool.ArrayPools[4].Pool[1] == null;

            if (evaluate)
            {
                int[] array = arrayPool.Get(13);
                evaluate = array is { Length: 16 };
            }

            Assert.IsTrue(evaluate);
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="573">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="49698" End="51388"></OffsetRange>
        <LineRange Start="1165" End="1203"></LineRange>
        <Text>needsExpansion = true;
                // We're out of space, the last free index points to nothing. Allocate more indices.
                int newCapacity = currentCapacity + howMuchToExpand;

                int[] newSparseArray = new int[newCapacity];
                Array.Copy(SparseArray, 0, newSparseArray, 0, currentCapacity);
                SparseArray = newSparseArray;

                int[] newDenseArray = new int[newCapacity];
                Array.Copy(DenseArray, 0, newDenseArray, 0, currentCapacity);
                DenseArray = newDenseArray;

                T0[] newArray0 = new T0[newCapacity];
                Array.Copy(array0, 0, newArray0, 0, currentCapacity);
                array0 = newArray0;

                T1[] newArray1 = new T1[newCapacity];
                Array.Copy(array1, 0, newArray1, 0, currentCapacity);
                array1 = newArray1;

                T2[] newArray2 = new T2[newCapacity];
                Array.Copy(array2, 0, newArray2, 0, currentCapacity);
                array2 = newArray2;

                T3[] newArray3 = new T3[newCapacity];
                Array.Copy(array3, 0, newArray3, 0, currentCapacity);
                array3 = newArray3;

                T4[] newArray4 = new T4[newCapacity];
                Array.Copy(array4, 0, newArray4, 0, currentCapacity);
                array4 = newArray4;

                T5[] newArray5 = new T5[newCapacity];
                Array.Copy(array5, 0, newArray5, 0, currentCapacity);
                array5 = newArray5;

                T6[] newArray6 = new T6[newCapacity];
                Array.Copy(array6, 0, newArray6, 0, currentCapacity);
                array6 = newArray6;</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="53158" End="54848"></OffsetRange>
        <LineRange Start="1247" End="1285"></LineRange>
        <Text>needsExpansion = true;
                // We're out of space, the last free index points to nothing. Allocate more indices.
                int newCapacity = currentCapacity + howMuchToExpand;

                int[] newSparseArray = new int[newCapacity];
                Array.Copy(SparseArray, 0, newSparseArray, 0, currentCapacity);
                SparseArray = newSparseArray;

                int[] newDenseArray = new int[newCapacity];
                Array.Copy(DenseArray, 0, newDenseArray, 0, currentCapacity);
                DenseArray = newDenseArray;

                T0[] newArray0 = new T0[newCapacity];
                Array.Copy(array0, 0, newArray0, 0, currentCapacity);
                array0 = newArray0;

                T1[] newArray1 = new T1[newCapacity];
                Array.Copy(array1, 0, newArray1, 0, currentCapacity);
                array1 = newArray1;

                T2[] newArray2 = new T2[newCapacity];
                Array.Copy(array2, 0, newArray2, 0, currentCapacity);
                array2 = newArray2;

                T3[] newArray3 = new T3[newCapacity];
                Array.Copy(array3, 0, newArray3, 0, currentCapacity);
                array3 = newArray3;

                T4[] newArray4 = new T4[newCapacity];
                Array.Copy(array4, 0, newArray4, 0, currentCapacity);
                array4 = newArray4;

                T5[] newArray5 = new T5[newCapacity];
                Array.Copy(array5, 0, newArray5, 0, currentCapacity);
                array5 = newArray5;

                T6[] newArray6 = new T6[newCapacity];
                Array.Copy(array6, 0, newArray6, 0, currentCapacity);
                array6 = newArray6;</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="507">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Pooling\ArrayPoolTests.cs</FileName>
        <OffsetRange Start="443" End="1134"></OffsetRange>
        <LineRange Start="16" End="23"></LineRange>
        <Text>int[] minimums = new int[] { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
            int[] maximums = new int[] { 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

            ArrayPool&lt;int&gt; arrayPool = new ArrayPool&lt;int&gt;(minimums, maximums);

            bool evaluate = arrayPool.ArrayPools is { Length: 31 } &amp;&amp; arrayPool.ArrayPools[4].Count == 1 &amp;&amp;
                            arrayPool.ArrayPools[4].Pool is { Length: 2 } &amp;&amp; arrayPool.ArrayPools[4].Pool[0] != null &amp;&amp;
                            arrayPool.ArrayPools[4].Pool[0].Length == 16 &amp;&amp; arrayPool.ArrayPools[4].Pool[1] == null;</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Pooling\ArrayPoolTests.cs</FileName>
        <OffsetRange Start="4547" End="5326"></OffsetRange>
        <LineRange Start="102" End="112"></LineRange>
        <Text>int[] minimums = new int[] { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
            int[] maximums = new int[] { 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

            ArrayPool&lt;int&gt; arrayPool = new ArrayPool&lt;int&gt;(minimums, maximums);

            bool evaluate = arrayPool.ArrayPools is { Length: 31 } &amp;&amp; arrayPool.ArrayPools[4].Count == 1 &amp;&amp;
                            arrayPool.ArrayPools[4].Pool is
                            {
                                Length: 2
                            } &amp;&amp; arrayPool.ArrayPools[4].Pool[0] != null &amp;&amp;
                            arrayPool.ArrayPools[4].Pool[0].Length == 16 &amp;&amp; arrayPool.ArrayPools[4].Pool[1] == null;</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Pooling\ArrayPoolTests.cs</FileName>
        <OffsetRange Start="5838" End="6529"></OffsetRange>
        <LineRange Start="130" End="137"></LineRange>
        <Text>int[] minimums = new int[] { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
            int[] maximums = new int[] { 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

            ArrayPool&lt;int&gt; arrayPool = new ArrayPool&lt;int&gt;(minimums, maximums);

            bool evaluate = arrayPool.ArrayPools is { Length: 31 } &amp;&amp; arrayPool.ArrayPools[4].Count == 1 &amp;&amp;
                            arrayPool.ArrayPools[4].Pool is { Length: 2 } &amp;&amp; arrayPool.ArrayPools[4].Pool[0] != null &amp;&amp;
                            arrayPool.ArrayPools[4].Pool[0].Length == 16 &amp;&amp; arrayPool.ArrayPools[4].Pool[1] == null;</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="451">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="43453" End="44821"></OffsetRange>
        <LineRange Start="1016" End="1046"></LineRange>
        <Text>needsExpansion = true;
                // We're out of space, the last free index points to nothing. Allocate more indices.
                int newCapacity = currentCapacity + howMuchToExpand;

                int[] newSparseArray = new int[newCapacity];
                Array.Copy(SparseArray, 0, newSparseArray, 0, currentCapacity);
                SparseArray = newSparseArray;

                int[] newDenseArray = new int[newCapacity];
                Array.Copy(DenseArray, 0, newDenseArray, 0, currentCapacity);
                DenseArray = newDenseArray;

                T0[] newArray0 = new T0[newCapacity];
                Array.Copy(array0, 0, newArray0, 0, currentCapacity);
                array0 = newArray0;

                T1[] newArray1 = new T1[newCapacity];
                Array.Copy(array1, 0, newArray1, 0, currentCapacity);
                array1 = newArray1;

                T2[] newArray2 = new T2[newCapacity];
                Array.Copy(array2, 0, newArray2, 0, currentCapacity);
                array2 = newArray2;

                T3[] newArray3 = new T3[newCapacity];
                Array.Copy(array3, 0, newArray3, 0, currentCapacity);
                array3 = newArray3;

                T4[] newArray4 = new T4[newCapacity];
                Array.Copy(array4, 0, newArray4, 0, currentCapacity);
                array4 = newArray4;</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="46463" End="47831"></OffsetRange>
        <LineRange Start="1088" End="1118"></LineRange>
        <Text>needsExpansion = true;
                // We're out of space, the last free index points to nothing. Allocate more indices.
                int newCapacity = currentCapacity + howMuchToExpand;

                int[] newSparseArray = new int[newCapacity];
                Array.Copy(SparseArray, 0, newSparseArray, 0, currentCapacity);
                SparseArray = newSparseArray;

                int[] newDenseArray = new int[newCapacity];
                Array.Copy(DenseArray, 0, newDenseArray, 0, currentCapacity);
                DenseArray = newDenseArray;

                T0[] newArray0 = new T0[newCapacity];
                Array.Copy(array0, 0, newArray0, 0, currentCapacity);
                array0 = newArray0;

                T1[] newArray1 = new T1[newCapacity];
                Array.Copy(array1, 0, newArray1, 0, currentCapacity);
                array1 = newArray1;

                T2[] newArray2 = new T2[newCapacity];
                Array.Copy(array2, 0, newArray2, 0, currentCapacity);
                array2 = newArray2;

                T3[] newArray3 = new T3[newCapacity];
                Array.Copy(array3, 0, newArray3, 0, currentCapacity);
                array3 = newArray3;

                T4[] newArray4 = new T4[newCapacity];
                Array.Copy(array4, 0, newArray4, 0, currentCapacity);
                array4 = newArray4;</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="329">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="38144" End="39190"></OffsetRange>
        <LineRange Start="890" End="912"></LineRange>
        <Text>needsExpansion = true;
                // We're out of space, the last free index points to nothing. Allocate more indices.
                int newCapacity = currentCapacity + howMuchToExpand;

                int[] newSparseArray = new int[newCapacity];
                Array.Copy(SparseArray, 0, newSparseArray, 0, currentCapacity);
                SparseArray = newSparseArray;

                int[] newDenseArray = new int[newCapacity];
                Array.Copy(DenseArray, 0, newDenseArray, 0, currentCapacity);
                DenseArray = newDenseArray;

                T0[] newArray0 = new T0[newCapacity];
                Array.Copy(array0, 0, newArray0, 0, currentCapacity);
                array0 = newArray0;

                T1[] newArray1 = new T1[newCapacity];
                Array.Copy(array1, 0, newArray1, 0, currentCapacity);
                array1 = newArray1;

                T2[] newArray2 = new T2[newCapacity];
                Array.Copy(array2, 0, newArray2, 0, currentCapacity);
                array2 = newArray2;</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="40680" End="41726"></OffsetRange>
        <LineRange Start="950" End="972"></LineRange>
        <Text>needsExpansion = true;
                // We're out of space, the last free index points to nothing. Allocate more indices.
                int newCapacity = currentCapacity + howMuchToExpand;

                int[] newSparseArray = new int[newCapacity];
                Array.Copy(SparseArray, 0, newSparseArray, 0, currentCapacity);
                SparseArray = newSparseArray;

                int[] newDenseArray = new int[newCapacity];
                Array.Copy(DenseArray, 0, newDenseArray, 0, currentCapacity);
                DenseArray = newDenseArray;

                T0[] newArray0 = new T0[newCapacity];
                Array.Copy(array0, 0, newArray0, 0, currentCapacity);
                array0 = newArray0;

                T1[] newArray1 = new T1[newCapacity];
                Array.Copy(array1, 0, newArray1, 0, currentCapacity);
                array1 = newArray1;

                T2[] newArray2 = new T2[newCapacity];
                Array.Copy(array2, 0, newArray2, 0, currentCapacity);
                array2 = newArray2;</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="303">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\NativeSparseSet.cs</FileName>
        <OffsetRange Start="12184" End="13836"></OffsetRange>
        <LineRange Start="273" End="310"></LineRange>
        <Text>{
            bool didRemove = false;
            if (sparseIndexToRemove &gt;= 0 &amp;&amp; sparseIndexToRemove &lt; SparseArray.Length)
            {
                ulong sparseIndexVersion = versionArray[sparseIndexToRemove];
                int denseIndexToRemove = SparseArray[sparseIndexToRemove];

                if (sparseIndexVersion == version &amp;&amp; denseIndexToRemove &gt;= 0 &amp;&amp; denseIndexToRemove &lt; Count)
                {
                    int sparseIndexAtDenseIndex = DenseArray[denseIndexToRemove];
                    int newLength = Count - 1;
                    int sparseIndexBeingSwapped = DenseArray[newLength];

                    if (denseIndexToRemove &lt; Count &amp;&amp; sparseIndexAtDenseIndex == sparseIndexToRemove)
                    {
                        didRemove = true;
                        ++sparseIndexVersion;
                        versionArray[sparseIndexToRemove] = sparseIndexVersion;
                        // Swap the entry being removed with the last entry.
                        SparseArray[sparseIndexBeingSwapped] = denseIndexToRemove;
                        DenseArray[denseIndexToRemove] = sparseIndexBeingSwapped;

                        // Clear the dense index, for debugging purposes
                        DenseArray[newLength] = -1;

                        // Add the sparse index to the free list.
                        SparseArray[sparseIndexToRemove] = FreeIndex;
                        FreeIndex = sparseIndexToRemove;

                        Count = newLength;
                    }
                }
            }

            sparseIndexToRemove = -1;

            return didRemove;
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="11178" End="12830"></OffsetRange>
        <LineRange Start="265" End="302"></LineRange>
        <Text>{
            bool didRemove = false;
            if (sparseIndexToRemove &gt;= 0 &amp;&amp; sparseIndexToRemove &lt; SparseArray.Length)
            {
                ulong sparseIndexVersion = versionArray[sparseIndexToRemove];
                int denseIndexToRemove = SparseArray[sparseIndexToRemove];

                if (sparseIndexVersion == version &amp;&amp; denseIndexToRemove &gt;= 0 &amp;&amp; denseIndexToRemove &lt; Count)
                {
                    int sparseIndexAtDenseIndex = DenseArray[denseIndexToRemove];
                    int newLength = Count - 1;
                    int sparseIndexBeingSwapped = DenseArray[newLength];

                    if (denseIndexToRemove &lt; Count &amp;&amp; sparseIndexAtDenseIndex == sparseIndexToRemove)
                    {
                        didRemove = true;
                        ++sparseIndexVersion;
                        versionArray[sparseIndexToRemove] = sparseIndexVersion;
                        // Swap the entry being removed with the last entry.
                        SparseArray[sparseIndexBeingSwapped] = denseIndexToRemove;
                        DenseArray[denseIndexToRemove] = sparseIndexBeingSwapped;

                        // Clear the dense index, for debugging purposes
                        DenseArray[newLength] = -1;

                        // Add the sparse index to the free list.
                        SparseArray[sparseIndexToRemove] = FreeIndex;
                        FreeIndex = sparseIndexToRemove;

                        Count = newLength;
                    }
                }
            }

            sparseIndexToRemove = -1;

            return didRemove;
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="275">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\NativeSparseSet.cs</FileName>
        <OffsetRange Start="3438" End="4341"></OffsetRange>
        <LineRange Start="82" End="96"></LineRange>
        <Text>NativeArray&lt;int&gt; newSparseArray = new NativeArray&lt;int&gt;(newCapacity, allocator, nativeArrayOptions);
                NativeSlice&lt;int&gt; newSparseArraySlice = new NativeSlice&lt;int&gt;(newSparseArray, 0, currentCapacity);
                newSparseArraySlice.CopyFrom(SparseArray);
                SparseArray = newSparseArray;

                NativeArray&lt;int&gt; newDenseArray = new NativeArray&lt;int&gt;(newCapacity, allocator, nativeArrayOptions);
                NativeSlice&lt;int&gt; newDenseArraySlice = new NativeSlice&lt;int&gt;(newDenseArray, 0, currentCapacity);
                newDenseArraySlice.CopyFrom(DenseArray);
                DenseArray = newDenseArray;

                for (int i = currentCapacity; i &lt; newCapacity; i++)
                {
                    SparseArray[i] = i + 1; // Build the free list chain.
                    DenseArray[i] = -1; // Set new dense indices as unclaimed.
                }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\NativeSparseSet.cs</FileName>
        <OffsetRange Start="30539" End="31394"></OffsetRange>
        <LineRange Start="685" End="699"></LineRange>
        <Text>NativeArray&lt;int&gt; newSparseArray = new NativeArray&lt;int&gt;(newCapacity, allocator, nativeArrayOptions);
            NativeSlice&lt;int&gt; newSparseArraySlice = new NativeSlice&lt;int&gt;(newSparseArray, 0, currentCapacity);
            newSparseArraySlice.CopyFrom(SparseArray);
            SparseArray = newSparseArray;

            NativeArray&lt;int&gt; newDenseArray = new NativeArray&lt;int&gt;(newCapacity, allocator, nativeArrayOptions);
            NativeSlice&lt;int&gt; newDenseArraySlice = new NativeSlice&lt;int&gt;(newDenseArray, 0, currentCapacity);
            newDenseArraySlice.CopyFrom(DenseArray);
            DenseArray = newDenseArray;

            for (int i = currentCapacity; i &lt; newCapacity; i++)
            {
                DenseArray[i] = -1; // Set new dense indices as unclaimed.
                SparseArray[i] = i + 1; // Build the free list chain.
            }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="271">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\NativeSparseSet.cs</FileName>
        <OffsetRange Start="9633" End="11391"></OffsetRange>
        <LineRange Start="218" End="258"></LineRange>
        <Text>/// &lt;summary&gt;
        ///     Returns true if the element was successfully removed.
        ///     WARNING: Will not protect against accidentally removing twice if the index in question was recycled between Remove
        ///     calls.
        /// &lt;/summary&gt;
        public bool RemoveWithNullValueCheck(ref int sparseIndexToRemove)
        {
            bool didRemove = false;
            if (sparseIndexToRemove &gt;= 0 &amp;&amp; sparseIndexToRemove &lt; SparseArray.Length)
            {
                int denseIndexToRemove = SparseArray[sparseIndexToRemove];

                if (denseIndexToRemove &gt;= 0 &amp;&amp; denseIndexToRemove &lt; Count)
                {
                    int sparseIndexAtDenseIndex = DenseArray[denseIndexToRemove];
                    int newLength = Count - 1;
                    int sparseIndexBeingSwapped = DenseArray[newLength];

                    if (denseIndexToRemove &lt; Count &amp;&amp; sparseIndexAtDenseIndex == sparseIndexToRemove)
                    {
                        didRemove = true;
                        // Swap the entry being removed with the last entry.
                        SparseArray[sparseIndexBeingSwapped] = denseIndexToRemove;
                        DenseArray[denseIndexToRemove] = sparseIndexBeingSwapped;

                        // Clear the dense index, for debugging purposes
                        DenseArray[newLength] = -1;

                        // Add the sparse index to the free list.
                        SparseArray[sparseIndexToRemove] = FreeIndex;
                        FreeIndex = sparseIndexToRemove;

                        Count = newLength;
                    }
                }
            }

            sparseIndexToRemove = -1;

            return didRemove;
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="8634" End="10392"></OffsetRange>
        <LineRange Start="210" End="250"></LineRange>
        <Text>/// &lt;summary&gt;
        ///     Returns true if the element was successfully removed.
        ///     WARNING: Will not protect against accidentally removing twice if the index in question was recycled between Remove
        ///     calls.
        /// &lt;/summary&gt;
        public bool RemoveWithNullValueCheck(ref int sparseIndexToRemove)
        {
            bool didRemove = false;
            if (sparseIndexToRemove &gt;= 0 &amp;&amp; sparseIndexToRemove &lt; SparseArray.Length)
            {
                int denseIndexToRemove = SparseArray[sparseIndexToRemove];

                if (denseIndexToRemove &gt;= 0 &amp;&amp; denseIndexToRemove &lt; Count)
                {
                    int sparseIndexAtDenseIndex = DenseArray[denseIndexToRemove];
                    int newLength = Count - 1;
                    int sparseIndexBeingSwapped = DenseArray[newLength];

                    if (denseIndexToRemove &lt; Count &amp;&amp; sparseIndexAtDenseIndex == sparseIndexToRemove)
                    {
                        didRemove = true;
                        // Swap the entry being removed with the last entry.
                        SparseArray[sparseIndexBeingSwapped] = denseIndexToRemove;
                        DenseArray[denseIndexToRemove] = sparseIndexBeingSwapped;

                        // Clear the dense index, for debugging purposes
                        DenseArray[newLength] = -1;

                        // Add the sparse index to the free list.
                        SparseArray[sparseIndexToRemove] = FreeIndex;
                        FreeIndex = sparseIndexToRemove;

                        Count = newLength;
                    }
                }
            }

            sparseIndexToRemove = -1;

            return didRemove;
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="252">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\SimpleListTests.cs</FileName>
        <OffsetRange Start="3231" End="3778"></OffsetRange>
        <LineRange Start="109" End="120"></LineRange>
        <Text>SimpleList&lt;int&gt; mockList = new SimpleList&lt;int&gt;(2);
            int[] initialBackingArray = mockList.Array;
            int[] poolMinimums = new int[32];
            int[] poolMaximums = new int[32];
            poolMinimums[1] = 0;
            poolMinimums[2] = 1;
            poolMaximums[1] = 1;
            poolMaximums[2] = 1;

            Pooling.ArrayPool&lt;int&gt; pool = new Pooling.ArrayPool&lt;int&gt;(poolMinimums, poolMaximums);
            int[] replacementArrayOnExpand = pool.ArrayPools[2].Pool[0];
            replacementArrayOnExpand[3] = 5;</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\SimpleListTests.cs</FileName>
        <OffsetRange Start="5704" End="6251"></OffsetRange>
        <LineRange Start="169" End="180"></LineRange>
        <Text>SimpleList&lt;int&gt; mockList = new SimpleList&lt;int&gt;(2);
            int[] initialBackingArray = mockList.Array;
            int[] poolMinimums = new int[32];
            int[] poolMaximums = new int[32];
            poolMinimums[1] = 0;
            poolMinimums[2] = 1;
            poolMaximums[1] = 1;
            poolMaximums[2] = 1;

            Pooling.ArrayPool&lt;int&gt; pool = new Pooling.ArrayPool&lt;int&gt;(poolMinimums, poolMaximums);
            int[] replacementArrayOnExpand = pool.ArrayPools[2].Pool[0];
            replacementArrayOnExpand[3] = 5;</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\SimpleListTests.cs</FileName>
        <OffsetRange Start="7110" End="7657"></OffsetRange>
        <LineRange Start="202" End="213"></LineRange>
        <Text>SimpleList&lt;int&gt; mockList = new SimpleList&lt;int&gt;(2);
            int[] initialBackingArray = mockList.Array;
            int[] poolMinimums = new int[32];
            int[] poolMaximums = new int[32];
            poolMinimums[1] = 0;
            poolMinimums[2] = 1;
            poolMaximums[1] = 1;
            poolMaximums[2] = 1;

            Pooling.ArrayPool&lt;int&gt; pool = new Pooling.ArrayPool&lt;int&gt;(poolMinimums, poolMaximums);
            int[] replacementArrayOnExpand = pool.ArrayPools[2].Pool[0];
            replacementArrayOnExpand[3] = 5;</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="246">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\NativeSparseSet.cs</FileName>
        <OffsetRange Start="25923" End="27135"></OffsetRange>
        <LineRange Start="568" End="601"></LineRange>
        <Text>{
            int denseIndexToRemove = SparseArray[sparseIndexToRemove];
            ulong versionAtSparseIndex = versionArray[sparseIndexToRemove];

            indexToSwapFrom = -1;
            indexToSwapTo = -1;

            bool succeeded = versionAtSparseIndex == version;

            if (succeeded)
            {
                int newLength = Count - 1;
                int sparseIndexBeingSwapped = DenseArray[newLength];

                // Swap the entry being removed with the last entry.
                SparseArray[sparseIndexBeingSwapped] = denseIndexToRemove;
                DenseArray[denseIndexToRemove] = sparseIndexBeingSwapped;

                // Clear the dense  index, for debugging purposes
                DenseArray[newLength] = -1;

                // Add the sparse index to the free list.
                SparseArray[sparseIndexToRemove] = FreeIndex;
                versionArray[sparseIndexToRemove] = versionArray[sparseIndexToRemove] + 1;
                FreeIndex = sparseIndexToRemove;

                Count = newLength;

                indexToSwapTo = denseIndexToRemove;
                indexToSwapFrom = newLength;
            }

            return succeeded;
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="24861" End="26073"></OffsetRange>
        <LineRange Start="559" End="592"></LineRange>
        <Text>{
            int denseIndexToRemove = SparseArray[sparseIndexToRemove];
            ulong versionAtSparseIndex = versionArray[sparseIndexToRemove];

            indexToSwapFrom = -1;
            indexToSwapTo = -1;

            bool succeeded = versionAtSparseIndex == version;

            if (succeeded)
            {
                int newLength = Count - 1;
                int sparseIndexBeingSwapped = DenseArray[newLength];

                // Swap the entry being removed with the last entry.
                SparseArray[sparseIndexBeingSwapped] = denseIndexToRemove;
                DenseArray[denseIndexToRemove] = sparseIndexBeingSwapped;

                // Clear the dense  index, for debugging purposes
                DenseArray[newLength] = -1;

                // Add the sparse index to the free list.
                SparseArray[sparseIndexToRemove] = FreeIndex;
                versionArray[sparseIndexToRemove] = versionArray[sparseIndexToRemove] + 1;
                FreeIndex = sparseIndexToRemove;

                Count = newLength;

                indexToSwapTo = denseIndexToRemove;
                indexToSwapFrom = newLength;
            }

            return succeeded;
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="238">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="71058" End="71847"></OffsetRange>
        <LineRange Start="1677" End="1690"></LineRange>
        <Text>int denseIndexToRemove = SparseArray[sparseIndexToRemove];
            int newLength = Count - 1;
            int sparseIndexBeingSwapped = DenseArray[newLength];

            // Swap the entry being removed with the last entry.
            SparseArray[sparseIndexBeingSwapped] = denseIndexToRemove;
            DenseArray[denseIndexToRemove] = sparseIndexBeingSwapped;
            array0[denseIndexToRemove] = array0[newLength];
            array1[denseIndexToRemove] = array1[newLength];
            array2[denseIndexToRemove] = array2[newLength];
            array3[denseIndexToRemove] = array3[newLength];
            array4[denseIndexToRemove] = array4[newLength];
            array5[denseIndexToRemove] = array5[newLength];
            array6[denseIndexToRemove] = array6[newLength];</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="72670" End="73459"></OffsetRange>
        <LineRange Start="1712" End="1725"></LineRange>
        <Text>int denseIndexToRemove = SparseArray[sparseIndexToRemove];
            int newLength = Count - 1;
            int sparseIndexBeingSwapped = DenseArray[newLength];

            // Swap the entry being removed with the last entry.
            SparseArray[sparseIndexBeingSwapped] = denseIndexToRemove;
            DenseArray[denseIndexToRemove] = sparseIndexBeingSwapped;
            array0[denseIndexToRemove] = array0[newLength];
            array1[denseIndexToRemove] = array1[newLength];
            array2[denseIndexToRemove] = array2[newLength];
            array3[denseIndexToRemove] = array3[newLength];
            array4[denseIndexToRemove] = array4[newLength];
            array5[denseIndexToRemove] = array5[newLength];
            array6[denseIndexToRemove] = array6[newLength];</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="218">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\SimpleList.cs</FileName>
        <OffsetRange Start="7358" End="7948"></OffsetRange>
        <LineRange Start="190" End="204"></LineRange>
        <Text>T[] array = Array;
            int count = Count;
            int arrayLength = array.Length;

            if (Count &gt;= arrayLength)
            {
                arrayLength = arrayLength == 0 ? 1 : arrayLength;
                T[] newArray = pool.Get(arrayLength * 2);
                System.Array.Copy(array, 0, newArray, 0, arrayLength);
                System.Array.Clear(array, 0, arrayLength);
                System.Array.Clear(newArray, arrayLength, arrayLength);
                pool.Return(array);
                array = newArray;
                Array = newArray;
            }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\SimpleList.cs</FileName>
        <OffsetRange Start="15050" End="15640"></OffsetRange>
        <LineRange Start="365" End="379"></LineRange>
        <Text>T[] array = Array;
            int count = Count;
            int arrayLength = array.Length;

            if (Count &gt;= arrayLength)
            {
                arrayLength = arrayLength == 0 ? 1 : arrayLength;
                T[] newArray = pool.Get(arrayLength * 2);
                System.Array.Copy(array, 0, newArray, 0, arrayLength);
                System.Array.Clear(array, 0, arrayLength);
                System.Array.Clear(newArray, arrayLength, arrayLength);
                pool.Return(array);
                array = newArray;
                Array = newArray;
            }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="214">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\Array2D.cs</FileName>
        <OffsetRange Start="4889" End="5916"></OffsetRange>
        <LineRange Start="131" End="157"></LineRange>
        <Text>/// &lt;summary&gt;
        ///     Reverse the order of the columns in the backing &lt;see cref="Array" /&gt;.
        /// &lt;/summary&gt;
        public void ReverseColumns()
        {
            T temporaryStorage;

            int lastIndex = ColumnCount - 1;
            int middleIndex = ColumnCount / 2;

            for (int rowIndex = 0; rowIndex &lt; RowCount; rowIndex++)
            {
                for (int columnIndex = 0; columnIndex &lt; middleIndex; columnIndex++)
                {
                    // Cache our indexes
                    int currentElementIndex = rowIndex * ColumnCount + columnIndex;
                    int swapElementIndex = rowIndex * ColumnCount + (lastIndex - columnIndex);

                    // Store the swap value
                    temporaryStorage = Array[currentElementIndex];

                    // Swap values
                    Array[currentElementIndex] = Array[swapElementIndex];
                    Array[swapElementIndex] = temporaryStorage;
                }
            }
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\NativeArray2D.cs</FileName>
        <OffsetRange Start="4742" End="5769"></OffsetRange>
        <LineRange Start="115" End="141"></LineRange>
        <Text>/// &lt;summary&gt;
        ///     Reverse the order of the columns in the backing &lt;see cref="Array" /&gt;.
        /// &lt;/summary&gt;
        public void ReverseColumns()
        {
            T temporaryStorage;

            int lastIndex = ColumnCount - 1;
            int middleIndex = ColumnCount / 2;

            for (int rowIndex = 0; rowIndex &lt; RowCount; rowIndex++)
            {
                for (int columnIndex = 0; columnIndex &lt; middleIndex; columnIndex++)
                {
                    // Cache our indexes
                    int currentElementIndex = rowIndex * ColumnCount + columnIndex;
                    int swapElementIndex = rowIndex * ColumnCount + (lastIndex - columnIndex);

                    // Store the swap value
                    temporaryStorage = Array[currentElementIndex];

                    // Swap values
                    Array[currentElementIndex] = Array[swapElementIndex];
                    Array[swapElementIndex] = temporaryStorage;
                }
            }
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="210">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\NativeSparseSet.cs</FileName>
        <OffsetRange Start="27866" End="28903"></OffsetRange>
        <LineRange Start="612" End="638"></LineRange>
        <Text>{
            int sparseIndexToRemove = DenseArray[denseIndexToRemove];
            int newLength = Count - 1;
            int sparseIndexBeingSwapped = DenseArray[newLength];

            ulong versionAtSparseIndex = versionArray[sparseIndexToRemove];

            bool succeeded = version == versionAtSparseIndex;
            if (succeeded)
            {
                // Swap the entry being removed with the last entry.
                SparseArray[sparseIndexBeingSwapped] = denseIndexToRemove;
                DenseArray[denseIndexToRemove] = sparseIndexBeingSwapped;

                // Clear the dense  index, for debugging purposes
                DenseArray[newLength] = -1;

                // Add the sparse index to the free list.
                SparseArray[sparseIndexToRemove] = FreeIndex;
                versionArray[sparseIndexToRemove] = versionArray[sparseIndexToRemove] + 1;
                FreeIndex = sparseIndexToRemove;

                Count = newLength;
            }

            return succeeded;
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="26781" End="27818"></OffsetRange>
        <LineRange Start="602" End="628"></LineRange>
        <Text>{
            int sparseIndexToRemove = DenseArray[denseIndexToRemove];
            int newLength = Count - 1;
            int sparseIndexBeingSwapped = DenseArray[newLength];

            ulong versionAtSparseIndex = versionArray[sparseIndexToRemove];

            bool succeeded = version == versionAtSparseIndex;
            if (succeeded)
            {
                // Swap the entry being removed with the last entry.
                SparseArray[sparseIndexBeingSwapped] = denseIndexToRemove;
                DenseArray[denseIndexToRemove] = sparseIndexBeingSwapped;

                // Clear the dense  index, for debugging purposes
                DenseArray[newLength] = -1;

                // Add the sparse index to the free list.
                SparseArray[sparseIndexToRemove] = FreeIndex;
                versionArray[sparseIndexToRemove] = versionArray[sparseIndexToRemove] + 1;
                FreeIndex = sparseIndexToRemove;

                Count = newLength;
            }

            return succeeded;
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="208">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\NativeSparseSet.cs</FileName>
        <OffsetRange Start="33779" End="34418"></OffsetRange>
        <LineRange Start="745" End="753"></LineRange>
        <Text>NativeArray&lt;int&gt; newSparseArray = new NativeArray&lt;int&gt;(newCount, allocator, nativeArrayOptions);
                NativeSlice&lt;int&gt; newSparseArraySlice = new NativeSlice&lt;int&gt;(newSparseArray, 0, currentCapacity);
                newSparseArraySlice.CopyFrom(SparseArray);
                SparseArray = newSparseArray;

                NativeArray&lt;int&gt; newDenseArray = new NativeArray&lt;int&gt;(newCount, allocator, nativeArrayOptions);
                NativeSlice&lt;int&gt; newDenseArraySlice = new NativeSlice&lt;int&gt;(newDenseArray, 0, currentCapacity);
                newDenseArraySlice.CopyFrom(DenseArray);
                DenseArray = newDenseArray;</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\NativeSparseSet.cs</FileName>
        <OffsetRange Start="35081" End="35720"></OffsetRange>
        <LineRange Start="771" End="779"></LineRange>
        <Text>NativeArray&lt;int&gt; newSparseArray = new NativeArray&lt;int&gt;(newCount, allocator, nativeArrayOptions);
                NativeSlice&lt;int&gt; newSparseArraySlice = new NativeSlice&lt;int&gt;(newSparseArray, 0, currentCapacity);
                newSparseArraySlice.CopyFrom(SparseArray);
                SparseArray = newSparseArray;

                NativeArray&lt;int&gt; newDenseArray = new NativeArray&lt;int&gt;(newCount, allocator, nativeArrayOptions);
                NativeSlice&lt;int&gt; newDenseArraySlice = new NativeSlice&lt;int&gt;(newDenseArray, 0, currentCapacity);
                newDenseArraySlice.CopyFrom(DenseArray);
                DenseArray = newDenseArray;</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="207">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\StringKeyDictionary.cs</FileName>
        <OffsetRange Start="12016" End="12754"></OffsetRange>
        <LineRange Start="352" End="374"></LineRange>
        <Text>if (key == null) throw new ArgumentNullException();

            int hashCode = key.GetStableHashCode() &amp; 0x7FFFFFFF;
            int bucketIndex = hashCode % Buckets.Length;
            int indexAtBucket = Buckets[bucketIndex];
            int indexOfKey = indexAtBucket;
            int previousIndex = indexAtBucket;

            bool foundIndex = false;

            while (indexOfKey != -1)
            {
                ref StringKeyEntry&lt;TValue&gt; currEntry = ref Entries[indexOfKey];

                if (currEntry.Key == key)
                {
                    foundIndex = true;
                    break;
                }

                previousIndex = indexOfKey;
                indexOfKey = currEntry.Next;
            }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\StringKeyDictionary.cs</FileName>
        <OffsetRange Start="13937" End="14675"></OffsetRange>
        <LineRange Start="411" End="433"></LineRange>
        <Text>if (key == null) throw new ArgumentNullException();

            int hashCode = key.GetStableHashCode() &amp; 0x7FFFFFFF;
            int bucketIndex = hashCode % Buckets.Length;
            int indexAtBucket = Buckets[bucketIndex];
            int indexOfKey = indexAtBucket;
            int previousIndex = indexAtBucket;

            bool foundIndex = false;

            while (indexOfKey != -1)
            {
                ref StringKeyEntry&lt;TValue&gt; currEntry = ref Entries[indexOfKey];

                if (currEntry.Key == key)
                {
                    foundIndex = true;
                    break;
                }

                previousIndex = indexOfKey;
                indexOfKey = currEntry.Next;
            }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="207">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="33735" End="34459"></OffsetRange>
        <LineRange Start="784" End="798"></LineRange>
        <Text>needsExpansion = true;
                // We're out of space, the last free index points to nothing. Allocate more indices.
                int newCapacity = currentCapacity + howMuchToExpand;

                int[] newSparseArray = new int[newCapacity];
                Array.Copy(SparseArray, 0, newSparseArray, 0, currentCapacity);
                SparseArray = newSparseArray;

                int[] newDenseArray = new int[newCapacity];
                Array.Copy(DenseArray, 0, newDenseArray, 0, currentCapacity);
                DenseArray = newDenseArray;

                T0[] newArray0 = new T0[newCapacity];
                Array.Copy(array0, 0, newArray0, 0, currentCapacity);
                array0 = newArray0;</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="35821" End="36545"></OffsetRange>
        <LineRange Start="834" End="848"></LineRange>
        <Text>needsExpansion = true;
                // We're out of space, the last free index points to nothing. Allocate more indices.
                int newCapacity = currentCapacity + howMuchToExpand;

                int[] newSparseArray = new int[newCapacity];
                Array.Copy(SparseArray, 0, newSparseArray, 0, currentCapacity);
                SparseArray = newSparseArray;

                int[] newDenseArray = new int[newCapacity];
                Array.Copy(DenseArray, 0, newDenseArray, 0, currentCapacity);
                DenseArray = newDenseArray;

                T0[] newArray0 = new T0[newCapacity];
                Array.Copy(array0, 0, newArray0, 0, currentCapacity);
                array0 = newArray0;</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="194">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="68176" End="68845"></OffsetRange>
        <LineRange Start="1612" End="1623"></LineRange>
        <Text>int denseIndexToRemove = SparseArray[sparseIndexToRemove];
            int newLength = Count - 1;
            int sparseIndexBeingSwapped = DenseArray[newLength];

            // Swap the entry being removed with the last entry.
            SparseArray[sparseIndexBeingSwapped] = denseIndexToRemove;
            DenseArray[denseIndexToRemove] = sparseIndexBeingSwapped;
            array0[denseIndexToRemove] = array0[newLength];
            array1[denseIndexToRemove] = array1[newLength];
            array2[denseIndexToRemove] = array2[newLength];
            array3[denseIndexToRemove] = array3[newLength];
            array4[denseIndexToRemove] = array4[newLength];</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="69564" End="70233"></OffsetRange>
        <LineRange Start="1644" End="1655"></LineRange>
        <Text>int denseIndexToRemove = SparseArray[sparseIndexToRemove];
            int newLength = Count - 1;
            int sparseIndexBeingSwapped = DenseArray[newLength];

            // Swap the entry being removed with the last entry.
            SparseArray[sparseIndexBeingSwapped] = denseIndexToRemove;
            DenseArray[denseIndexToRemove] = sparseIndexBeingSwapped;
            array0[denseIndexToRemove] = array0[newLength];
            array1[denseIndexToRemove] = array1[newLength];
            array2[denseIndexToRemove] = array2[newLength];
            array3[denseIndexToRemove] = array3[newLength];
            array4[denseIndexToRemove] = array4[newLength];</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="193">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\SimpleList.cs</FileName>
        <OffsetRange Start="5208" End="5726"></OffsetRange>
        <LineRange Start="136" End="149"></LineRange>
        <Text>T[] array = Array;
            int count = Count;
            int arrayLength = array.Length;

            if (Count &gt;= arrayLength)
            {
                arrayLength = arrayLength == 0 ? 1 : arrayLength;
                T[] newArray = pool.Get(arrayLength * 2);
                System.Array.Copy(array, 0, newArray, 0, arrayLength);
                System.Array.Clear(array, 0, arrayLength);
                pool.Return(array);
                array = newArray;
                Array = newArray;
            }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\SimpleList.cs</FileName>
        <OffsetRange Start="12473" End="12991"></OffsetRange>
        <LineRange Start="307" End="320"></LineRange>
        <Text>T[] array = Array;
            int count = Count;
            int arrayLength = array.Length;

            if (Count &gt;= arrayLength)
            {
                arrayLength = arrayLength == 0 ? 1 : arrayLength;
                T[] newArray = pool.Get(arrayLength * 2);
                System.Array.Copy(array, 0, newArray, 0, arrayLength);
                System.Array.Clear(array, 0, arrayLength);
                pool.Return(array);
                array = newArray;
                Array = newArray;
            }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="193">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\SimpleList.cs</FileName>
        <OffsetRange Start="6282" End="6813"></OffsetRange>
        <LineRange Start="163" End="176"></LineRange>
        <Text>T[] array = Array;
            int count = Count;
            int arrayLength = array.Length;

            if (Count &gt;= arrayLength)
            {
                arrayLength = arrayLength == 0 ? 1 : arrayLength;
                T[] newArray = pool.Get(arrayLength * 2);
                System.Array.Copy(array, 0, newArray, 0, arrayLength);
                System.Array.Clear(newArray, arrayLength, arrayLength);
                pool.Return(array);
                array = newArray;
                Array = newArray;
            }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\SimpleList.cs</FileName>
        <OffsetRange Start="13761" End="14292"></OffsetRange>
        <LineRange Start="336" End="349"></LineRange>
        <Text>T[] array = Array;
            int count = Count;
            int arrayLength = array.Length;

            if (Count &gt;= arrayLength)
            {
                arrayLength = arrayLength == 0 ? 1 : arrayLength;
                T[] newArray = pool.Get(arrayLength * 2);
                System.Array.Copy(array, 0, newArray, 0, arrayLength);
                System.Array.Clear(newArray, arrayLength, arrayLength);
                pool.Return(array);
                array = newArray;
                Array = newArray;
            }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="189">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\Array2DTests.cs</FileName>
        <OffsetRange Start="4885" End="5241"></OffsetRange>
        <LineRange Start="166" End="179"></LineRange>
        <Text>Array2D&lt;int&gt; mockArray = new Array2D&lt;int&gt;(5, 2)
            {
                [0, 0] = 0,
                [1, 0] = 1,
                [2, 0] = 2,
                [3, 0] = 3,
                [4, 0] = 4,

                [0, 1] = 5,
                [1, 1] = 6,
                [2, 1] = 7,
                [3, 1] = 8,
                [4, 1] = 9
            };</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\Array2DTests.cs</FileName>
        <OffsetRange Start="5554" End="5910"></OffsetRange>
        <LineRange Start="192" End="205"></LineRange>
        <Text>Array2D&lt;int&gt; mockArray = new Array2D&lt;int&gt;(5, 2)
            {
                [0, 0] = 0,
                [1, 0] = 1,
                [2, 0] = 2,
                [3, 0] = 3,
                [4, 0] = 4,

                [0, 1] = 5,
                [1, 1] = 6,
                [2, 1] = 7,
                [3, 1] = 8,
                [4, 1] = 9
            };</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="189">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="2765" End="3376"></OffsetRange>
        <LineRange Start="77" End="89"></LineRange>
        <Text>int[] newSparseArray = new int[newCapacity];
                Array.Copy(SparseArray, 0, newSparseArray, 0, currentCapacity);
                SparseArray = newSparseArray;

                int[] newDenseArray = new int[newCapacity];
                Array.Copy(DenseArray, 0, newDenseArray, 0, currentCapacity);
                DenseArray = newDenseArray;

                for (int i = currentCapacity; i &lt; newCapacity; i++)
                {
                    SparseArray[i] = i + 1; // Build the free list chain.
                    DenseArray[i] = -1; // Set new dense indices as unclaimed.
                }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="29198" End="29769"></OffsetRange>
        <LineRange Start="674" End="686"></LineRange>
        <Text>int[] newSparseArray = new int[newCapacity];
            Array.Copy(SparseArray, 0, newSparseArray, 0, currentCapacity);
            SparseArray = newSparseArray;

            int[] newDenseArray = new int[newCapacity];
            Array.Copy(DenseArray, 0, newDenseArray, 0, currentCapacity);
            DenseArray = newDenseArray;

            for (int i = currentCapacity; i &lt; newCapacity; i++)
            {
                DenseArray[i] = -1; // Set new dense indices as unclaimed.
                SparseArray[i] = i + 1; // Build the free list chain.
            }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="186">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\NativeSparseSet.cs</FileName>
        <OffsetRange Start="20563" End="21777"></OffsetRange>
        <LineRange Start="459" End="483"></LineRange>
        <Text>/// &lt;summary&gt;
        ///     Removes the associated sparse/dense index pair from active use.
        /// &lt;/summary&gt;
        /// &lt;param name="denseIndexToRemove"&gt;The dense index associated with the sparse index to remove.&lt;/param&gt;
        /// &lt;param name="versionArray"&gt;The array where version numbers to check against are stored.&lt;/param&gt;
        public void RemoveUncheckedFromDenseIndex(int denseIndexToRemove, ulong[] versionArray)
        {
            int sparseIndexToRemove = DenseArray[denseIndexToRemove];
            int newLength = Count - 1;
            int sparseIndexBeingSwapped = DenseArray[newLength];

            // Swap the entry being removed with the last entry.
            SparseArray[sparseIndexBeingSwapped] = denseIndexToRemove;
            DenseArray[denseIndexToRemove] = sparseIndexBeingSwapped;

            // Clear the dense  index, for debugging purposes
            DenseArray[newLength] = -1;

            // Add the sparse index to the free list.
            SparseArray[sparseIndexToRemove] = FreeIndex;
            versionArray[sparseIndexToRemove] = versionArray[sparseIndexToRemove] + 1;
            FreeIndex = sparseIndexToRemove;

            Count = newLength;
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="19535" End="20749"></OffsetRange>
        <LineRange Start="451" End="475"></LineRange>
        <Text>/// &lt;summary&gt;
        ///     Removes the associated sparse/dense index pair from active use.
        /// &lt;/summary&gt;
        /// &lt;param name="denseIndexToRemove"&gt;The dense index associated with the sparse index to remove.&lt;/param&gt;
        /// &lt;param name="versionArray"&gt;The array where version numbers to check against are stored.&lt;/param&gt;
        public void RemoveUncheckedFromDenseIndex(int denseIndexToRemove, ulong[] versionArray)
        {
            int sparseIndexToRemove = DenseArray[denseIndexToRemove];
            int newLength = Count - 1;
            int sparseIndexBeingSwapped = DenseArray[newLength];

            // Swap the entry being removed with the last entry.
            SparseArray[sparseIndexBeingSwapped] = denseIndexToRemove;
            DenseArray[denseIndexToRemove] = sparseIndexBeingSwapped;

            // Clear the dense  index, for debugging purposes
            DenseArray[newLength] = -1;

            // Add the sparse index to the free list.
            SparseArray[sparseIndexToRemove] = FreeIndex;
            versionArray[sparseIndexToRemove] = versionArray[sparseIndexToRemove] + 1;
            FreeIndex = sparseIndexToRemove;

            Count = newLength;
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="185">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\FreeList.cs</FileName>
        <OffsetRange Start="2694" End="3306"></OffsetRange>
        <LineRange Start="75" End="94"></LineRange>
        <Text>bool needsExpansion = currentIndex &gt;= oldLength;
            if (needsExpansion)
            {
                int[] newIndices = new int[expandedLength];
                Array.Copy(Indices, 0, newIndices, 0, oldLength);
                Indices = newIndices;

                for (int i = oldLength; i &lt; expandedLength; i++)
                {
                    Indices[i] = i + 1;
                }
            }

            CurrentFreeIndex = Indices[currentIndex];
            Indices[currentIndex] = data;
            ++Count;

            allocatedIndex = currentIndex;

            return needsExpansion;</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\FreeList.cs</FileName>
        <OffsetRange Start="3997" End="4609"></OffsetRange>
        <LineRange Start="110" End="129"></LineRange>
        <Text>bool needsExpansion = currentIndex &gt;= oldLength;
            if (needsExpansion)
            {
                int[] newIndices = new int[expandedLength];
                Array.Copy(Indices, 0, newIndices, 0, oldLength);
                Indices = newIndices;

                for (int i = oldLength; i &lt; expandedLength; i++)
                {
                    Indices[i] = i + 1;
                }
            }

            CurrentFreeIndex = Indices[currentIndex];
            Indices[currentIndex] = data;
            ++Count;

            allocatedIndex = currentIndex;

            return needsExpansion;</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="183">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="55295" End="55932"></OffsetRange>
        <LineRange Start="1298" End="1313"></LineRange>
        <Text>int nextFreeIndex = SparseArray[indexToClaim];

            DenseArray[Count] = indexToClaim; // Point the next dense id at our newly claimed sparse index.
            SparseArray[indexToClaim] = Count; // Point our newly claimed sparse index at the dense index.

            array0[Count] = obj0;
            array1[Count] = obj1;
            array2[Count] = obj2;
            array3[Count] = obj3;
            array4[Count] = obj4;
            array5[Count] = obj5;
            array6[Count] = obj6;
            array7[Count] = obj7;

            ++Count;
            FreeIndex = nextFreeIndex; // Set the free list head for next time.</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="63094" End="63730"></OffsetRange>
        <LineRange Start="1489" End="1503"></LineRange>
        <Text>int nextFreeIndex = SparseArray[indexToClaim];
            DenseArray[Count] = indexToClaim; // Point the next dense id at our newly claimed sparse index.
            SparseArray[indexToClaim] = Count; // Point our newly claimed sparse index at the dense index.

            array0[Count] = obj0;
            array1[Count] = obj1;
            array2[Count] = obj2;
            array3[Count] = obj3;
            array4[Count] = obj4;
            array5[Count] = obj5;
            array6[Count] = obj6;
            array7[Count] = obj7;

            ++Count;
            FreeIndex = nextFreeIndex; // Set the free list head for next time.</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="182">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\StringKeyDictionaryTests.cs</FileName>
        <OffsetRange Start="3761" End="4284"></OffsetRange>
        <LineRange Start="113" End="128"></LineRange>
        <Text>StringKeyDictionary&lt;string&gt; dictionary = new StringKeyDictionary&lt;string&gt;(16);
            string initialKey = "myKey";
            string myValue = "myValue";
            char val = 'A';

            string addedKey = initialKey;
            int initialCapacity = dictionary.Entries.Length;

            string[] keys = new string[initialCapacity];

            for (int i = 0; i &lt; initialCapacity; i++)
            {
                keys[i] = addedKey;
                addedKey += val;
                val++;
            }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\StringKeyDictionaryTests.cs</FileName>
        <OffsetRange Start="6063" End="6586"></OffsetRange>
        <LineRange Start="187" End="202"></LineRange>
        <Text>StringKeyDictionary&lt;string&gt; dictionary = new StringKeyDictionary&lt;string&gt;(16);
            string initialKey = "myKey";
            string myValue = "myValue";
            char val = 'A';

            string addedKey = initialKey;
            int initialCapacity = dictionary.Entries.Length;

            string[] keys = new string[initialCapacity];

            for (int i = 0; i &lt; initialCapacity; i++)
            {
                keys[i] = addedKey;
                addedKey += val;
                val++;
            }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\StringKeyDictionaryTests.cs</FileName>
        <OffsetRange Start="8287" End="8810"></OffsetRange>
        <LineRange Start="259" End="274"></LineRange>
        <Text>StringKeyDictionary&lt;string&gt; dictionary = new StringKeyDictionary&lt;string&gt;(16);
            string initialKey = "myKey";
            string myValue = "myValue";
            char val = 'A';

            string addedKey = initialKey;
            int initialCapacity = dictionary.Entries.Length;

            string[] keys = new string[initialCapacity];

            for (int i = 0; i &lt; initialCapacity; i++)
            {
                keys[i] = addedKey;
                addedKey += val;
                val++;
            }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="180">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\NativeSparseSet.cs</FileName>
        <OffsetRange Start="16147" End="17708"></OffsetRange>
        <LineRange Start="364" End="396"></LineRange>
        <Text>/// &lt;summary&gt;
        ///     Removes the associated sparse/dense index pair from active use.
        ///     Out parameters used to manage parallel data arrays.
        /// &lt;/summary&gt;
        /// &lt;param name="sparseIndexToRemove"&gt;The sparse index to remove.&lt;/param&gt;
        /// &lt;param name="indexToSwapTo"&gt;Replace the data array value at this index with the data array value at indexToSwapFrom.&lt;/param&gt;
        /// &lt;param name="indexToSwapFrom"&gt;
        ///     Set the data array value at this index to default after swapping with the data array
        ///     value at indexToSwapTo.
        /// &lt;/param&gt;
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void RemoveUnchecked(int sparseIndexToRemove, out int indexToSwapTo, out int indexToSwapFrom)
        {
            int denseIndexToRemove = SparseArray[sparseIndexToRemove];
            int newLength = Count - 1;
            int sparseIndexBeingSwapped = DenseArray[newLength];

            // Swap the entry being removed with the last entry.
            SparseArray[sparseIndexBeingSwapped] = denseIndexToRemove;
            DenseArray[denseIndexToRemove] = sparseIndexBeingSwapped;

            // Clear the dense  index, for debugging purposes
            DenseArray[newLength] = -1;

            // Add the sparse index to the free list.
            SparseArray[sparseIndexToRemove] = FreeIndex;
            FreeIndex = sparseIndexToRemove;

            Count = newLength;

            indexToSwapTo = denseIndexToRemove;
            indexToSwapFrom = newLength;
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="15130" End="16691"></OffsetRange>
        <LineRange Start="356" End="388"></LineRange>
        <Text>/// &lt;summary&gt;
        ///     Removes the associated sparse/dense index pair from active use.
        ///     Out parameters used to manage parallel data arrays.
        /// &lt;/summary&gt;
        /// &lt;param name="sparseIndexToRemove"&gt;The sparse index to remove.&lt;/param&gt;
        /// &lt;param name="indexToSwapTo"&gt;Replace the data array value at this index with the data array value at indexToSwapFrom.&lt;/param&gt;
        /// &lt;param name="indexToSwapFrom"&gt;
        ///     Set the data array value at this index to default after swapping with the data array
        ///     value at indexToSwapTo.
        /// &lt;/param&gt;
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void RemoveUnchecked(int sparseIndexToRemove, out int indexToSwapTo, out int indexToSwapFrom)
        {
            int denseIndexToRemove = SparseArray[sparseIndexToRemove];
            int newLength = Count - 1;
            int sparseIndexBeingSwapped = DenseArray[newLength];

            // Swap the entry being removed with the last entry.
            SparseArray[sparseIndexBeingSwapped] = denseIndexToRemove;
            DenseArray[denseIndexToRemove] = sparseIndexBeingSwapped;

            // Clear the dense  index, for debugging purposes
            DenseArray[newLength] = -1;

            // Add the sparse index to the free list.
            SparseArray[sparseIndexToRemove] = FreeIndex;
            FreeIndex = sparseIndexToRemove;

            Count = newLength;

            indexToSwapTo = denseIndexToRemove;
            indexToSwapFrom = newLength;
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="180">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\SimpleListTests.cs</FileName>
        <OffsetRange Start="3936" End="4473"></OffsetRange>
        <LineRange Start="125" End="135"></LineRange>
        <Text>bool evaluate = mockList.Array.Length == 4 &amp;&amp;
                            mockList.Array[0] == 2 &amp;&amp;
                            mockList.Array[1] == 7 &amp;&amp;
                            mockList.Array[2] == 3 &amp;&amp;
                            mockList.Array[3] == 5 &amp;&amp;
                            initialBackingArray[0] == 2 &amp;&amp;
                            initialBackingArray[1] == 7 &amp;&amp;
                            pool.ArrayPools[1].Count == 1 &amp;&amp;
                            pool.ArrayPools[2].Count == 0;

            Assert.IsTrue(evaluate);</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\SimpleListTests.cs</FileName>
        <OffsetRange Start="6412" End="6949"></OffsetRange>
        <LineRange Start="185" End="195"></LineRange>
        <Text>bool evaluate = mockList.Array.Length == 4 &amp;&amp;
                            mockList.Array[0] == 2 &amp;&amp;
                            mockList.Array[1] == 7 &amp;&amp;
                            mockList.Array[2] == 3 &amp;&amp;
                            mockList.Array[3] == 0 &amp;&amp;
                            initialBackingArray[0] == 2 &amp;&amp;
                            initialBackingArray[1] == 7 &amp;&amp;
                            pool.ArrayPools[1].Count == 1 &amp;&amp;
                            pool.ArrayPools[2].Count == 0;

            Assert.IsTrue(evaluate);</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\SimpleListTests.cs</FileName>
        <OffsetRange Start="7821" End="8358"></OffsetRange>
        <LineRange Start="218" End="228"></LineRange>
        <Text>bool evaluate = mockList.Array.Length == 4 &amp;&amp;
                            mockList.Array[0] == 2 &amp;&amp;
                            mockList.Array[1] == 7 &amp;&amp;
                            mockList.Array[2] == 3 &amp;&amp;
                            mockList.Array[3] == 0 &amp;&amp;
                            initialBackingArray[0] == 0 &amp;&amp;
                            initialBackingArray[1] == 0 &amp;&amp;
                            pool.ArrayPools[1].Count == 1 &amp;&amp;
                            pool.ArrayPools[2].Count == 0;

            Assert.IsTrue(evaluate);</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="177">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\StringKeyDictionaryTests.cs</FileName>
        <OffsetRange Start="20015" End="20543"></OffsetRange>
        <LineRange Start="599" End="613"></LineRange>
        <Text>string firstKey = "firstKey";
            string secondKey = "secondKey";
            string myValue = "myValue";

            StringKeyDictionary&lt;string&gt; dictionary = new StringKeyDictionary&lt;string&gt;(16);

            dictionary.AddUnchecked(firstKey, myValue);
            dictionary.AddUnchecked(secondKey, myValue);

            int foundCount = 0;
            bool foundFirst = false;
            bool foundSecond = false;
            int currentIndex = 0;
            int version = 0;
            int dictionaryVersion = 0;</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\StringKeyDictionaryTests.cs</FileName>
        <OffsetRange Start="21250" End="21778"></OffsetRange>
        <LineRange Start="635" End="649"></LineRange>
        <Text>string firstKey = "firstKey";
            string secondKey = "secondKey";
            string myValue = "myValue";

            StringKeyDictionary&lt;string&gt; dictionary = new StringKeyDictionary&lt;string&gt;(16);

            dictionary.AddUnchecked(firstKey, myValue);
            dictionary.AddUnchecked(secondKey, myValue);

            int foundCount = 0;
            bool foundFirst = false;
            bool foundSecond = false;
            int currentIndex = 0;
            int version = 0;
            int dictionaryVersion = 0;</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="177">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\NativeSparseSet.cs</FileName>
        <OffsetRange Start="18683" End="19546"></OffsetRange>
        <LineRange Start="412" End="433"></LineRange>
        <Text>{
            int denseIndexToRemove = SparseArray[sparseIndexToRemove];
            int newLength = Count - 1;
            int sparseIndexBeingSwapped = DenseArray[newLength];

            // Swap the entry being removed with the last entry.
            SparseArray[sparseIndexBeingSwapped] = denseIndexToRemove;
            DenseArray[denseIndexToRemove] = sparseIndexBeingSwapped;

            // Clear the dense  index, for debugging purposes
            DenseArray[newLength] = -1;

            // Add the sparse index to the free list.
            SparseArray[sparseIndexToRemove] = FreeIndex;
            versionArray[sparseIndexToRemove] = versionArray[sparseIndexToRemove] + 1;
            FreeIndex = sparseIndexToRemove;

            Count = newLength;

            indexToSwapTo = denseIndexToRemove;
            indexToSwapFrom = newLength;
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="17655" End="18518"></OffsetRange>
        <LineRange Start="404" End="425"></LineRange>
        <Text>{
            int denseIndexToRemove = SparseArray[sparseIndexToRemove];
            int newLength = Count - 1;
            int sparseIndexBeingSwapped = DenseArray[newLength];

            // Swap the entry being removed with the last entry.
            SparseArray[sparseIndexBeingSwapped] = denseIndexToRemove;
            DenseArray[denseIndexToRemove] = sparseIndexBeingSwapped;

            // Clear the dense  index, for debugging purposes
            DenseArray[newLength] = -1;

            // Add the sparse index to the free list.
            SparseArray[sparseIndexToRemove] = FreeIndex;
            versionArray[sparseIndexToRemove] = versionArray[sparseIndexToRemove] + 1;
            FreeIndex = sparseIndexToRemove;

            Count = newLength;

            indexToSwapTo = denseIndexToRemove;
            indexToSwapFrom = newLength;
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="169">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\NativeSparseSet.cs</FileName>
        <OffsetRange Start="23841" End="24655"></OffsetRange>
        <LineRange Start="528" End="548"></LineRange>
        <Text>{
            int sparseIndexToRemove = DenseArray[denseIndexToRemove];
            int newLength = Count - 1;
            int sparseIndexBeingSwapped = DenseArray[newLength];

            // Swap the entry being removed with the last entry.
            SparseArray[sparseIndexBeingSwapped] = denseIndexToRemove;
            DenseArray[denseIndexToRemove] = sparseIndexBeingSwapped;

            // Clear the dense  index, for debugging purposes
            DenseArray[newLength] = -1;

            // Add the sparse index to the free list.
            SparseArray[sparseIndexToRemove] = FreeIndex;
            versionArray[sparseIndexToRemove] = versionArray[sparseIndexToRemove] + 1;
            FreeIndex = sparseIndexToRemove;

            Count = newLength;

            indexToSwapFrom = newLength;
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="22790" End="23604"></OffsetRange>
        <LineRange Start="519" End="539"></LineRange>
        <Text>{
            int sparseIndexToRemove = DenseArray[denseIndexToRemove];
            int newLength = Count - 1;
            int sparseIndexBeingSwapped = DenseArray[newLength];

            // Swap the entry being removed with the last entry.
            SparseArray[sparseIndexBeingSwapped] = denseIndexToRemove;
            DenseArray[denseIndexToRemove] = sparseIndexBeingSwapped;

            // Clear the dense  index, for debugging purposes
            DenseArray[newLength] = -1;

            // Add the sparse index to the free list.
            SparseArray[sparseIndexToRemove] = FreeIndex;
            versionArray[sparseIndexToRemove] = versionArray[sparseIndexToRemove] + 1;
            FreeIndex = sparseIndexToRemove;

            Count = newLength;

            indexToSwapFrom = newLength;
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="168">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\SimpleList.cs</FileName>
        <OffsetRange Start="4184" End="4643"></OffsetRange>
        <LineRange Start="110" End="122"></LineRange>
        <Text>T[] array = Array;
            int count = Count;
            int arrayLength = array.Length;

            if (Count &gt;= arrayLength)
            {
                arrayLength = arrayLength == 0 ? 1 : arrayLength;
                T[] newArray = pool.Get(arrayLength * 2);
                System.Array.Copy(array, 0, newArray, 0, arrayLength);
                pool.Return(array);
                array = newArray;
                Array = newArray;
            }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\SimpleList.cs</FileName>
        <OffsetRange Start="11235" End="11694"></OffsetRange>
        <LineRange Start="279" End="291"></LineRange>
        <Text>T[] array = Array;
            int count = Count;
            int arrayLength = array.Length;

            if (Count &gt;= arrayLength)
            {
                arrayLength = arrayLength == 0 ? 1 : arrayLength;
                T[] newArray = pool.Get(arrayLength * 2);
                System.Array.Copy(array, 0, newArray, 0, arrayLength);
                pool.Return(array);
                array = newArray;
                Array = newArray;
            }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="168">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\StringKeyDictionary.cs</FileName>
        <OffsetRange Start="11126" End="11707"></OffsetRange>
        <LineRange Start="324" End="340"></LineRange>
        <Text>if (key == null) throw new ArgumentNullException();

            int hashCode = key.GetStableHashCode() &amp; 0x7FFFFFFF;
            int bucketIndex = hashCode % Buckets.Length;
            int nextKeyIndex = Buckets[bucketIndex];

            while (nextKeyIndex != -1)
            {
                ref StringKeyEntry&lt;TValue&gt; currEntry = ref Entries[nextKeyIndex];
                nextKeyIndex = currEntry.Next;

                if (currEntry.Key == key)
                {
                    currEntry.Value = value;
                    return true;
                }
            }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\StringKeyDictionary.cs</FileName>
        <OffsetRange Start="15850" End="16431"></OffsetRange>
        <LineRange Start="469" End="485"></LineRange>
        <Text>if (key == null) throw new ArgumentNullException();

            int hashCode = key.GetStableHashCode() &amp; 0x7FFFFFFF;
            int bucketIndex = hashCode % Buckets.Length;
            int nextKeyIndex = Buckets[bucketIndex];

            while (nextKeyIndex != -1)
            {
                ref StringKeyEntry&lt;TValue&gt; currEntry = ref Entries[nextKeyIndex];
                nextKeyIndex = currEntry.Next;

                if (currEntry.Key == key)
                {
                    value = currEntry.Value;
                    return true;
                }
            }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="168">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="51674" End="52277"></OffsetRange>
        <LineRange Start="1212" End="1226"></LineRange>
        <Text>int nextFreeIndex = SparseArray[indexToClaim];

            DenseArray[Count] = indexToClaim; // Point the next dense id at our newly claimed sparse index.
            SparseArray[indexToClaim] = Count; // Point our newly claimed sparse index at the dense index.

            array0[Count] = obj0;
            array1[Count] = obj1;
            array2[Count] = obj2;
            array3[Count] = obj3;
            array4[Count] = obj4;
            array5[Count] = obj5;
            array6[Count] = obj6;

            ++Count;
            FreeIndex = nextFreeIndex; // Set the free list head for next time.</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="61938" End="62540"></OffsetRange>
        <LineRange Start="1462" End="1475"></LineRange>
        <Text>int nextFreeIndex = SparseArray[indexToClaim];
            DenseArray[Count] = indexToClaim; // Point the next dense id at our newly claimed sparse index.
            SparseArray[indexToClaim] = Count; // Point our newly claimed sparse index at the dense index.

            array0[Count] = obj0;
            array1[Count] = obj1;
            array2[Count] = obj2;
            array3[Count] = obj3;
            array4[Count] = obj4;
            array5[Count] = obj5;
            array6[Count] = obj6;

            ++Count;
            FreeIndex = nextFreeIndex; // Set the free list head for next time.</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="165">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\NativeSparseSet.cs</FileName>
        <OffsetRange Start="21787" End="23096"></OffsetRange>
        <LineRange Start="485" End="514"></LineRange>
        <Text>/// &lt;summary&gt;
        ///     Removes the associated sparse/dense index pair from active use.
        ///     Out parameter used to manage parallel data arrays.
        /// &lt;/summary&gt;
        /// &lt;param name="denseIndexToRemove"&gt;The sparse index to remove.&lt;/param&gt;
        /// &lt;param name="indexToSwapFrom"&gt;
        ///     Set the data array value at this index to default after swapping with the data array
        ///     value at denseIndexToRemove.
        /// &lt;/param&gt;
        public void RemoveUncheckedFromDenseIndex(int denseIndexToRemove, out int indexToSwapFrom)
        {
            int sparseIndexToRemove = DenseArray[denseIndexToRemove];
            int newLength = Count - 1;
            int sparseIndexBeingSwapped = DenseArray[newLength];

            // Swap the entry being removed with the last entry.
            SparseArray[sparseIndexBeingSwapped] = denseIndexToRemove;
            DenseArray[denseIndexToRemove] = sparseIndexBeingSwapped;

            // Clear the dense  index, for debugging purposes
            DenseArray[newLength] = -1;

            // Add the sparse index to the free list.
            SparseArray[sparseIndexToRemove] = FreeIndex;
            FreeIndex = sparseIndexToRemove;

            Count = newLength;

            indexToSwapFrom = newLength;
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="20759" End="22068"></OffsetRange>
        <LineRange Start="477" End="506"></LineRange>
        <Text>/// &lt;summary&gt;
        ///     Removes the associated sparse/dense index pair from active use.
        ///     Out parameter used to manage parallel data arrays.
        /// &lt;/summary&gt;
        /// &lt;param name="denseIndexToRemove"&gt;The sparse index to remove.&lt;/param&gt;
        /// &lt;param name="indexToSwapFrom"&gt;
        ///     Set the data array value at this index to default after swapping with the data array
        ///     value at denseIndexToRemove.
        /// &lt;/param&gt;
        public void RemoveUncheckedFromDenseIndex(int denseIndexToRemove, out int indexToSwapFrom)
        {
            int sparseIndexToRemove = DenseArray[denseIndexToRemove];
            int newLength = Count - 1;
            int sparseIndexBeingSwapped = DenseArray[newLength];

            // Swap the entry being removed with the last entry.
            SparseArray[sparseIndexBeingSwapped] = denseIndexToRemove;
            DenseArray[denseIndexToRemove] = sparseIndexBeingSwapped;

            // Clear the dense  index, for debugging purposes
            DenseArray[newLength] = -1;

            // Add the sparse index to the free list.
            SparseArray[sparseIndexToRemove] = FreeIndex;
            FreeIndex = sparseIndexToRemove;

            Count = newLength;

            indexToSwapFrom = newLength;
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="164">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Mathematics\Random\WELL1024a.cs</FileName>
        <OffsetRange Start="2274" End="2615"></OffsetRange>
        <LineRange Start="59" End="67"></LineRange>
        <Text>Index = 0;
            SampleCount = 0;
            State = new NativeArray&lt;uint&gt;(32, Allocator.Persistent);
            uint* ptr = (uint*)State.GetUnsafePtr();
            ptr[0] = OriginalSeed &amp; 4294967295u;
            for (int i = 1; i &lt; 32; ++i)
            {
                ptr[i] = (69069u * ptr[i - 1]) &amp; 4294967295u;
            }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Mathematics\Random\WELL1024a.cs</FileName>
        <OffsetRange Start="2976" End="3317"></OffsetRange>
        <LineRange Start="79" End="87"></LineRange>
        <Text>Index = 0;
            SampleCount = 0;
            State = new NativeArray&lt;uint&gt;(32, Allocator.Persistent);
            uint* ptr = (uint*)State.GetUnsafePtr();
            ptr[0] = OriginalSeed &amp; 4294967295u;
            for (int i = 1; i &lt; 32; ++i)
            {
                ptr[i] = (69069u * ptr[i - 1]) &amp; 4294967295u;
            }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Mathematics\Random\WELL1024a.cs</FileName>
        <OffsetRange Start="4347" End="4688"></OffsetRange>
        <LineRange Start="114" End="122"></LineRange>
        <Text>Index = 0;
            SampleCount = 0;
            State = new NativeArray&lt;uint&gt;(32, Allocator.Persistent);
            uint* ptr = (uint*)State.GetUnsafePtr();
            ptr[0] = OriginalSeed &amp; 4294967295u;
            for (int i = 1; i &lt; 32; ++i)
            {
                ptr[i] = (69069u * ptr[i - 1]) &amp; 4294967295u;
            }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="161">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\NativeSparseSet.cs</FileName>
        <OffsetRange Start="15364" End="16137"></OffsetRange>
        <LineRange Start="344" End="362"></LineRange>
        <Text>{
            int denseIndexToRemove = SparseArray[sparseIndexToRemove];
            int newLength = Count - 1;
            int sparseIndexBeingSwapped = DenseArray[newLength];

            // Swap the entry being removed with the last entry.
            SparseArray[sparseIndexBeingSwapped] = denseIndexToRemove;
            DenseArray[denseIndexToRemove] = sparseIndexBeingSwapped;

            // Clear the dense  index, for debugging purposes
            DenseArray[newLength] = -1;

            // Add the sparse index to the free list.
            SparseArray[sparseIndexToRemove] = FreeIndex;
            versionArray[sparseIndexToRemove] = versionArray[sparseIndexToRemove] + 1;
            FreeIndex = sparseIndexToRemove;

            Count = newLength;
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="14347" End="15120"></OffsetRange>
        <LineRange Start="336" End="354"></LineRange>
        <Text>{
            int denseIndexToRemove = SparseArray[sparseIndexToRemove];
            int newLength = Count - 1;
            int sparseIndexBeingSwapped = DenseArray[newLength];

            // Swap the entry being removed with the last entry.
            SparseArray[sparseIndexBeingSwapped] = denseIndexToRemove;
            DenseArray[denseIndexToRemove] = sparseIndexBeingSwapped;

            // Clear the dense  index, for debugging purposes
            DenseArray[newLength] = -1;

            // Add the sparse index to the free list.
            SparseArray[sparseIndexToRemove] = FreeIndex;
            versionArray[sparseIndexToRemove] = versionArray[sparseIndexToRemove] + 1;
            FreeIndex = sparseIndexToRemove;

            Count = newLength;
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="159">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\SimpleListExtensionsTests.cs</FileName>
        <OffsetRange Start="8459" End="8889"></OffsetRange>
        <LineRange Start="246" End="255"></LineRange>
        <Text>object searchItem = new object();
            SimpleList&lt;object&gt; listItems = new SimpleList&lt;object&gt;(6);

            // Build test rig
            listItems.AddUnchecked(new object());
            listItems.AddUnchecked(searchItem);
            listItems.AddUnchecked(new object());
            listItems.AddUnchecked(new object());
            listItems.AddUnchecked(searchItem);
            listItems.AddUnchecked(new object());</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\SimpleListExtensionsTests.cs</FileName>
        <OffsetRange Start="9261" End="9691"></OffsetRange>
        <LineRange Start="269" End="278"></LineRange>
        <Text>object searchItem = new object();
            SimpleList&lt;object&gt; listItems = new SimpleList&lt;object&gt;(6);

            // Build test rig
            listItems.AddUnchecked(new object());
            listItems.AddUnchecked(searchItem);
            listItems.AddUnchecked(new object());
            listItems.AddUnchecked(new object());
            listItems.AddUnchecked(searchItem);
            listItems.AddUnchecked(new object());</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\SimpleListExtensionsTests.cs</FileName>
        <OffsetRange Start="9951" End="10381"></OffsetRange>
        <LineRange Start="289" End="298"></LineRange>
        <Text>object searchItem = new object();
            SimpleList&lt;object&gt; listItems = new SimpleList&lt;object&gt;(6);

            // Build test rig
            listItems.AddUnchecked(new object());
            listItems.AddUnchecked(searchItem);
            listItems.AddUnchecked(new object());
            listItems.AddUnchecked(new object());
            listItems.AddUnchecked(searchItem);
            listItems.AddUnchecked(new object());</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\SimpleListExtensionsTests.cs</FileName>
        <OffsetRange Start="10768" End="11198"></OffsetRange>
        <LineRange Start="312" End="321"></LineRange>
        <Text>object searchItem = new object();
            SimpleList&lt;object&gt; listItems = new SimpleList&lt;object&gt;(6);

            // Build test rig
            listItems.AddUnchecked(new object());
            listItems.AddUnchecked(searchItem);
            listItems.AddUnchecked(new object());
            listItems.AddUnchecked(new object());
            listItems.AddUnchecked(searchItem);
            listItems.AddUnchecked(new object());</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\SimpleListExtensionsTests.cs</FileName>
        <OffsetRange Start="11455" End="11885"></OffsetRange>
        <LineRange Start="332" End="341"></LineRange>
        <Text>object searchItem = new object();
            SimpleList&lt;object&gt; listItems = new SimpleList&lt;object&gt;(6);

            // Build test rig
            listItems.AddUnchecked(new object());
            listItems.AddUnchecked(searchItem);
            listItems.AddUnchecked(new object());
            listItems.AddUnchecked(new object());
            listItems.AddUnchecked(searchItem);
            listItems.AddUnchecked(new object());</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\SimpleListExtensionsTests.cs</FileName>
        <OffsetRange Start="12185" End="12615"></OffsetRange>
        <LineRange Start="354" End="363"></LineRange>
        <Text>object searchItem = new object();
            SimpleList&lt;object&gt; listItems = new SimpleList&lt;object&gt;(6);

            // Build test rig
            listItems.AddUnchecked(new object());
            listItems.AddUnchecked(searchItem);
            listItems.AddUnchecked(new object());
            listItems.AddUnchecked(new object());
            listItems.AddUnchecked(searchItem);
            listItems.AddUnchecked(new object());</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\SimpleListExtensionsTests.cs</FileName>
        <OffsetRange Start="12922" End="13352"></OffsetRange>
        <LineRange Start="376" End="385"></LineRange>
        <Text>object searchItem = new object();
            SimpleList&lt;object&gt; listItems = new SimpleList&lt;object&gt;(6);

            // Build test rig
            listItems.AddUnchecked(new object());
            listItems.AddUnchecked(searchItem);
            listItems.AddUnchecked(new object());
            listItems.AddUnchecked(new object());
            listItems.AddUnchecked(searchItem);
            listItems.AddUnchecked(new object());</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\SimpleListExtensionsTests.cs</FileName>
        <OffsetRange Start="13722" End="14152"></OffsetRange>
        <LineRange Start="399" End="408"></LineRange>
        <Text>object searchItem = new object();
            SimpleList&lt;object&gt; listItems = new SimpleList&lt;object&gt;(6);

            // Build test rig
            listItems.AddUnchecked(new object());
            listItems.AddUnchecked(searchItem);
            listItems.AddUnchecked(new object());
            listItems.AddUnchecked(new object());
            listItems.AddUnchecked(searchItem);
            listItems.AddUnchecked(new object());</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\SimpleListExtensionsTests.cs</FileName>
        <OffsetRange Start="14410" End="14840"></OffsetRange>
        <LineRange Start="419" End="428"></LineRange>
        <Text>object searchItem = new object();
            SimpleList&lt;object&gt; listItems = new SimpleList&lt;object&gt;(6);

            // Build test rig
            listItems.AddUnchecked(new object());
            listItems.AddUnchecked(searchItem);
            listItems.AddUnchecked(new object());
            listItems.AddUnchecked(new object());
            listItems.AddUnchecked(searchItem);
            listItems.AddUnchecked(new object());</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\SimpleListExtensionsTests.cs</FileName>
        <OffsetRange Start="15225" End="15655"></OffsetRange>
        <LineRange Start="442" End="451"></LineRange>
        <Text>object searchItem = new object();
            SimpleList&lt;object&gt; listItems = new SimpleList&lt;object&gt;(6);

            // Build test rig
            listItems.AddUnchecked(new object());
            listItems.AddUnchecked(searchItem);
            listItems.AddUnchecked(new object());
            listItems.AddUnchecked(new object());
            listItems.AddUnchecked(searchItem);
            listItems.AddUnchecked(new object());</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="153">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="48278" End="48847"></OffsetRange>
        <LineRange Start="1131" End="1144"></LineRange>
        <Text>int nextFreeIndex = SparseArray[indexToClaim];

            DenseArray[Count] = indexToClaim; // Point the next dense id at our newly claimed sparse index.
            SparseArray[indexToClaim] = Count; // Point our newly claimed sparse index at the dense index.

            array0[Count] = obj0;
            array1[Count] = obj1;
            array2[Count] = obj2;
            array3[Count] = obj3;
            array4[Count] = obj4;
            array5[Count] = obj5;

            ++Count;
            FreeIndex = nextFreeIndex; // Set the free list head for next time.</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="60842" End="61410"></OffsetRange>
        <LineRange Start="1436" End="1448"></LineRange>
        <Text>int nextFreeIndex = SparseArray[indexToClaim];
            DenseArray[Count] = indexToClaim; // Point the next dense id at our newly claimed sparse index.
            SparseArray[indexToClaim] = Count; // Point our newly claimed sparse index at the dense index.

            array0[Count] = obj0;
            array1[Count] = obj1;
            array2[Count] = obj2;
            array3[Count] = obj3;
            array4[Count] = obj4;
            array5[Count] = obj5;

            ++Count;
            FreeIndex = nextFreeIndex; // Set the free list head for next time.</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="150">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\CircularBufferTests.cs</FileName>
        <OffsetRange Start="607" End="963"></OffsetRange>
        <LineRange Start="19" End="29"></LineRange>
        <Text>mockData.Add(4);
            mockData.Add(3);
            mockData.Add(2);
            mockData.Add(1);

            bool evaluate = mockData.Array[0] == 4 &amp;&amp;
                            mockData.Array[1] == 3 &amp;&amp;
                            mockData.Array[2] == 2 &amp;&amp;
                            mockData.Array[3] == 1;

            Assert.IsTrue(evaluate);</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\CircularBufferTests.cs</FileName>
        <OffsetRange Start="1193" End="1549"></OffsetRange>
        <LineRange Start="38" End="48"></LineRange>
        <Text>mockData.Add(3);
            mockData.Add(2);
            mockData.Add(1);
            mockData.Add(0);

            bool evaluate = mockData.Array[0] == 0 &amp;&amp;
                            mockData.Array[1] == 3 &amp;&amp;
                            mockData.Array[2] == 2 &amp;&amp;
                            mockData.Array[3] == 1;

            Assert.IsTrue(evaluate);</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="150">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\NativeSparseSet.cs</FileName>
        <OffsetRange Start="13846" End="14859"></OffsetRange>
        <LineRange Start="312" End="335"></LineRange>
        <Text>/// &lt;summary&gt;
        ///     Removes the associated sparse/dense index pair from active use.
        /// &lt;/summary&gt;
        /// &lt;param name="sparseIndexToRemove"&gt;The sparse index to remove.&lt;/param&gt;
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void RemoveUnchecked(int sparseIndexToRemove)
        {
            int denseIndexToRemove = SparseArray[sparseIndexToRemove];
            int newLength = Count - 1;
            int sparseIndexBeingSwapped = DenseArray[newLength];

            // Swap the entry being removed with the last entry.
            SparseArray[sparseIndexBeingSwapped] = denseIndexToRemove;
            DenseArray[denseIndexToRemove] = sparseIndexBeingSwapped;

            // Clear the dense  index, for debugging purposes
            DenseArray[newLength] = -1;

            // Add the sparse index to the free list.
            SparseArray[sparseIndexToRemove] = FreeIndex;
            FreeIndex = sparseIndexToRemove;

            Count = newLength;
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="12840" End="13853"></OffsetRange>
        <LineRange Start="304" End="327"></LineRange>
        <Text>/// &lt;summary&gt;
        ///     Removes the associated sparse/dense index pair from active use.
        /// &lt;/summary&gt;
        /// &lt;param name="sparseIndexToRemove"&gt;The sparse index to remove.&lt;/param&gt;
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void RemoveUnchecked(int sparseIndexToRemove)
        {
            int denseIndexToRemove = SparseArray[sparseIndexToRemove];
            int newLength = Count - 1;
            int sparseIndexBeingSwapped = DenseArray[newLength];

            // Swap the entry being removed with the last entry.
            SparseArray[sparseIndexBeingSwapped] = denseIndexToRemove;
            DenseArray[denseIndexToRemove] = sparseIndexBeingSwapped;

            // Clear the dense  index, for debugging purposes
            DenseArray[newLength] = -1;

            // Add the sparse index to the free list.
            SparseArray[sparseIndexToRemove] = FreeIndex;
            FreeIndex = sparseIndexToRemove;

            Count = newLength;
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="150">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\NativeSparseSet.cs</FileName>
        <OffsetRange Start="19556" End="20553"></OffsetRange>
        <LineRange Start="435" End="457"></LineRange>
        <Text>/// &lt;summary&gt;
        ///     Removes the associated sparse/dense index pair from active use.
        /// &lt;/summary&gt;
        /// &lt;param name="denseIndexToRemove"&gt;The dense index associated with the sparse index to remove.&lt;/param&gt;
        public void RemoveUncheckedFromDenseIndex(int denseIndexToRemove)
        {
            int sparseIndexToRemove = DenseArray[denseIndexToRemove];
            int newLength = Count - 1;
            int sparseIndexBeingSwapped = DenseArray[newLength];

            // Swap the entry being removed with the last entry.
            SparseArray[sparseIndexBeingSwapped] = denseIndexToRemove;
            DenseArray[denseIndexToRemove] = sparseIndexBeingSwapped;

            // Clear the dense  index, for debugging purposes
            DenseArray[newLength] = -1;

            // Add the sparse index to the free list.
            SparseArray[sparseIndexToRemove] = FreeIndex;
            FreeIndex = sparseIndexToRemove;

            Count = newLength;
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="18528" End="19525"></OffsetRange>
        <LineRange Start="427" End="449"></LineRange>
        <Text>/// &lt;summary&gt;
        ///     Removes the associated sparse/dense index pair from active use.
        /// &lt;/summary&gt;
        /// &lt;param name="denseIndexToRemove"&gt;The dense index associated with the sparse index to remove.&lt;/param&gt;
        public void RemoveUncheckedFromDenseIndex(int denseIndexToRemove)
        {
            int sparseIndexToRemove = DenseArray[denseIndexToRemove];
            int newLength = Count - 1;
            int sparseIndexBeingSwapped = DenseArray[newLength];

            // Swap the entry being removed with the last entry.
            SparseArray[sparseIndexBeingSwapped] = denseIndexToRemove;
            DenseArray[denseIndexToRemove] = sparseIndexBeingSwapped;

            // Clear the dense  index, for debugging purposes
            DenseArray[newLength] = -1;

            // Add the sparse index to the free list.
            SparseArray[sparseIndexToRemove] = FreeIndex;
            FreeIndex = sparseIndexToRemove;

            Count = newLength;
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="150">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="65778" End="66327"></OffsetRange>
        <LineRange Start="1556" End="1565"></LineRange>
        <Text>int denseIndexToRemove = SparseArray[sparseIndexToRemove];
            int newLength = Count - 1;
            int sparseIndexBeingSwapped = DenseArray[newLength];

            // Swap the entry being removed with the last entry.
            SparseArray[sparseIndexBeingSwapped] = denseIndexToRemove;
            DenseArray[denseIndexToRemove] = sparseIndexBeingSwapped;
            array0[denseIndexToRemove] = array0[newLength];
            array1[denseIndexToRemove] = array1[newLength];
            array2[denseIndexToRemove] = array2[newLength];</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="66918" End="67467"></OffsetRange>
        <LineRange Start="1583" End="1592"></LineRange>
        <Text>int denseIndexToRemove = SparseArray[sparseIndexToRemove];
            int newLength = Count - 1;
            int sparseIndexBeingSwapped = DenseArray[newLength];

            // Swap the entry being removed with the last entry.
            SparseArray[sparseIndexBeingSwapped] = denseIndexToRemove;
            DenseArray[denseIndexToRemove] = sparseIndexBeingSwapped;
            array0[denseIndexToRemove] = array0[newLength];
            array1[denseIndexToRemove] = array1[newLength];
            array2[denseIndexToRemove] = array2[newLength];</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="146">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\Array2D.cs</FileName>
        <OffsetRange Start="8657" End="9412"></OffsetRange>
        <LineRange Start="241" End="258"></LineRange>
        <Text>/// &lt;summary&gt;
        ///     Creates a copy of the internal array as a traditional multi-dimensional array.
        /// &lt;/summary&gt;
        /// &lt;remarks&gt;Useful for scenarios where fills need to be done with [,] structured multi-dimensional arrays.&lt;/remarks&gt;
        /// &lt;returns&gt;A new copy of the backing &lt;see cref="Array" /&gt; in multi-dimensional form.&lt;/returns&gt;
        public T[,] ToMultiDimensionalArray()
        {
            T[,] returnArray = new T[RowCount, ColumnCount];
            for (int x = 0; x &lt; RowCount; x++)
            {
                for (int y = 0; y &lt; ColumnCount; y++)
                {
                    returnArray[x, y] = Array[x * ColumnCount + y];
                }
            }

            return returnArray;
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\NativeArray2D.cs</FileName>
        <OffsetRange Start="6860" End="7615"></OffsetRange>
        <LineRange Start="170" End="187"></LineRange>
        <Text>/// &lt;summary&gt;
        ///     Creates a copy of the internal array as a traditional multi-dimensional array.
        /// &lt;/summary&gt;
        /// &lt;remarks&gt;Useful for scenarios where fills need to be done with [,] structured multi-dimensional arrays.&lt;/remarks&gt;
        /// &lt;returns&gt;A new copy of the backing &lt;see cref="Array" /&gt; in multi-dimensional form.&lt;/returns&gt;
        public T[,] ToMultiDimensionalArray()
        {
            T[,] returnArray = new T[RowCount, ColumnCount];
            for (int x = 0; x &lt; RowCount; x++)
            {
                for (int y = 0; y &lt; ColumnCount; y++)
                {
                    returnArray[x, y] = Array[x * ColumnCount + y];
                }
            }

            return returnArray;
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="146">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\SimpleListTests.cs</FileName>
        <OffsetRange Start="10198" End="10538"></OffsetRange>
        <LineRange Start="301" End="313"></LineRange>
        <Text>{
            SimpleList&lt;int&gt; mockList = new SimpleList&lt;int&gt;(3);

            mockList.AddUnchecked(0);
            mockList.AddUnchecked(1);
            mockList.AddUnchecked(2);

            mockList.RemoveAt(2);

            bool evaluate = (mockList.Count == 2 &amp;&amp; mockList.Array[1] == 1);

            Assert.IsTrue(evaluate);
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\SimpleListTests.cs</FileName>
        <OffsetRange Start="10661" End="11001"></OffsetRange>
        <LineRange Start="318" End="330"></LineRange>
        <Text>{
            SimpleList&lt;int&gt; mockList = new SimpleList&lt;int&gt;(3);

            mockList.AddUnchecked(0);
            mockList.AddUnchecked(1);
            mockList.AddUnchecked(2);

            mockList.RemoveAt(0);

            bool evaluate = (mockList.Count == 2 &amp;&amp; mockList.Array[0] == 1);

            Assert.IsTrue(evaluate);
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\SimpleListTests.cs</FileName>
        <OffsetRange Start="11125" End="11465"></OffsetRange>
        <LineRange Start="335" End="347"></LineRange>
        <Text>{
            SimpleList&lt;int&gt; mockList = new SimpleList&lt;int&gt;(3);

            mockList.AddUnchecked(0);
            mockList.AddUnchecked(1);
            mockList.AddUnchecked(2);

            mockList.RemoveAt(1);

            bool evaluate = (mockList.Count == 2 &amp;&amp; mockList.Array[1] == 2);

            Assert.IsTrue(evaluate);
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="145">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\SimpleListExtensionsTests.cs</FileName>
        <OffsetRange Start="6674" End="7056"></OffsetRange>
        <LineRange Start="193" End="201"></LineRange>
        <Text>object searchItem = new object();
            SimpleList&lt;object&gt; listItems = new SimpleList&lt;object&gt;(5);

            // Build test rig
            listItems.AddUnchecked(new object());
            listItems.AddUnchecked(searchItem);
            listItems.AddUnchecked(new object());
            listItems.AddUnchecked(new object());
            listItems.AddUnchecked(new object());</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\SimpleListExtensionsTests.cs</FileName>
        <OffsetRange Start="7823" End="8205"></OffsetRange>
        <LineRange Start="227" End="235"></LineRange>
        <Text>object searchItem = new object();
            SimpleList&lt;object&gt; listItems = new SimpleList&lt;object&gt;(5);

            // Build test rig
            listItems.AddUnchecked(new object());
            listItems.AddUnchecked(searchItem);
            listItems.AddUnchecked(new object());
            listItems.AddUnchecked(new object());
            listItems.AddUnchecked(new object());</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="144">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\CircularBufferTests.cs</FileName>
        <OffsetRange Start="8186" End="8497"></OffsetRange>
        <LineRange Start="285" End="295"></LineRange>
        <Text>{
            CircularBuffer&lt;int&gt; mockData = new CircularBuffer&lt;int&gt;(4);
            mockData.Add(1);
            mockData.Add(0);
            mockData.Add(0);
            mockData.Add(0);

            mockData[0] = 5;
            bool evaluate = mockData[0] == 5;
            Assert.IsTrue(evaluate);
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\CircularBufferTests.cs</FileName>
        <OffsetRange Start="8600" End="8911"></OffsetRange>
        <LineRange Start="300" End="310"></LineRange>
        <Text>{
            CircularBuffer&lt;int&gt; mockData = new CircularBuffer&lt;int&gt;(4);
            mockData.Add(1);
            mockData.Add(0);
            mockData.Add(0);
            mockData.Add(2);

            mockData[3] = 5;
            bool evaluate = mockData[3] == 5;
            Assert.IsTrue(evaluate);
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="141">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Localization.cs</FileName>
        <OffsetRange Start="3054" End="3770"></OffsetRange>
        <LineRange Start="82" End="104"></LineRange>
        <Text>{
            switch (targetLanguage)
            {
                case Language.English:
                    return "en";
                case Language.German:
                    return "de";
                case Language.Spanish:
                    return "es";
                case Language.French:
                    return "fr";
                case Language.Polish:
                    return "pl";
                case Language.Russian:
                    return "ru";
                case Language.Development:
                    return "DEV";
                case Language.Default:
                    return "DEFAULT";
                default:
                    return "en";
            }
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Localization.cs</FileName>
        <OffsetRange Start="4294" End="5031"></OffsetRange>
        <LineRange Start="114" End="136"></LineRange>
        <Text>{
            switch (targetLanguage)
            {
                case Language.English:
                    return "en-US";
                case Language.German:
                    return "de-DE";
                case Language.Spanish:
                    return "es-ES";
                case Language.French:
                    return "fr-FR";
                case Language.Polish:
                    return "pl-PL";
                case Language.Russian:
                    return "ru-RU";
                case Language.Development:
                    return "DEV";
                case Language.Default:
                    return "DEFAULT";
                default:
                    return "en-US";
            }
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="139">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\StringKeyDictionaryTests.cs</FileName>
        <OffsetRange Start="15093" End="15529"></OffsetRange>
        <LineRange Start="470" End="477"></LineRange>
        <Text>StringKeyDictionary&lt;string&gt; dictionary = new StringKeyDictionary&lt;string&gt;(16);
            string collidingKey0 = "942";
            string collidingKey1 = "9331582";
            string myValue0 = "value0";
            string myValue1 = "value1";
            dictionary.AddUnchecked(collidingKey0, myValue0);
            dictionary.AddUnchecked(collidingKey1, myValue1);
            int allegedIndex0 = dictionary.IndexOf(collidingKey0);</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\StringKeyDictionaryTests.cs</FileName>
        <OffsetRange Start="17959" End="18396"></OffsetRange>
        <LineRange Start="541" End="549"></LineRange>
        <Text>StringKeyDictionary&lt;string&gt; dictionary = new StringKeyDictionary&lt;string&gt;(16);
            string collidingKey0 = "942";
            string collidingKey1 = "9331582";
            string myValue0 = "value0";
            string myValue1 = "value1";
            dictionary.AddUnchecked(collidingKey0, myValue0);
            dictionary.AddUnchecked(collidingKey1, myValue1);

            int allegedIndex0 = dictionary.IndexOf(collidingKey0);</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="139">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Pooling\ArrayPoolTests.cs</FileName>
        <OffsetRange Start="2485" End="2593"></OffsetRange>
        <LineRange Start="57" End="57"></LineRange>
        <Text>new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Pooling\ArrayPoolTests.cs</FileName>
        <OffsetRange Start="2624" End="2732"></OffsetRange>
        <LineRange Start="58" End="58"></LineRange>
        <Text>new int[] { 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="139">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\SimpleListTests.cs</FileName>
        <OffsetRange Start="8884" End="9202"></OffsetRange>
        <LineRange Start="250" End="262"></LineRange>
        <Text>{
            SimpleList&lt;int&gt; mockList = new SimpleList&lt;int&gt;(3);

            mockList.AddUnchecked(0);
            mockList.AddUnchecked(1);
            mockList.AddUnchecked(2);

            mockList.Insert(4, 2);

            bool evaluate = (mockList.Array[2] == 4);

            Assert.IsTrue(evaluate);
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\SimpleListTests.cs</FileName>
        <OffsetRange Start="9321" End="9639"></OffsetRange>
        <LineRange Start="267" End="279"></LineRange>
        <Text>{
            SimpleList&lt;int&gt; mockList = new SimpleList&lt;int&gt;(3);

            mockList.AddUnchecked(0);
            mockList.AddUnchecked(1);
            mockList.AddUnchecked(2);

            mockList.Insert(4, 0);

            bool evaluate = (mockList.Array[0] == 4);

            Assert.IsTrue(evaluate);
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\SimpleListTests.cs</FileName>
        <OffsetRange Start="9759" End="10077"></OffsetRange>
        <LineRange Start="284" End="296"></LineRange>
        <Text>{
            SimpleList&lt;int&gt; mockList = new SimpleList&lt;int&gt;(3);

            mockList.AddUnchecked(0);
            mockList.AddUnchecked(1);
            mockList.AddUnchecked(2);

            mockList.Insert(4, 1);

            bool evaluate = (mockList.Array[1] == 4);

            Assert.IsTrue(evaluate);
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="138">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\SimpleList.cs</FileName>
        <OffsetRange Start="9327" End="9712"></OffsetRange>
        <LineRange Start="238" End="249"></LineRange>
        <Text>{
            int arrayLength = Array.Length;
            if (Count &gt;= arrayLength)
            {
                arrayLength = arrayLength == 0 ? 1 : arrayLength;
                System.Array.Resize(ref Array, arrayLength * 2);
            }

            System.Array.Copy(Array, index, Array, index + 1, Count - index);
            Array[index] = item;
            ++Count;
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\SimpleList.cs</FileName>
        <OffsetRange Start="16229" End="16614"></OffsetRange>
        <LineRange Start="393" End="404"></LineRange>
        <Text>{
            int arrayLength = Array.Length;
            if (Count &gt;= arrayLength)
            {
                arrayLength = arrayLength == 0 ? 1 : arrayLength;
                System.Array.Resize(ref Array, arrayLength * 2);
            }

            System.Array.Copy(Array, index, Array, index + 1, Count - index);
            Array[index] = item;
            ++Count;
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="138">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\NativeSparseSet.cs</FileName>
        <OffsetRange Start="9002" End="9623"></OffsetRange>
        <LineRange Start="198" End="216"></LineRange>
        <Text>{
            if (sparseIndex &gt;= 0 &amp;&amp; sparseIndex &lt; SparseArray.Length)
            {
                int denseIndex = SparseArray[sparseIndex];
                ulong versionAtSparseIndex = versionArray[sparseIndex];

                if (versionAtSparseIndex == version &amp;&amp; denseIndex &lt; Count &amp;&amp; denseIndex &gt;= 0)
                {
                    int sparseIndexAtDenseIndex = DenseArray[denseIndex];

                    if (sparseIndex == sparseIndexAtDenseIndex)
                    {
                        return denseIndex;
                    }
                }
            }

            return -1;
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="8003" End="8624"></OffsetRange>
        <LineRange Start="190" End="208"></LineRange>
        <Text>{
            if (sparseIndex &gt;= 0 &amp;&amp; sparseIndex &lt; SparseArray.Length)
            {
                int denseIndex = SparseArray[sparseIndex];
                ulong versionAtSparseIndex = versionArray[sparseIndex];

                if (versionAtSparseIndex == version &amp;&amp; denseIndex &lt; Count &amp;&amp; denseIndex &gt;= 0)
                {
                    int sparseIndexAtDenseIndex = DenseArray[denseIndex];

                    if (sparseIndex == sparseIndexAtDenseIndex)
                    {
                        return denseIndex;
                    }
                }
            }

            return -1;
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="138">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Pooling\GameObjectPool.cs</FileName>
        <OffsetRange Start="7947" End="8479"></OffsetRange>
        <LineRange Start="155" End="169"></LineRange>
        <Text>object item = pool.Get(false);
            if (item == null)
            {
                return null;
            }
            GameObject returnObject = item is IGameObjectPoolItem gameObjectPoolItem ? gameObjectPoolItem.GetGameObject() : (GameObject)item;
            if (returnObject == null)
            {
                return null;
            }

            // Translate
            Transform transform = returnObject.transform;
            transform.SetParent(parent);
            transform.localPosition = localPosition;</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Pooling\GameObjectPool.cs</FileName>
        <OffsetRange Start="10101" End="10633"></OffsetRange>
        <LineRange Start="195" End="209"></LineRange>
        <Text>object item = pool.Get(false);
            if (item == null)
            {
                return null;
            }
            GameObject returnObject = item is IGameObjectPoolItem gameObjectPoolItem ? gameObjectPoolItem.GetGameObject() : (GameObject)item;
            if (returnObject == null)
            {
                return null;
            }

            // Translate
            Transform transform = returnObject.transform;
            transform.SetParent(parent);
            transform.localPosition = localPosition;</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="138">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="45107" End="45642"></OffsetRange>
        <LineRange Start="1055" End="1067"></LineRange>
        <Text>int nextFreeIndex = SparseArray[indexToClaim];

            DenseArray[Count] = indexToClaim; // Point the next dense id at our newly claimed sparse index.
            SparseArray[indexToClaim] = Count; // Point our newly claimed sparse index at the dense index.

            array0[Count] = obj0;
            array1[Count] = obj1;
            array2[Count] = obj2;
            array3[Count] = obj3;
            array4[Count] = obj4;

            ++Count;
            FreeIndex = nextFreeIndex; // Set the free list head for next time.</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="59806" End="60340"></OffsetRange>
        <LineRange Start="1411" End="1422"></LineRange>
        <Text>int nextFreeIndex = SparseArray[indexToClaim];
            DenseArray[Count] = indexToClaim; // Point the next dense id at our newly claimed sparse index.
            SparseArray[indexToClaim] = Count; // Point our newly claimed sparse index at the dense index.

            array0[Count] = obj0;
            array1[Count] = obj1;
            array2[Count] = obj2;
            array3[Count] = obj3;
            array4[Count] = obj4;

            ++Count;
            FreeIndex = nextFreeIndex; // Set the free list head for next time.</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="137">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\StringKeyDictionaryTests.cs</FileName>
        <OffsetRange Start="10815" End="11225"></OffsetRange>
        <LineRange Start="339" End="351"></LineRange>
        <Text>StringKeyEntry&lt;string&gt;[] entries = dictionary.Entries;
            int arrayLength = entries.Length;

            int indexOfKey = -1;
            for (int i = 0; i &lt; arrayLength; i++)
            {
                StringKeyEntry&lt;string&gt; entry = entries[i];
                if (entry.Key == myKey)
                {
                    indexOfKey = i;
                    break;
                }
            }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\StringKeyDictionaryTests.cs</FileName>
        <OffsetRange Start="12308" End="12718"></OffsetRange>
        <LineRange Start="381" End="393"></LineRange>
        <Text>StringKeyEntry&lt;string&gt;[] entries = dictionary.Entries;
            int arrayLength = entries.Length;

            int indexOfKey = -1;
            for (int i = 0; i &lt; arrayLength; i++)
            {
                StringKeyEntry&lt;string&gt; entry = entries[i];
                if (entry.Key == myKey)
                {
                    indexOfKey = i;
                    break;
                }
            }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="136">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\StringKeyDictionary.cs</FileName>
        <OffsetRange Start="7161" End="7489"></OffsetRange>
        <LineRange Start="214" End="221"></LineRange>
        <Text>int[] newBuckets = new int[nextPrimeCapacity];
            for (int i = 0; i &lt; nextPrimeCapacity; i++)
            {
                newBuckets[i] = -1;
            }

            StringKeyEntry&lt;TValue&gt;[] newEntries = new StringKeyEntry&lt;TValue&gt;[nextPrimeCapacity];
            Array.Copy(Entries, 0, newEntries, 0, oldCapacity);</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\StringKeyDictionary.cs</FileName>
        <OffsetRange Start="8671" End="9023"></OffsetRange>
        <LineRange Start="255" End="262"></LineRange>
        <Text>int[] newBuckets = new int[nextPrimeCapacity];
                for (int i = 0; i &lt; nextPrimeCapacity; i++)
                {
                    newBuckets[i] = -1;
                }

                StringKeyEntry&lt;TValue&gt;[] newEntries = new StringKeyEntry&lt;TValue&gt;[nextPrimeCapacity];
                Array.Copy(Entries, 0, newEntries, 0, oldCapacity);</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="132">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\StringKeyDictionaryTests.cs</FileName>
        <OffsetRange Start="4629" End="5058"></OffsetRange>
        <LineRange Start="141" End="153"></LineRange>
        <Text>bool allEntriesAreThere = true;
            for (int i = 0; i &lt; initialCapacity; i++)
            {
                if (dictionary.IndexOf(keys[i]) == -1)
                {
                    allEntriesAreThere = false;
                    break;
                }
            }

            bool finalEntryIsThere = dictionary.IndexOf(causesExpansion) != -1;

            Assert.IsTrue(allEntriesAreThere &amp;&amp; finalEntryIsThere);</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\StringKeyDictionaryTests.cs</FileName>
        <OffsetRange Start="6853" End="7282"></OffsetRange>
        <LineRange Start="213" End="225"></LineRange>
        <Text>bool allEntriesAreThere = true;
            for (int i = 0; i &lt; initialCapacity; i++)
            {
                if (dictionary.IndexOf(keys[i]) == -1)
                {
                    allEntriesAreThere = false;
                    break;
                }
            }

            bool finalEntryIsThere = dictionary.IndexOf(causesExpansion) != -1;

            Assert.IsTrue(allEntriesAreThere &amp;&amp; finalEntryIsThere);</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\StringKeyDictionaryTests.cs</FileName>
        <OffsetRange Start="9063" End="9492"></OffsetRange>
        <LineRange Start="285" End="297"></LineRange>
        <Text>bool allEntriesAreThere = true;
            for (int i = 0; i &lt; initialCapacity; i++)
            {
                if (dictionary.IndexOf(keys[i]) == -1)
                {
                    allEntriesAreThere = false;
                    break;
                }
            }

            bool finalEntryIsThere = dictionary.IndexOf(causesExpansion) != -1;

            Assert.IsTrue(allEntriesAreThere &amp;&amp; finalEntryIsThere);</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="131">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Pooling\GameObjectPool.cs</FileName>
        <OffsetRange Start="13912" End="14426"></OffsetRange>
        <LineRange Start="272" End="285"></LineRange>
        <Text>object item = pool.Get(false);
            if (item == null)
            {
                return null;
            }
            GameObject returnObject = item is IGameObjectPoolItem gameObjectPoolItem ? gameObjectPoolItem.GetGameObject() : (GameObject)item;
            if (returnObject == null)
            {
                return null;
            }

            // Translate
            Transform transform = returnObject.transform;
            transform.SetPositionAndRotation(worldPosition, worldRotation);</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Pooling\GameObjectPool.cs</FileName>
        <OffsetRange Start="15952" End="16466"></OffsetRange>
        <LineRange Start="310" End="323"></LineRange>
        <Text>object item = pool.Get(false);
            if (item == null)
            {
                return null;
            }
            GameObject returnObject = item is IGameObjectPoolItem gameObjectPoolItem ? gameObjectPoolItem.GetGameObject() : (GameObject)item;
            if (returnObject == null)
            {
                return null;
            }

            // Translate
            Transform transform = returnObject.transform;
            transform.SetPositionAndRotation(worldPosition, worldRotation);</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="129">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\CircularBufferTests.cs</FileName>
        <OffsetRange Start="2140" End="2422"></OffsetRange>
        <LineRange Start="71" End="80"></LineRange>
        <Text>{
            CircularBuffer&lt;int&gt; mockData = new CircularBuffer&lt;int&gt;(4);
            mockData.Add(1);
            mockData.Add(0);
            mockData.Add(0);
            mockData.Add(0);

            bool evaluate = mockData[0] == 1;
            Assert.IsTrue(evaluate);
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\CircularBufferTests.cs</FileName>
        <OffsetRange Start="2525" End="2807"></OffsetRange>
        <LineRange Start="85" End="94"></LineRange>
        <Text>{
            CircularBuffer&lt;int&gt; mockData = new CircularBuffer&lt;int&gt;(4);
            mockData.Add(1);
            mockData.Add(0);
            mockData.Add(0);
            mockData.Add(2);

            bool evaluate = mockData[3] == 2;
            Assert.IsTrue(evaluate);
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="127">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Pooling\GameObjectPoolTests.cs</FileName>
        <OffsetRange Start="4522" End="4859"></OffsetRange>
        <LineRange Start="127" End="130"></LineRange>
        <Text>GameObject movedObject = new GameObject { transform = { position = new Vector3(1, 0, 0) } };
            GameObject movedTransform = new GameObject { transform = { position = new Vector3(10, 0, 0) } };

            SimpleListManagedPool pool = (SimpleListManagedPool)GameObjectPool.GetOrCreatePool(movedObject, movedTransform.transform);</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Pooling\GameObjectPoolTests.cs</FileName>
        <OffsetRange Start="5346" End="5683"></OffsetRange>
        <LineRange Start="147" End="150"></LineRange>
        <Text>GameObject movedObject = new GameObject { transform = { position = new Vector3(1, 0, 0) } };
            GameObject movedTransform = new GameObject { transform = { position = new Vector3(10, 0, 0) } };

            SimpleListManagedPool pool = (SimpleListManagedPool)GameObjectPool.GetOrCreatePool(movedObject, movedTransform.transform);</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="127">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Mathematics\Random\WELL1024aTests.cs</FileName>
        <OffsetRange Start="7067" End="7420"></OffsetRange>
        <LineRange Start="255" End="266"></LineRange>
        <Text>bool evaluate = true;
            for (int i = 1; i &lt; 64; i++)
            {
                if (Math.Abs(nextValues[i - 1] - nextValues[i]) &lt; Platform.DoubleTolerance)
                {
                    evaluate = false;
                    break;
                }
            }

            mockWell.Dispose();
            Assert.IsTrue(evaluate);</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Mathematics\Random\WELL1024aTests.cs</FileName>
        <OffsetRange Start="8690" End="9043"></OffsetRange>
        <LineRange Start="307" End="318"></LineRange>
        <Text>bool evaluate = true;
            for (int i = 1; i &lt; 64; i++)
            {
                if (Math.Abs(nextValues[i - 1] - nextValues[i]) &lt; Platform.DoubleTolerance)
                {
                    evaluate = false;
                    break;
                }
            }

            mockWell.Dispose();
            Assert.IsTrue(evaluate);</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="126">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\NativeSparseSet.cs</FileName>
        <OffsetRange Start="6286" End="7311"></OffsetRange>
        <LineRange Start="141" End="165"></LineRange>
        <Text>/// &lt;summary&gt;
        ///     Gets the value of the sparse array at the given index,
        ///     or -1 if the dense and sparse indices don't point to each other or if the dense index is outside the dense bounds.
        /// &lt;/summary&gt;
        /// &lt;param name="sparseIndex"&gt;The index in the sparse array to check against.&lt;/param&gt;
        /// &lt;returns&gt;The dense index pointed to by the current sparse index, or -1 if invalid.&lt;/returns&gt;
        public int GetDenseIndexWithBoundsCheck(int sparseIndex)
        {
            if (sparseIndex &gt;= 0 &amp;&amp; sparseIndex &lt; SparseArray.Length)
            {
                int denseIndex = SparseArray[sparseIndex];

                if (denseIndex &lt; Count &amp;&amp; denseIndex &gt;= 0)
                {
                    int sparseIndexAtDenseIndex = DenseArray[denseIndex];

                    if (sparseIndex == sparseIndexAtDenseIndex)
                    {
                        return denseIndex;
                    }
                }
            }

            return -1;
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="5321" End="6346"></OffsetRange>
        <LineRange Start="134" End="158"></LineRange>
        <Text>/// &lt;summary&gt;
        ///     Gets the value of the sparse array at the given index,
        ///     or -1 if the dense and sparse indices don't point to each other or if the dense index is outside the dense bounds.
        /// &lt;/summary&gt;
        /// &lt;param name="sparseIndex"&gt;The index in the sparse array to check against.&lt;/param&gt;
        /// &lt;returns&gt;The dense index pointed to by the current sparse index, or -1 if invalid.&lt;/returns&gt;
        public int GetDenseIndexWithBoundsCheck(int sparseIndex)
        {
            if (sparseIndex &gt;= 0 &amp;&amp; sparseIndex &lt; SparseArray.Length)
            {
                int denseIndex = SparseArray[sparseIndex];

                if (denseIndex &lt; Count &amp;&amp; denseIndex &gt;= 0)
                {
                    int sparseIndexAtDenseIndex = DenseArray[denseIndex];

                    if (sparseIndex == sparseIndexAtDenseIndex)
                    {
                        return denseIndex;
                    }
                }
            }

            return -1;
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="126">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Developer\Profiling.cs</FileName>
        <OffsetRange Start="2841" End="3226"></OffsetRange>
        <LineRange Start="58" End="68"></LineRange>
        <Text>if (filesToRemove &gt; 0)
                {
                    List&lt;string&gt; fileList = new List&lt;string&gt;(files.Length);
                    fileList.AddRange(files);
                    fileList.Sort();

                    for (int i = 0; i &lt; filesToRemove; i++)
                    {
                        Platform.ForceDeleteFile(fileList[i]);
                    }
                }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Developer\Profiling.cs</FileName>
        <OffsetRange Start="4673" End="5058"></OffsetRange>
        <LineRange Start="94" End="104"></LineRange>
        <Text>if (filesToRemove &gt; 0)
                {
                    List&lt;string&gt; fileList = new List&lt;string&gt;(files.Length);
                    fileList.AddRange(files);
                    fileList.Sort();

                    for (int i = 0; i &lt; filesToRemove; i++)
                    {
                        Platform.ForceDeleteFile(fileList[i]);
                    }
                }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="126">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\BitArray128.cs</FileName>
        <OffsetRange Start="2055" End="2463"></OffsetRange>
        <LineRange Start="65" End="75"></LineRange>
        <Text>[MethodImpl(MethodImplOptions.AggressiveInlining)]
            set
            {
                int intIndex = (index &amp; 127) &gt;&gt; 5;
                int bitIndex = index &amp; 31;
                int negativeVal = value ? -1 : 0;
                fixed (int* array = &amp;Bits0)
                {
                    array[intIndex] ^= (negativeVal ^ array[intIndex]) &amp; (1 &lt;&lt; bitIndex);
                }
            }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\BitArray256.cs</FileName>
        <OffsetRange Start="2879" End="3288"></OffsetRange>
        <LineRange Start="93" End="104"></LineRange>
        <Text>[MethodImpl(MethodImplOptions.AggressiveInlining)]
            set
            {
                int intIndex = (index &amp; 255) &gt;&gt; 5;
                int bitIndex = index &amp; 31;
                int negativeVal = value ? -1 : 0;

                fixed (int* array = &amp;Bits0)
                {
                    array[intIndex] ^= (negativeVal ^ array[intIndex]) &amp; (1 &lt;&lt; bitIndex);
                }
            }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\BitArray512.cs</FileName>
        <OffsetRange Start="4444" End="4853"></OffsetRange>
        <LineRange Start="141" End="152"></LineRange>
        <Text>[MethodImpl(MethodImplOptions.AggressiveInlining)]
            set
            {
                int intIndex = (index &amp; 511) &gt;&gt; 5;
                int bitIndex = index &amp; 31;
                int negativeVal = value ? -1 : 0;

                fixed (int* array = &amp;Bits0)
                {
                    array[intIndex] ^= (negativeVal ^ array[intIndex]) &amp; (1 &lt;&lt; bitIndex);
                }
            }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="124">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Pooling\GameObjectPool.cs</FileName>
        <OffsetRange Start="12042" End="12528"></OffsetRange>
        <LineRange Start="234" End="247"></LineRange>
        <Text>object item = pool.Get(false);
            if (item == null)
            {
                return null;
            }
            GameObject returnObject = item is IGameObjectPoolItem gameObjectPoolItem ? gameObjectPoolItem.GetGameObject() : (GameObject)item;
            if (returnObject == null)
            {
                return null;
            }

            // Translate
            Transform transform = returnObject.transform;
            transform.position = worldPosition;</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Pooling\GameObjectPool.cs</FileName>
        <OffsetRange Start="18062" End="18548"></OffsetRange>
        <LineRange Start="349" End="362"></LineRange>
        <Text>object item = pool.Get(false);
            if (item == null)
            {
                return null;
            }
            GameObject returnObject = item is IGameObjectPoolItem gameObjectPoolItem ? gameObjectPoolItem.GetGameObject() : (GameObject)item;
            if (returnObject == null)
            {
                return null;
            }

            // Translate
            Transform transform = returnObject.transform;
            transform.position = worldPosition;</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="123">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="42173" End="42674"></OffsetRange>
        <LineRange Start="985" End="996"></LineRange>
        <Text>int nextFreeIndex = SparseArray[indexToClaim];

            DenseArray[Count] = indexToClaim; // Point the next dense id at our newly claimed sparse index.
            SparseArray[indexToClaim] = Count; // Point our newly claimed sparse index at the dense index.

            array0[Count] = obj0;
            array1[Count] = obj1;
            array2[Count] = obj2;
            array3[Count] = obj3;

            ++Count;
            FreeIndex = nextFreeIndex; // Set the free list head for next time.</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="58842" End="59342"></OffsetRange>
        <LineRange Start="1388" End="1398"></LineRange>
        <Text>int nextFreeIndex = SparseArray[indexToClaim];
            DenseArray[Count] = indexToClaim; // Point the next dense id at our newly claimed sparse index.
            SparseArray[indexToClaim] = Count; // Point our newly claimed sparse index at the dense index.

            array0[Count] = obj0;
            array1[Count] = obj1;
            array2[Count] = obj2;
            array3[Count] = obj3;

            ++Count;
            FreeIndex = nextFreeIndex; // Set the free list head for next time.</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="122">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="31377" End="31724"></OffsetRange>
        <LineRange Start="726" End="732"></LineRange>
        <Text>int[] newSparseArray = new int[newCount];
                Array.Copy(SparseArray, 0, newSparseArray, 0, currentCapacity);
                SparseArray = newSparseArray;

                int[] newDenseArray = new int[newCount];
                Array.Copy(DenseArray, 0, newDenseArray, 0, currentCapacity);
                DenseArray = newDenseArray;</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="32316" End="32663"></OffsetRange>
        <LineRange Start="750" End="756"></LineRange>
        <Text>int[] newSparseArray = new int[newCount];
                Array.Copy(SparseArray, 0, newSparseArray, 0, currentCapacity);
                SparseArray = newSparseArray;

                int[] newDenseArray = new int[newCount];
                Array.Copy(DenseArray, 0, newDenseArray, 0, currentCapacity);
                DenseArray = newDenseArray;</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="122">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="71923" End="72237"></OffsetRange>
        <LineRange Start="1693" End="1700"></LineRange>
        <Text>DenseArray[newLength] = -1;
            array0[newLength] = default;
            array1[newLength] = default;
            array2[newLength] = default;
            array3[newLength] = default;
            array4[newLength] = default;
            array5[newLength] = default;
            array6[newLength] = default;</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="73595" End="73909"></OffsetRange>
        <LineRange Start="1729" End="1736"></LineRange>
        <Text>DenseArray[newLength] = -1;
            array0[newLength] = default;
            array1[newLength] = default;
            array2[newLength] = default;
            array3[newLength] = default;
            array4[newLength] = default;
            array5[newLength] = default;
            array6[newLength] = default;</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="118">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\BitArray16.cs</FileName>
        <OffsetRange Start="1162" End="1810"></OffsetRange>
        <LineRange Start="38" End="59"></LineRange>
        <Text>/// &lt;summary&gt;
        ///     Access bit in array.
        /// &lt;/summary&gt;
        /// &lt;param name="index"&gt;Target bit index.&lt;/param&gt;
        public bool this[byte index]
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get =&gt; (Bits0 &amp; (1 &lt;&lt; index)) != 0;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set
            {
                if (value)
                {
                    Bits0 = (ushort)(Bits0 | (1 &lt;&lt; index));
                }
                else
                {
                    Bits0 = (ushort)(Bits0 &amp; ~(1 &lt;&lt; index));
                }
            }
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\BitArray8.cs</FileName>
        <OffsetRange Start="1148" End="1792"></OffsetRange>
        <LineRange Start="38" End="59"></LineRange>
        <Text>/// &lt;summary&gt;
        ///     Access bit in array.
        /// &lt;/summary&gt;
        /// &lt;param name="index"&gt;Target bit index.&lt;/param&gt;
        public bool this[byte index]
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get =&gt; (Bits0 &amp; (1 &lt;&lt; index)) != 0;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set
            {
                if (value)
                {
                    Bits0 = (byte)(Bits0 | (1 &lt;&lt; index));
                }
                else
                {
                    Bits0 = (byte)(Bits0 &amp; ~(1 &lt;&lt; index));
                }
            }
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="118">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\StringKeyDictionary.cs</FileName>
        <OffsetRange Start="1410" End="1785"></OffsetRange>
        <LineRange Start="45" End="56"></LineRange>
        <Text>if (key == null) throw new ArgumentNullException();

            int freeIndex = FreeListHead;

            if (freeIndex &gt;= Buckets.Length)
            {
                ExpandWhenFull();
            }

            int hashCode = key.GetStableHashCode() &amp; 0x7FFFFFFF;
            int hashIndex = hashCode % Buckets.Length;
            int indexAtBucket = Buckets[hashIndex];</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\StringKeyDictionary.cs</FileName>
        <OffsetRange Start="3970" End="4345"></OffsetRange>
        <LineRange Start="117" End="128"></LineRange>
        <Text>if (key == null) throw new ArgumentNullException();

            int freeIndex = FreeListHead;

            if (freeIndex &gt;= Buckets.Length)
            {
                ExpandWhenFull();
            }

            int hashCode = key.GetStableHashCode() &amp; 0x7FFFFFFF;
            int hashIndex = hashCode % Buckets.Length;
            int indexAtBucket = Buckets[hashIndex];</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="117">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\Array2DTests.cs</FileName>
        <OffsetRange Start="2974" End="3257"></OffsetRange>
        <LineRange Start="103" End="109"></LineRange>
        <Text>bool evaluate = mockArray[1, 0] == 4 &amp;&amp;
                            mockArray[1, 1] == 3 &amp;&amp;
                            mockArray[1, 2] == 2 &amp;&amp;
                            mockArray[1, 3] == 1 &amp;&amp;
                            mockArray[1, 4] == 0;

            Assert.IsTrue(evaluate);</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\Array2DTests.cs</FileName>
        <OffsetRange Start="4451" End="4734"></OffsetRange>
        <LineRange Start="153" End="159"></LineRange>
        <Text>bool evaluate = mockArray[0, 0] == 4 &amp;&amp;
                            mockArray[1, 0] == 3 &amp;&amp;
                            mockArray[2, 0] == 2 &amp;&amp;
                            mockArray[3, 0] == 1 &amp;&amp;
                            mockArray[4, 0] == 0;

            Assert.IsTrue(evaluate);</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="117">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\NativeSparseSet.cs</FileName>
        <OffsetRange Start="4860" End="5788"></OffsetRange>
        <LineRange Start="111" End="128"></LineRange>
        <Text>/// &lt;summary&gt;
        ///     Adds a sparse/dense index pair to the set without checking if the set needs to expand.
        /// &lt;/summary&gt;
        /// &lt;param name="sparseIndex"&gt;The sparse index allocated.&lt;/param&gt;
        /// &lt;param name="denseIndex"&gt;The dense index allocated.&lt;/param&gt;
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void AddUnchecked(out int sparseIndex, out int denseIndex)
        {
            int indexToClaim = FreeIndex;
            int nextFreeIndex = SparseArray[indexToClaim];
            DenseArray[Count] = indexToClaim; // Point the next dense id at our newly claimed sparse index.
            SparseArray[indexToClaim] = Count; // Point our newly claimed sparse index at the dense index.

            sparseIndex = indexToClaim;
            denseIndex = Count;
            ++Count;
            FreeIndex = nextFreeIndex; // Set the free list head for next time.
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="3895" End="4823"></OffsetRange>
        <LineRange Start="104" End="121"></LineRange>
        <Text>/// &lt;summary&gt;
        ///     Adds a sparse/dense index pair to the set without checking if the set needs to expand.
        /// &lt;/summary&gt;
        /// &lt;param name="sparseIndex"&gt;The sparse index allocated.&lt;/param&gt;
        /// &lt;param name="denseIndex"&gt;The dense index allocated.&lt;/param&gt;
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void AddUnchecked(out int sparseIndex, out int denseIndex)
        {
            int indexToClaim = FreeIndex;
            int nextFreeIndex = SparseArray[indexToClaim];
            DenseArray[Count] = indexToClaim; // Point the next dense id at our newly claimed sparse index.
            SparseArray[indexToClaim] = Count; // Point our newly claimed sparse index at the dense index.

            sparseIndex = indexToClaim;
            denseIndex = Count;
            ++Count;
            FreeIndex = nextFreeIndex; // Set the free list head for next time.
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="116">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\NativeSparseSet.cs</FileName>
        <OffsetRange Start="29560" End="29857"></OffsetRange>
        <LineRange Start="661" End="672"></LineRange>
        <Text>{
            int capacity = SparseArray.Length;
            for (int i = 0; i &lt; capacity; i++)
            {
                DenseArray[i] = -1;
                SparseArray[i] = i + 1;
                versionArray[i] = 0;
            }

            FreeIndex = 0;
            Count = 0;
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="28480" End="28777"></OffsetRange>
        <LineRange Start="652" End="663"></LineRange>
        <Text>{
            int capacity = SparseArray.Length;
            for (int i = 0; i &lt; capacity; i++)
            {
                DenseArray[i] = -1;
                SparseArray[i] = i + 1;
                versionArray[i] = 0;
            }

            FreeIndex = 0;
            Count = 0;
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="115">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Pooling\GameObjectPoolTests.cs</FileName>
        <OffsetRange Start="3195" End="3549"></OffsetRange>
        <LineRange Start="93" End="100"></LineRange>
        <Text>bool evaluate = gameObject.transform.position == new Vector3(3, 0, 0) &amp;&amp;
                            gameObject.transform.eulerAngles.Approximately(
                                new Vector3(0f, 270f, 0f)) &amp;&amp;
                            gameObject.transform.parent == m_MockTransform;

            Assert.IsTrue(evaluate);

            pool.TearDown();</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Pooling\GameObjectPoolTests.cs</FileName>
        <OffsetRange Start="4020" End="4374"></OffsetRange>
        <LineRange Start="113" End="120"></LineRange>
        <Text>bool evaluate = gameObject.transform.position == new Vector3(3, 0, 0) &amp;&amp;
                            gameObject.transform.eulerAngles.Approximately(
                                new Vector3(0f, 180f, 0f)) &amp;&amp;
                            gameObject.transform.parent == m_MockTransform;

            Assert.IsTrue(evaluate);

            pool.TearDown();</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="114">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\Array2DTests.cs</FileName>
        <OffsetRange Start="2703" End="2918"></OffsetRange>
        <LineRange Start="91" End="98"></LineRange>
        <Text>Array2D&lt;int&gt; mockArray = new Array2D&lt;int&gt;(2, 5)
            {
                [1, 0] = 0,
                [1, 1] = 1,
                [1, 2] = 2,
                [1, 3] = 3,
                [1, 4] = 4
            };</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\Array2DTests.cs</FileName>
        <OffsetRange Start="4184" End="4399"></OffsetRange>
        <LineRange Start="142" End="149"></LineRange>
        <Text>Array2D&lt;int&gt; mockArray = new Array2D&lt;int&gt;(5, 2)
            {
                [0, 0] = 0,
                [1, 0] = 1,
                [2, 0] = 2,
                [3, 0] = 3,
                [4, 0] = 4
            };</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="114">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Jobs\ParallelFor\Color32CompareJobTests.cs</FileName>
        <OffsetRange Start="930" End="1280"></OffsetRange>
        <LineRange Start="29" End="40"></LineRange>
        <Text>JobHandle handle = calcDifferencesJob.Schedule(arrayLength, 256);
            handle.Complete();

            float average = 0f;
            for (int i = 0; i &lt; arrayLength; i++)
            {
                average += percentages[i];
            }
            average /= arrayLength;

            // Cleanup arrays
            whiteData.Dispose();</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Jobs\ParallelFor\Color32CompareJobTests.cs</FileName>
        <OffsetRange Start="2169" End="2519"></OffsetRange>
        <LineRange Start="63" End="74"></LineRange>
        <Text>JobHandle handle = calcDifferencesJob.Schedule(arrayLength, 256);
            handle.Complete();

            float average = 0f;
            for (int i = 0; i &lt; arrayLength; i++)
            {
                average += percentages[i];
            }
            average /= arrayLength;

            // Cleanup arrays
            whiteData.Dispose();</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="113">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\ArrayExtensionsTests.cs</FileName>
        <OffsetRange Start="2132" End="2391"></OffsetRange>
        <LineRange Start="80" End="85"></LineRange>
        <Text>object mockSearchObject = new object();
            object[] mockArray = new object[4];
            mockArray[0] = new object();
            mockArray[1] = mockSearchObject;
            mockArray[2] = new object();
            mockArray[3] = mockSearchObject;</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\ArrayExtensionsTests.cs</FileName>
        <OffsetRange Start="3880" End="4139"></OffsetRange>
        <LineRange Start="135" End="140"></LineRange>
        <Text>object mockSearchObject = new object();
            object[] mockArray = new object[4];
            mockArray[0] = new object();
            mockArray[1] = mockSearchObject;
            mockArray[2] = new object();
            mockArray[3] = mockSearchObject;</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="113">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\StringKeyDictionary.cs</FileName>
        <OffsetRange Start="3193" End="3536"></OffsetRange>
        <LineRange Start="96" End="106"></LineRange>
        <Text>ref StringKeyEntry&lt;TValue&gt; entry = ref Entries[freeIndex];

            FreeListHead = entry.Next &amp; 0x7FFFFFFF;
            entry.Next = indexAtBucket;
            entry.Key = key;
            entry.Value = value;
            entry.HashCode = hashCode;
            Buckets[hashIndex] = freeIndex;

            ++Count;
            return true;</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\StringKeyDictionary.cs</FileName>
        <OffsetRange Start="4707" End="5050"></OffsetRange>
        <LineRange Start="142" End="152"></LineRange>
        <Text>ref StringKeyEntry&lt;TValue&gt; entry = ref Entries[freeIndex];

            FreeListHead = entry.Next &amp; 0x7FFFFFFF;
            entry.Next = indexAtBucket;
            entry.Key = key;
            entry.Value = value;
            entry.HashCode = hashCode;
            Buckets[hashIndex] = freeIndex;

            ++Count;
            return true;</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="111">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\StringKeyDictionary.cs</FileName>
        <OffsetRange Start="13078" End="13549"></OffsetRange>
        <LineRange Start="384" End="398"></LineRange>
        <Text>currEntry.HashCode = 0;
                currEntry.Next = nextFreeIndex | (1 &lt;&lt; 31);
                Entries[indexOfKey] = currEntry;
                FreeListHead = indexOfKey;

                if (indexOfKey == indexAtBucket)
                {
                    Buckets[bucketIndex] = nextUsedIndex;
                }
                else
                {
                    Entries[previousIndex].Next = nextUsedIndex;
                }

                return true;</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\StringKeyDictionary.cs</FileName>
        <OffsetRange Start="14956" End="15427"></OffsetRange>
        <LineRange Start="442" End="456"></LineRange>
        <Text>currEntry.HashCode = 0;
                currEntry.Next = nextFreeIndex | (1 &lt;&lt; 31);
                Entries[indexOfKey] = currEntry;
                FreeListHead = indexOfKey;

                if (indexOfKey == indexAtBucket)
                {
                    Buckets[bucketIndex] = nextUsedIndex;
                }
                else
                {
                    Entries[previousIndex].Next = nextUsedIndex;
                }

                return true;</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="111">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\NativeSparseSet.cs</FileName>
        <OffsetRange Start="28913" End="29297"></OffsetRange>
        <LineRange Start="640" End="654"></LineRange>
        <Text>/// &lt;summary&gt;
        ///     Clear the dense and sparse arrays.
        /// &lt;/summary&gt;
        public void Clear()
        {
            int capacity = SparseArray.Length;
            for (int i = 0; i &lt; capacity; i++)
            {
                DenseArray[i] = -1;
                SparseArray[i] = i + 1;
            }

            FreeIndex = 0;
            Count = 0;
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="27828" End="28212"></OffsetRange>
        <LineRange Start="630" End="644"></LineRange>
        <Text>/// &lt;summary&gt;
        ///     Clear the dense and sparse arrays.
        /// &lt;/summary&gt;
        public void Clear()
        {
            int capacity = SparseArray.Length;
            for (int i = 0; i &lt; capacity; i++)
            {
                DenseArray[i] = -1;
                SparseArray[i] = i + 1;
            }

            FreeIndex = 0;
            Count = 0;
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="110">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Mathematics\Random\WELL1024aTests.cs</FileName>
        <OffsetRange Start="5798" End="6115"></OffsetRange>
        <LineRange Start="207" End="218"></LineRange>
        <Text>bool evaluate = true;
            for (int i = 1; i &lt; 64; i++)
            {
                if (nextValues[i - 1] == nextValues[i])
                {
                    evaluate = false;
                    break;
                }
            }

            mockWell.Dispose();
            Assert.IsTrue(evaluate);</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Mathematics\Random\WELL1024aTests.cs</FileName>
        <OffsetRange Start="9835" End="10152"></OffsetRange>
        <LineRange Start="346" End="357"></LineRange>
        <Text>bool evaluate = true;
            for (int i = 1; i &lt; 64; i++)
            {
                if (nextValues[i - 1] == nextValues[i])
                {
                    evaluate = false;
                    break;
                }
            }

            mockWell.Dispose();
            Assert.IsTrue(evaluate);</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="110">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Pooling\SimpleListManagedPool.cs</FileName>
        <OffsetRange Start="7247" End="7616"></OffsetRange>
        <LineRange Start="180" End="192"></LineRange>
        <Text>int outCount = m_OutItems.Count;
            for (int i = 0; i &lt; outCount; i++)
            {
                if (m_OutItems.Array[i] != item)
                {
                    continue;
                }
                m_OutItems.RemoveAtSwapBack(i);
                OutCachedCount--;
                break;
            }

            int inCount = InItems.Count;</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Pooling\SimpleListManagedPool.cs</FileName>
        <OffsetRange Start="11700" End="12070"></OffsetRange>
        <LineRange Start="334" End="347"></LineRange>
        <Text>int outCount = m_OutItems.Count;
            for (int i = 0; i &lt; outCount; i++)
            {
                if (m_OutItems.Array[i] != item)
                {
                    continue;
                }

                m_OutItems.RemoveAtSwapBack(i);
                OutCachedCount--;
                break;
            }

            int inCount = InItems.Count;</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="110">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Jobs\ParallelFor\Color32CompareJob.cs</FileName>
        <OffsetRange Start="1216" End="1372"></OffsetRange>
        <LineRange Start="36" End="39"></LineRange>
        <Text>A[index].r == B[index].r &amp;&amp;
                A[index].g == B[index].g &amp;&amp;
                A[index].b == B[index].b &amp;&amp;
                A[index].a == B[index].a</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Jobs\ParallelFor\Color32MatchJob.cs</FileName>
        <OffsetRange Start="1380" End="1536"></OffsetRange>
        <LineRange Start="40" End="43"></LineRange>
        <Text>A[index].r == B[index].r &amp;&amp;
                A[index].g == B[index].g &amp;&amp;
                A[index].b == B[index].b &amp;&amp;
                A[index].a == B[index].a</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="108">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="39476" End="39943"></OffsetRange>
        <LineRange Start="921" End="931"></LineRange>
        <Text>int nextFreeIndex = SparseArray[indexToClaim];

            DenseArray[Count] = indexToClaim; // Point the next dense id at our newly claimed sparse index.
            SparseArray[indexToClaim] = Count; // Point our newly claimed sparse index at the dense index.

            array0[Count] = obj0;
            array1[Count] = obj1;
            array2[Count] = obj2;

            ++Count;
            FreeIndex = nextFreeIndex; // Set the free list head for next time.</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="57926" End="58392"></OffsetRange>
        <LineRange Start="1365" End="1374"></LineRange>
        <Text>int nextFreeIndex = SparseArray[indexToClaim];
            DenseArray[Count] = indexToClaim; // Point the next dense id at our newly claimed sparse index.
            SparseArray[indexToClaim] = Count; // Point our newly claimed sparse index at the dense index.

            array0[Count] = obj0;
            array1[Count] = obj1;
            array2[Count] = obj2;

            ++Count;
            FreeIndex = nextFreeIndex; // Set the free list head for next time.</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="108">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\SimpleListExtensions.cs</FileName>
        <OffsetRange Start="9359" End="9790"></OffsetRange>
        <LineRange Start="193" End="206"></LineRange>
        <Text>int length = targetSimpleList.Count;
            T[] array = targetSimpleList.Array;

            for (int i = 0; i &lt; length; i++)
            {
#pragma warning disable
                // ReSharper disable All
                if ((System.Object)array[i] == (System.Object)targetItem)
                {
                    return true;
                }
                // ReSharper restore All
#pragma warning restore
            }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\SimpleListExtensions.cs</FileName>
        <OffsetRange Start="7199" End="7470"></OffsetRange>
        <LineRange Start="143" End="152"></LineRange>
        <Text>int length = targetSimpleList.Count;
            T[] array = targetSimpleList.Array;

            for (int i = 0; i &lt; length; i++)
            {
                if (array[i] == targetItem)
                {
                    return true;
                }
            }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="106">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="63876" End="64305"></OffsetRange>
        <LineRange Start="1510" End="1517"></LineRange>
        <Text>int denseIndexToRemove = SparseArray[sparseIndexToRemove];
            int newLength = Count - 1;
            int sparseIndexBeingSwapped = DenseArray[newLength];

            // Swap the entry being removed with the last entry.
            SparseArray[sparseIndexBeingSwapped] = denseIndexToRemove;
            DenseArray[denseIndexToRemove] = sparseIndexBeingSwapped;
            array0[denseIndexToRemove] = array0[newLength];</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="64768" End="65197"></OffsetRange>
        <LineRange Start="1532" End="1539"></LineRange>
        <Text>int denseIndexToRemove = SparseArray[sparseIndexToRemove];
            int newLength = Count - 1;
            int sparseIndexBeingSwapped = DenseArray[newLength];

            // Swap the entry being removed with the last entry.
            SparseArray[sparseIndexBeingSwapped] = denseIndexToRemove;
            DenseArray[denseIndexToRemove] = sparseIndexBeingSwapped;
            array0[denseIndexToRemove] = array0[newLength];</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="105">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Platform.cs</FileName>
        <OffsetRange Start="7412" End="7719"></OffsetRange>
        <LineRange Start="186" End="190"></LineRange>
        <Text>tmpFileName.Append(GetRandomSafeCharacter(random));
            tmpFileName.Append(GetRandomSafeCharacter(random));
            tmpFileName.Append(GetRandomSafeCharacter(random));
            tmpFileName.Append(GetRandomSafeCharacter(random));
            tmpFileName.Append(GetRandomSafeCharacter(random));</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Platform.cs</FileName>
        <OffsetRange Start="8208" End="8547"></OffsetRange>
        <LineRange Start="205" End="209"></LineRange>
        <Text>tmpFileName.Append(GetRandomSafeCharacter(random));
                    tmpFileName.Append(GetRandomSafeCharacter(random));
                    tmpFileName.Append(GetRandomSafeCharacter(random));
                    tmpFileName.Append(GetRandomSafeCharacter(random));
                    tmpFileName.Append(GetRandomSafeCharacter(random));</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="103">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\SimpleListTests.cs</FileName>
        <OffsetRange Start="12389" End="12630"></OffsetRange>
        <LineRange Start="383" End="389"></LineRange>
        <Text>SimpleList&lt;int&gt; mockList = new SimpleList&lt;int&gt;(6);

            mockList.AddUnchecked(0);
            mockList.AddUnchecked(1);
            mockList.AddUnchecked(2);
            mockList.AddUnchecked(3);
            mockList.AddUnchecked(4);</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\SimpleListTests.cs</FileName>
        <OffsetRange Start="13206" End="13447"></OffsetRange>
        <LineRange Start="409" End="415"></LineRange>
        <Text>SimpleList&lt;int&gt; mockList = new SimpleList&lt;int&gt;(5);

            mockList.AddUnchecked(0);
            mockList.AddUnchecked(1);
            mockList.AddUnchecked(2);
            mockList.AddUnchecked(3);
            mockList.AddUnchecked(4);</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="103">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\CircularBufferTests.cs</FileName>
        <OffsetRange Start="2927" End="3130"></OffsetRange>
        <LineRange Start="100" End="105"></LineRange>
        <Text>CircularBuffer&lt;int&gt; mockData = new CircularBuffer&lt;int&gt;(4);
            mockData.Add(1);
            mockData.Add(2);
            mockData.Add(3);
            mockData.Add(4);
            mockData.Add(5);</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\CircularBufferTests.cs</FileName>
        <OffsetRange Start="3395" End="3598"></OffsetRange>
        <LineRange Start="117" End="122"></LineRange>
        <Text>CircularBuffer&lt;int&gt; mockData = new CircularBuffer&lt;int&gt;(4);
            mockData.Add(4);
            mockData.Add(3);
            mockData.Add(2);
            mockData.Add(1);
            mockData.Add(5);</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\CircularBufferTests.cs</FileName>
        <OffsetRange Start="3823" End="4026"></OffsetRange>
        <LineRange Start="133" End="138"></LineRange>
        <Text>CircularBuffer&lt;int&gt; mockData = new CircularBuffer&lt;int&gt;(4);
            mockData.Add(4);
            mockData.Add(3);
            mockData.Add(2);
            mockData.Add(1);
            mockData.Add(5);</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\CircularBufferTests.cs</FileName>
        <OffsetRange Start="4534" End="4737"></OffsetRange>
        <LineRange Start="159" End="164"></LineRange>
        <Text>CircularBuffer&lt;int&gt; mockData = new CircularBuffer&lt;int&gt;(4);
            mockData.Add(4);
            mockData.Add(3);
            mockData.Add(2);
            mockData.Add(1);
            mockData.Add(5);</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\CircularBufferTests.cs</FileName>
        <OffsetRange Start="4989" End="5192"></OffsetRange>
        <LineRange Start="176" End="181"></LineRange>
        <Text>CircularBuffer&lt;int&gt; mockData = new CircularBuffer&lt;int&gt;(4);
            mockData.Add(4);
            mockData.Add(3);
            mockData.Add(2);
            mockData.Add(1);
            mockData.Add(5);</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\CircularBufferTests.cs</FileName>
        <OffsetRange Start="6167" End="6370"></OffsetRange>
        <LineRange Start="218" End="223"></LineRange>
        <Text>CircularBuffer&lt;int&gt; mockData = new CircularBuffer&lt;int&gt;(4);
            mockData.Add(1);
            mockData.Add(2);
            mockData.Add(3);
            mockData.Add(4);
            mockData.Add(5);</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\CircularBufferTests.cs</FileName>
        <OffsetRange Start="6673" End="6876"></OffsetRange>
        <LineRange Start="235" End="240"></LineRange>
        <Text>CircularBuffer&lt;int&gt; mockData = new CircularBuffer&lt;int&gt;(4);
            mockData.Add(1);
            mockData.Add(2);
            mockData.Add(3);
            mockData.Add(4);
            mockData.Add(5);</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\CircularBufferTests.cs</FileName>
        <OffsetRange Start="7185" End="7388"></OffsetRange>
        <LineRange Start="252" End="257"></LineRange>
        <Text>CircularBuffer&lt;int&gt; mockData = new CircularBuffer&lt;int&gt;(4);
            mockData.Add(1);
            mockData.Add(2);
            mockData.Add(3);
            mockData.Add(4);
            mockData.Add(5);</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\CircularBufferTests.cs</FileName>
        <OffsetRange Start="7699" End="7902"></OffsetRange>
        <LineRange Start="269" End="274"></LineRange>
        <Text>CircularBuffer&lt;int&gt; mockData = new CircularBuffer&lt;int&gt;(4);
            mockData.Add(1);
            mockData.Add(2);
            mockData.Add(3);
            mockData.Add(4);
            mockData.Add(5);</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\CircularBufferTests.cs</FileName>
        <OffsetRange Start="9031" End="9234"></OffsetRange>
        <LineRange Start="316" End="321"></LineRange>
        <Text>CircularBuffer&lt;int&gt; mockData = new CircularBuffer&lt;int&gt;(4);
            mockData.Add(1);
            mockData.Add(2);
            mockData.Add(3);
            mockData.Add(4);
            mockData.Add(5);</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\CircularBufferTests.cs</FileName>
        <OffsetRange Start="10051" End="10322"></OffsetRange>
        <LineRange Start="352" End="359"></LineRange>
        <Text>CircularBuffer&lt;int&gt; mockData = new CircularBuffer&lt;int&gt;(4);
            mockData.Add(0);
            mockData.Add(0);
            mockData.Add(0);
            mockData.Add(1);

            // Should now write over the oldest value (at index 0)
            mockData.Add(1);</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="99">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\Array2DTests.cs</FileName>
        <OffsetRange Start="1398" End="1495"></OffsetRange>
        <LineRange Start="48" End="48"></LineRange>
        <Text>Array2D&lt;int&gt; mockArray = new Array2D&lt;int&gt;(2, 4) {[1, 0] = 0, [1, 1] = 1, [1, 2] = 2, [1, 3] = 3};</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\Array2DTests.cs</FileName>
        <OffsetRange Start="1783" End="1880"></OffsetRange>
        <LineRange Start="61" End="61"></LineRange>
        <Text>Array2D&lt;int&gt; mockArray = new Array2D&lt;int&gt;(2, 4) {[1, 0] = 0, [1, 1] = 1, [1, 2] = 2, [1, 3] = 3};</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\Array2DTests.cs</FileName>
        <OffsetRange Start="2168" End="2265"></OffsetRange>
        <LineRange Start="74" End="74"></LineRange>
        <Text>Array2D&lt;int&gt; mockArray = new Array2D&lt;int&gt;(2, 4) {[1, 0] = 0, [1, 1] = 1, [1, 2] = 2, [1, 3] = 3};</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="99">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\StringKeyDictionaryTests.cs</FileName>
        <OffsetRange Start="2854" End="3144"></OffsetRange>
        <LineRange Start="86" End="92"></LineRange>
        <Text>StringKeyDictionary&lt;string&gt; dictionary = new StringKeyDictionary&lt;string&gt;(16);
            string initialKey = "myKey";
            string myValue = "myValue";
            char val = 'A';

            string addedKey = initialKey;
            int initialCapacity = dictionary.Entries.Length;</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\StringKeyDictionaryTests.cs</FileName>
        <OffsetRange Start="5189" End="5479"></OffsetRange>
        <LineRange Start="160" End="166"></LineRange>
        <Text>StringKeyDictionary&lt;string&gt; dictionary = new StringKeyDictionary&lt;string&gt;(16);
            string initialKey = "myKey";
            string myValue = "myValue";
            char val = 'A';

            string addedKey = initialKey;
            int initialCapacity = dictionary.Entries.Length;</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\StringKeyDictionaryTests.cs</FileName>
        <OffsetRange Start="7420" End="7710"></OffsetRange>
        <LineRange Start="232" End="238"></LineRange>
        <Text>StringKeyDictionary&lt;string&gt; dictionary = new StringKeyDictionary&lt;string&gt;(16);
            string initialKey = "myKey";
            string myValue = "myValue";
            char val = 'A';

            string addedKey = initialKey;
            int initialCapacity = dictionary.Entries.Length;</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="97">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\StringKeyDictionaryTests.cs</FileName>
        <OffsetRange Start="10534" End="10801"></OffsetRange>
        <LineRange Start="332" End="337"></LineRange>
        <Text>StringKeyDictionary&lt;string&gt; dictionary = new StringKeyDictionary&lt;string&gt;(16);
            string myKey = "myKey";
            string myValue = "myValue";
            dictionary.AddSafe(myKey, myValue);

            bool removedFirstTime = dictionary.TryRemove(myKey);</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\StringKeyDictionaryTests.cs</FileName>
        <OffsetRange Start="11440" End="11707"></OffsetRange>
        <LineRange Start="360" End="365"></LineRange>
        <Text>StringKeyDictionary&lt;string&gt; dictionary = new StringKeyDictionary&lt;string&gt;(16);
            string myKey = "myKey";
            string myValue = "myValue";
            dictionary.AddSafe(myKey, myValue);

            bool removedFirstTime = dictionary.TryRemove(myKey);</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="97">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\SimpleListExtensionsTests.cs</FileName>
        <OffsetRange Start="1115" End="1429"></OffsetRange>
        <LineRange Start="42" End="48"></LineRange>
        <Text>SimpleList&lt;string&gt; mockData = new SimpleList&lt;string&gt;(3);

            mockData.AddWithExpandCheckUniqueItem("test1");
            mockData.AddWithExpandCheckUniqueItem("test2");
            mockData.AddWithExpandCheckUniqueItem("test3");

            bool evaluate = mockData.AddWithExpandCheckUniqueItem("test1");</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\SimpleListExtensionsTests.cs</FileName>
        <OffsetRange Start="1631" End="1945"></OffsetRange>
        <LineRange Start="57" End="63"></LineRange>
        <Text>SimpleList&lt;string&gt; mockData = new SimpleList&lt;string&gt;(3);

            mockData.AddWithExpandCheckUniqueItem("test1");
            mockData.AddWithExpandCheckUniqueItem("test2");
            mockData.AddWithExpandCheckUniqueItem("test3");

            bool evaluate = mockData.AddWithExpandCheckUniqueItem("test4");</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="97">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\Array2D.cs</FileName>
        <OffsetRange Start="3752" End="3966"></OffsetRange>
        <LineRange Start="99" End="103"></LineRange>
        <Text>for (int i = 0; i &lt; RowCount; i++)
            for (int j = 0; j &lt; currentLengthOfArrays; j++)
            {
                newArray[i * newLengthOfArrays + j] = Array[i * currentLengthOfArrays + j];
            }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\NativeArray2D.cs</FileName>
        <OffsetRange Start="4163" End="4377"></OffsetRange>
        <LineRange Start="92" End="96"></LineRange>
        <Text>for (int i = 0; i &lt; RowCount; i++)
            for (int j = 0; j &lt; currentLengthOfArrays; j++)
            {
                newArray[i * newLengthOfArrays + j] = Array[i * currentLengthOfArrays + j];
            }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="97">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Vector3ExtensionsTests.cs</FileName>
        <OffsetRange Start="880" End="1070"></OffsetRange>
        <LineRange Start="31" End="38"></LineRange>
        <Text>{
            Vector3 a = new Vector3(1, 1, 1);
            Vector3 b = new Vector3(1, 1, 1);

            bool evaluate = a.Approximately(b);

            Assert.IsTrue(evaluate);
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Vector3ExtensionsTests.cs</FileName>
        <OffsetRange Start="1194" End="1392"></OffsetRange>
        <LineRange Start="43" End="50"></LineRange>
        <Text>{
            Vector3 a = new Vector3(1.000001f, 1, 1);
            Vector3 b = new Vector3(1, 1, 1);

            bool evaluate = a.Approximately(b);

            Assert.IsTrue(evaluate);
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Vector3ExtensionsTests.cs</FileName>
        <OffsetRange Start="1508" End="1698"></OffsetRange>
        <LineRange Start="55" End="62"></LineRange>
        <Text>{
            Vector3 a = new Vector3(0, 0, 0);
            Vector3 b = new Vector3(0, 0, 0);

            bool evaluate = a.Approximately(b);

            Assert.IsTrue(evaluate);
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="95">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Developer\Reports\Resource\IntegerDiff.cs</FileName>
        <OffsetRange Start="1159" End="1441"></OffsetRange>
        <LineRange Start="44" End="46"></LineRange>
        <Text>return LeftHandSide == 0
                    ? $"{GetBeforeAndAfterOutput()} = {ResourceReport.PositiveSign(Change)}{Change.ToString()}"
                    : $"{GetBeforeAndAfterOutput()} = {ResourceReport.PositiveSign(Change)}{Change.ToString(),-12} {OptionalPercentageOutput()}";</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Developer\Reports\Resource\LongDiff.cs</FileName>
        <OffsetRange Start="2071" End="2345"></OffsetRange>
        <LineRange Start="58" End="60"></LineRange>
        <Text>return LeftHandSide == 0
                ? $"{GetBeforeAndAfterOutput()} = {ResourceReport.PositiveSign(Change)}{Change.ToString()}"
                : $"{GetBeforeAndAfterOutput()} = {ResourceReport.PositiveSign(Change)}{Change.ToString(),-12} {OptionalPercentageOutput()}";</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="93">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="36992" End="37425"></OffsetRange>
        <LineRange Start="861" End="870"></LineRange>
        <Text>int nextFreeIndex = SparseArray[indexToClaim];

            DenseArray[Count] = indexToClaim; // Point the next dense id at our newly claimed sparse index.
            SparseArray[indexToClaim] = Count; // Point our newly claimed sparse index at the dense index.

            array0[Count] = obj0;
            array1[Count] = obj1;

            ++Count;
            FreeIndex = nextFreeIndex; // Set the free list head for next time.</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="57094" End="57526"></OffsetRange>
        <LineRange Start="1345" End="1353"></LineRange>
        <Text>int nextFreeIndex = SparseArray[indexToClaim];
            DenseArray[Count] = indexToClaim; // Point the next dense id at our newly claimed sparse index.
            SparseArray[indexToClaim] = Count; // Point our newly claimed sparse index at the dense index.

            array0[Count] = obj0;
            array1[Count] = obj1;

            ++Count;
            FreeIndex = nextFreeIndex; // Set the free list head for next time.</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="92">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="68921" End="69153"></OffsetRange>
        <LineRange Start="1626" End="1631"></LineRange>
        <Text>DenseArray[newLength] = -1;
            array0[newLength] = default;
            array1[newLength] = default;
            array2[newLength] = default;
            array3[newLength] = default;
            array4[newLength] = default;</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="70369" End="70601"></OffsetRange>
        <LineRange Start="1659" End="1664"></LineRange>
        <Text>DenseArray[newLength] = -1;
            array0[newLength] = default;
            array1[newLength] = default;
            array2[newLength] = default;
            array3[newLength] = default;
            array4[newLength] = default;</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="92">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Editor\Build\BuildInfoProvider.cs</FileName>
        <OffsetRange Start="2411" End="2767"></OffsetRange>
        <LineRange Start="52" End="60"></LineRange>
        <Text>code.Append(";");
            code.NextLine();

            // Changelist
            code.AppendLine("/// &lt;summary&gt;");
            code.AppendLine("///     The revision the workspace was at when the build was made.");
            code.AppendLine("/// &lt;/summary&gt;");
            code.ApplyIndent();
            code.Append("public const int Changelist = ");</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Editor\Build\BuildInfoProvider.cs</FileName>
        <OffsetRange Start="3056" End="3406"></OffsetRange>
        <LineRange Start="65" End="73"></LineRange>
        <Text>code.Append(";");
            code.NextLine();

            // BuildTask
            code.AppendLine("/// &lt;summary&gt;");
            code.AppendLine("///     The specific build task used to create the build.");
            code.AppendLine("/// &lt;/summary&gt;");
            code.ApplyIndent();
            code.Append("public const string BuildTask = \"");</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Editor\Build\BuildInfoProvider.cs</FileName>
        <OffsetRange Start="3685" End="4040"></OffsetRange>
        <LineRange Start="78" End="86"></LineRange>
        <Text>code.Append("\";");
            code.NextLine();

            // Stream
            code.AppendLine("/// &lt;summary&gt;");
            code.AppendLine("///     The version control stream which the build was built from.");
            code.AppendLine("/// &lt;/summary&gt;");
            code.ApplyIndent();
            code.Append("public const string Stream = \"");</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Editor\Build\BuildInfoProvider.cs</FileName>
        <OffsetRange Start="4323" End="4668"></OffsetRange>
        <LineRange Start="91" End="99"></LineRange>
        <Text>code.Append("\";");
            code.NextLine();

            // Build Description
            code.AppendLine("/// &lt;summary&gt;");
            code.AppendLine("///     The passed in build description.");
            code.AppendLine("/// &lt;/summary&gt;");
            code.ApplyIndent();
            code.Append("public const string Description = \"");</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Editor\Build\BuildInfoProvider.cs</FileName>
        <OffsetRange Start="4990" End="5365"></OffsetRange>
        <LineRange Start="105" End="113"></LineRange>
        <Text>code.Append("\";");
            code.NextLine();

            // Internal Description
            code.AppendLine("/// &lt;summary&gt;");
            code.AppendLine("///     The internal description set through method invoke.");
            code.AppendLine("/// &lt;/summary&gt;");
            code.ApplyIndent();
            code.Append("public const string InternalDescription = \"");</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Editor\Build\BuildInfoProvider.cs</FileName>
        <OffsetRange Start="5527" End="5875"></OffsetRange>
        <LineRange Start="117" End="125"></LineRange>
        <Text>code.Append("\";");
            code.NextLine();

            // Timestamp
            code.AppendLine("/// &lt;summary&gt;");
            code.AppendLine("///     The date and time when the build was started.");
            code.AppendLine("/// &lt;/summary&gt;");
            code.ApplyIndent();
            code.Append("public const string Timestamp = \"");</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="91">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Mathematics\Random\WELL1024aTests.cs</FileName>
        <OffsetRange Start="4424" End="4664"></OffsetRange>
        <LineRange Start="159" End="167"></LineRange>
        <Text>{
            WELL1024a mockWell = new WELL1024a(MockSeed);
            int nextValue = mockWell.NextInteger(1, 1);

            bool evaluate = nextValue == 1;

            mockWell.Dispose();
            Assert.IsTrue(evaluate);
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Mathematics\Random\WELL1024aTests.cs</FileName>
        <OffsetRange Start="4789" End="5029"></OffsetRange>
        <LineRange Start="172" End="180"></LineRange>
        <Text>{
            WELL1024a mockWell = new WELL1024a(MockSeed);
            int nextValue = mockWell.NextInteger(0, 0);

            bool evaluate = nextValue == 0;

            mockWell.Dispose();
            Assert.IsTrue(evaluate);
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="91">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\SemanticVersion.cs</FileName>
        <OffsetRange Start="1645" End="1844"></OffsetRange>
        <LineRange Start="47" End="51"></LineRange>
        <Text>case 4:
                    int.TryParse(split[0], out Major);
                    int.TryParse(split[1], out Minor);
                    int.TryParse(split[2], out Patch);
                    break;</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\SemanticVersion.cs</FileName>
        <OffsetRange Start="1861" End="2060"></OffsetRange>
        <LineRange Start="52" End="56"></LineRange>
        <Text>case 3:
                    int.TryParse(split[0], out Major);
                    int.TryParse(split[1], out Minor);
                    int.TryParse(split[2], out Patch);
                    break;</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="90">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\IListExtensionsTests.cs</FileName>
        <OffsetRange Start="2283" End="2544"></OffsetRange>
        <LineRange Start="79" End="87"></LineRange>
        <Text>object searchItem = new object();
            List&lt;object&gt; listItems = new List&lt;object&gt;
            {
                new object(),
                searchItem,
                new object(),
                new object(),
                searchItem
            };</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\IListExtensionsTests.cs</FileName>
        <OffsetRange Start="3939" End="4200"></OffsetRange>
        <LineRange Start="138" End="146"></LineRange>
        <Text>object searchItem = new object();
            List&lt;object&gt; listItems = new List&lt;object&gt;
            {
                new object(),
                searchItem,
                new object(),
                new object(),
                searchItem
            };</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\IListExtensionsTests.cs</FileName>
        <OffsetRange Start="5068" End="5329"></OffsetRange>
        <LineRange Start="178" End="186"></LineRange>
        <Text>object searchItem = new object();
            List&lt;object&gt; listItems = new List&lt;object&gt;
            {
                new object(),
                searchItem,
                new object(),
                new object(),
                searchItem
            };</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="89">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\CircularBufferTests.cs</FileName>
        <OffsetRange Start="1679" End="1853"></OffsetRange>
        <LineRange Start="55" End="59"></LineRange>
        <Text>CircularBuffer&lt;int&gt; mockData = new CircularBuffer&lt;int&gt;(4);
            mockData.Add(4);
            mockData.Add(3);
            mockData.Add(2);
            mockData.Add(1);</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\CircularBufferTests.cs</FileName>
        <OffsetRange Start="5409" End="5583"></OffsetRange>
        <LineRange Start="191" End="195"></LineRange>
        <Text>CircularBuffer&lt;int&gt; mockData = new CircularBuffer&lt;int&gt;(4);
            mockData.Add(4);
            mockData.Add(3);
            mockData.Add(2);
            mockData.Add(1);</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\CircularBufferTests.cs</FileName>
        <OffsetRange Start="9485" End="9659"></OffsetRange>
        <LineRange Start="333" End="337"></LineRange>
        <Text>CircularBuffer&lt;int&gt; mockData = new CircularBuffer&lt;int&gt;(4);
            mockData.Add(0);
            mockData.Add(0);
            mockData.Add(0);
            mockData.Add(1);</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="89">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Vector2ExtensionsTests.cs</FileName>
        <OffsetRange Start="874" End="1058"></OffsetRange>
        <LineRange Start="31" End="38"></LineRange>
        <Text>{
            Vector2 a = new Vector2(1, 1);
            Vector2 b = new Vector2(1, 1);

            bool evaluate = a.Approximately(b);

            Assert.IsTrue(evaluate);
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Vector2ExtensionsTests.cs</FileName>
        <OffsetRange Start="1182" End="1374"></OffsetRange>
        <LineRange Start="43" End="50"></LineRange>
        <Text>{
            Vector2 a = new Vector2(1.000001f, 1);
            Vector2 b = new Vector2(1, 1);

            bool evaluate = a.Approximately(b);

            Assert.IsTrue(evaluate);
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Vector2ExtensionsTests.cs</FileName>
        <OffsetRange Start="1490" End="1674"></OffsetRange>
        <LineRange Start="55" End="62"></LineRange>
        <Text>{
            Vector2 a = new Vector2(0, 0);
            Vector2 b = new Vector2(0, 0);

            bool evaluate = a.Approximately(b);

            Assert.IsTrue(evaluate);
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="88">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Editor.Tests\EditMode\DomainReloadTests.cs</FileName>
        <OffsetRange Start="937" End="1210"></OffsetRange>
        <LineRange Start="31" End="34"></LineRange>
        <Text>randomCode.Append(
                Platform.SafeCharacterPool[Core.Random.NextInteger(0, Platform.CharacterPoolLengthExclusive)]);
            randomCode.Append(
                Platform.SafeCharacterPool[Core.Random.NextInteger(0, Platform.CharacterPoolLengthExclusive)]);</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Editor.Tests\EditMode\DomainReloadTests.cs</FileName>
        <OffsetRange Start="1223" End="1496"></OffsetRange>
        <LineRange Start="35" End="38"></LineRange>
        <Text>randomCode.Append(
                Platform.SafeCharacterPool[Core.Random.NextInteger(0, Platform.CharacterPoolLengthExclusive)]);
            randomCode.Append(
                Platform.SafeCharacterPool[Core.Random.NextInteger(0, Platform.CharacterPoolLengthExclusive)]);</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="88">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Editor.Tests\EditMode\DomainReloadTests.cs</FileName>
        <OffsetRange Start="3113" End="3412"></OffsetRange>
        <LineRange Start="80" End="85"></LineRange>
        <Text>File.WriteAllText(GetFilePath(),GetFileContent());
            AssetDatabase.ImportAsset(GetFilePath().Replace(Application.dataPath + "\\", "Assets/"));
            yield return new RecompileScripts();

            // Any warning or error will fail this
            LogAssert.NoUnexpectedReceived();</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Editor.Tests\EditMode\DomainReloadTests.cs</FileName>
        <OffsetRange Start="3654" End="3953"></OffsetRange>
        <LineRange Start="93" End="98"></LineRange>
        <Text>File.WriteAllText(GetFilePath(),GetFileContent());
            AssetDatabase.ImportAsset(GetFilePath().Replace(Application.dataPath + "\\", "Assets/"));
            yield return new RecompileScripts();

            // Any warning or error will fail this
            LogAssert.NoUnexpectedReceived();</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="88">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\SimpleListTests.cs</FileName>
        <OffsetRange Start="12731" End="12969"></OffsetRange>
        <LineRange Start="394" End="398"></LineRange>
        <Text>mockList.Array[0] == 5 &amp;&amp;
                            mockList.Array[1] == 4 &amp;&amp;
                            mockList.Array[2] == 3 &amp;&amp;
                            mockList.Array[3] == 2 &amp;&amp;
                            mockList.Array[4] == 1</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\SimpleListTests.cs</FileName>
        <OffsetRange Start="13510" End="13748"></OffsetRange>
        <LineRange Start="419" End="423"></LineRange>
        <Text>mockList.Array[0] == 4 &amp;&amp;
                            mockList.Array[1] == 3 &amp;&amp;
                            mockList.Array[2] == 2 &amp;&amp;
                            mockList.Array[3] == 1 &amp;&amp;
                            mockList.Array[4] == 0</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="87">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\SimpleListExtensionsTests.cs</FileName>
        <OffsetRange Start="6166" End="6424"></OffsetRange>
        <LineRange Start="178" End="182"></LineRange>
        <Text>const string k_SearchItem = "Hello";
            SimpleList&lt;string&gt; listOfStrings = new SimpleList&lt;string&gt;(3);
            listOfStrings.AddUnchecked(k_SearchItem);
            listOfStrings.AddUnchecked("World");
            listOfStrings.AddUnchecked("!");</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\SimpleListExtensionsTests.cs</FileName>
        <OffsetRange Start="7305" End="7563"></OffsetRange>
        <LineRange Start="212" End="216"></LineRange>
        <Text>const string k_SearchItem = "Hello";
            SimpleList&lt;string&gt; listOfStrings = new SimpleList&lt;string&gt;(3);
            listOfStrings.AddUnchecked(k_SearchItem);
            listOfStrings.AddUnchecked("World");
            listOfStrings.AddUnchecked("!");</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="87">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\StringKeyDictionary.cs</FileName>
        <OffsetRange Start="1798" End="2050"></OffsetRange>
        <LineRange Start="57" End="63"></LineRange>
        <Text>ref StringKeyEntry&lt;TValue&gt; entry = ref Entries[freeIndex];

            FreeListHead = entry.Next &amp; 0x7FFFFFFF;
            entry.Next = indexAtBucket;
            entry.Key = key;
            entry.Value = value;
            entry.HashCode = hashCode;</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\StringKeyDictionary.cs</FileName>
        <OffsetRange Start="18700" End="18972"></OffsetRange>
        <LineRange Start="550" End="556"></LineRange>
        <Text>ref StringKeyEntry&lt;TValue&gt; entry = ref Entries[freeIndex];

                FreeListHead = entry.Next &amp; 0x7FFFFFFF;
                entry.Next = indexAtBucket;
                entry.Key = key;
                entry.Value = value;
                entry.HashCode = hashCode;</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="84">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\SimpleList.cs</FileName>
        <OffsetRange Start="20033" End="20203"></OffsetRange>
        <LineRange Start="499" End="501"></LineRange>
        <Text>T[] newArray = pool.Get(combinedLength);
                System.Array.Copy(array, 0, newArray, 0, arrayLength);
                System.Array.Clear(array, 0, arrayLength);</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\SimpleList.cs</FileName>
        <OffsetRange Start="21965" End="22135"></OffsetRange>
        <LineRange Start="545" End="547"></LineRange>
        <Text>T[] newArray = pool.Get(combinedLength);
                System.Array.Copy(array, 0, newArray, 0, arrayLength);
                System.Array.Clear(array, 0, arrayLength);</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="84">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\NativeSparseSet.cs</FileName>
        <OffsetRange Start="4369" End="4840"></OffsetRange>
        <LineRange Start="99" End="108"></LineRange>
        <Text>int nextFreeIndex = SparseArray[indexToClaim];
            DenseArray[Count] = indexToClaim; // Point the next dense id at our newly claimed sparse index.
            SparseArray[indexToClaim] = Count; // Point our newly claimed sparse index at the dense index.
            denseIndex = Count;

            ++Count;
            FreeIndex = nextFreeIndex; // Set the free list head for next time.

            sparseIndex = indexToClaim;
            return needsExpansion;</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="3404" End="3875"></OffsetRange>
        <LineRange Start="92" End="101"></LineRange>
        <Text>int nextFreeIndex = SparseArray[indexToClaim];
            DenseArray[Count] = indexToClaim; // Point the next dense id at our newly claimed sparse index.
            SparseArray[indexToClaim] = Count; // Point our newly claimed sparse index at the dense index.
            denseIndex = Count;

            ++Count;
            FreeIndex = nextFreeIndex; // Set the free list head for next time.

            sparseIndex = indexToClaim;
            return needsExpansion;</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="83">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Mathematics\RangeTests.cs</FileName>
        <OffsetRange Start="757" End="933"></OffsetRange>
        <LineRange Start="28" End="32"></LineRange>
        <Text>{
            double data = Range.GetDouble(1, 0, 9);
            bool evaluate = (Math.Abs(data - 9) &lt; Platform.FloatTolerance);
            Assert.IsTrue(evaluate);
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Mathematics\RangeTests.cs</FileName>
        <OffsetRange Start="1045" End="1227"></OffsetRange>
        <LineRange Start="37" End="41"></LineRange>
        <Text>{
            double data = Range.GetDouble(0.5d, 0, 9);
            bool evaluate = (Math.Abs(data - 4.5d) &lt; Platform.FloatTolerance);
            Assert.IsTrue(evaluate);
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="83">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Mathematics\RangeTests.cs</FileName>
        <OffsetRange Start="2347" End="2522"></OffsetRange>
        <LineRange Start="83" End="87"></LineRange>
        <Text>{
            float data = Range.GetSingle(1, 0, 9);
            bool evaluate = (Math.Abs(data - 9) &lt; Platform.FloatTolerance);
            Assert.IsTrue(evaluate);
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Mathematics\RangeTests.cs</FileName>
        <OffsetRange Start="2634" End="2815"></OffsetRange>
        <LineRange Start="92" End="96"></LineRange>
        <Text>{
            float data = Range.GetSingle(0.5f, 0, 9);
            bool evaluate = (Math.Abs(data - 4.5f) &lt; Platform.FloatTolerance);
            Assert.IsTrue(evaluate);
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="83">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\StringKeyDictionary.cs</FileName>
        <OffsetRange Start="7898" End="8106"></OffsetRange>
        <LineRange Start="234" End="240"></LineRange>
        <Text>for (int i = oldCapacity; i &lt; nextPrimeCapacity; i++)
            {
                newEntries[i].Next = (1 &lt;&lt; 31) | (i + 1);
            }

            Buckets = newBuckets;
            Entries = newEntries;</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\StringKeyDictionary.cs</FileName>
        <OffsetRange Start="9571" End="9799"></OffsetRange>
        <LineRange Start="278" End="284"></LineRange>
        <Text>for (int i = oldCapacity; i &lt; nextPrimeCapacity; i++)
                {
                    newEntries[i].Next = (1 &lt;&lt; 31) | (i + 1);
                }

                Buckets = newBuckets;
                Entries = newEntries;</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="83">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\NativeSparseSet.cs</FileName>
        <OffsetRange Start="2008" End="2204"></OffsetRange>
        <LineRange Start="49" End="56"></LineRange>
        <Text>Count = 0;
            FreeIndex = 0;

            for (int i = 0; i &lt; initialCapacity; i++)
            {
                DenseArray[i] = -1;
                SparseArray[i] = i + 1;
            }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="1608" End="1804"></OffsetRange>
        <LineRange Start="47" End="54"></LineRange>
        <Text>Count = 0;
            FreeIndex = 0;

            for (int i = 0; i &lt; initialCapacity; i++)
            {
                DenseArray[i] = -1;
                SparseArray[i] = i + 1;
            }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="82">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\StringKeyDictionary.cs</FileName>
        <OffsetRange Start="6261" End="6488"></OffsetRange>
        <LineRange Start="185" End="189"></LineRange>
        <Text>if (key == null) throw new ArgumentNullException();

            int hashCode = key.GetStableHashCode() &amp; 0x7FFFFFFF;
            int bucketIndex = hashCode % Buckets.Length;
            int nextKeyIndex = Buckets[bucketIndex];</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\StringKeyDictionary.cs</FileName>
        <OffsetRange Start="10154" End="10381"></OffsetRange>
        <LineRange Start="295" End="299"></LineRange>
        <Text>if (key == null) throw new ArgumentNullException();

            int hashCode = key.GetStableHashCode() &amp; 0x7FFFFFFF;
            int bucketIndex = hashCode % Buckets.Length;
            int nextKeyIndex = Buckets[bucketIndex];</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\StringKeyDictionary.cs</FileName>
        <OffsetRange Start="17096" End="17335"></OffsetRange>
        <LineRange Start="501" End="505"></LineRange>
        <Text>if (key == null) throw new ArgumentNullException();

                int hashCode = key.GetStableHashCode() &amp; 0x7FFFFFFF;
                int bucketIndex = hashCode % Buckets.Length;
                int nextKeyIndex = Buckets[bucketIndex];</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="81">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Editor\ProjectSettings\ProjectSettingsProvider.cs</FileName>
        <OffsetRange Start="25250" End="25601"></OffsetRange>
        <LineRange Start="630" End="642"></LineRange>
        <Text>{
            if (element == null) return;
            element.SetValueWithoutNotify(rhs);

            if (lhs != rhs)
            {
                element.AddToClassList(ResourcesProvider.ChangedClass);
            }
            else
            {
                element.RemoveFromClassList(ResourcesProvider.ChangedClass);
            }
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Editor\ProjectSettings\ProjectSettingsProvider.cs</FileName>
        <OffsetRange Start="26173" End="26523"></OffsetRange>
        <LineRange Start="659" End="670"></LineRange>
        <Text>{
            if (element == null) return;
            element.SetValueWithoutNotify(rhs);
            if (lhs != rhs)
            {
                element.AddToClassList(ResourcesProvider.ChangedClass);
            }
            else
            {
                element.RemoveFromClassList(ResourcesProvider.ChangedClass);
            }
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="81">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Mathematics\Random\RandomAdaptorTests.cs</FileName>
        <OffsetRange Start="1993" End="2195"></OffsetRange>
        <LineRange Start="70" End="75"></LineRange>
        <Text>bool evaluate = a &gt;= 0 &amp;&amp; a &lt;= 10 &amp;&amp;
                            b &gt;= 0 &amp;&amp; b &lt;= 10 &amp;&amp;
                            c &gt;= 0 &amp;&amp; c &lt;= 10;

            mockWell.Dispose();
            Assert.IsTrue(evaluate);</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Mathematics\Random\RandomAdaptorTests.cs</FileName>
        <OffsetRange Start="2590" End="2791"></OffsetRange>
        <LineRange Start="90" End="94"></LineRange>
        <Text>bool evaluate = a &gt;= 0 &amp;&amp; a &lt;= 10 &amp;&amp;
                            b &gt;= 0 &amp;&amp; b &lt;= 10 &amp;&amp;
                            c &gt;= 0 &amp;&amp; c &lt;= 10;
            mockWell.Dispose();
            Assert.IsTrue(evaluate);</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="81">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Vector3ExtensionsTests.cs</FileName>
        <OffsetRange Start="5123" End="5328"></OffsetRange>
        <LineRange Start="179" End="185"></LineRange>
        <Text>{
            bool parse = "3,2,1".TryParseVector3(out Vector3 parsedLocation);

            bool evaluate = parse &amp;&amp; parsedLocation == new Vector3(3, 2, 1);

            Assert.IsTrue(evaluate);
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Vector3ExtensionsTests.cs</FileName>
        <OffsetRange Start="5457" End="5664"></OffsetRange>
        <LineRange Start="190" End="196"></LineRange>
        <Text>{
            bool parse = "3, 2, 1".TryParseVector3(out Vector3 parsedLocation);

            bool evaluate = parse &amp;&amp; parsedLocation == new Vector3(3, 2, 1);

            Assert.IsTrue(evaluate);
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="81">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Developer\Reports\Resource\IntegerDiff.cs</FileName>
        <OffsetRange Start="522" End="827"></OffsetRange>
        <LineRange Start="18" End="32"></LineRange>
        <Text>{
            LeftHandSide = lhs;
            RightHandSide = rhs;


            Change = rhs - lhs;
            if (lhs == 0)
            {
                Percentage = Change;
            }
            else
            {
                Percentage = 100f * ((float)Change / lhs);
            }
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Developer\Reports\Resource\LongDiff.cs</FileName>
        <OffsetRange Start="541" End="845"></OffsetRange>
        <LineRange Start="20" End="33"></LineRange>
        <Text>{
            LeftHandSide = lhs;
            RightHandSide = rhs;

            Change = rhs - lhs;
            if (lhs == 0)
            {
                Percentage = Change;
            }
            else
            {
                Percentage = 100f * ((float)Change / lhs);
            }
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="80">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\SegmentedString.cs</FileName>
        <OffsetRange Start="3798" End="4199"></OffsetRange>
        <LineRange Start="126" End="135"></LineRange>
        <Text>c = returnValue.m_Characters[i];

                // Check character value and shift it if necessary (32)
                if (c &gt;= StringExtensions.AsciiUpperCaseStart &amp;&amp; c &lt;= StringExtensions.AsciiUpperCaseEnd)
                {
                    c ^= StringExtensions.AsciiCaseShift;

                    // Update value
                    returnValue.m_Characters[i] = (char)c;
                }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\SegmentedString.cs</FileName>
        <OffsetRange Start="6402" End="6803"></OffsetRange>
        <LineRange Start="194" End="203"></LineRange>
        <Text>c = returnValue.m_Characters[i];

                // Check character value and shift it if necessary (32)
                if (c &gt;= StringExtensions.AsciiUpperCaseStart &amp;&amp; c &lt;= StringExtensions.AsciiUpperCaseEnd)
                {
                    c ^= StringExtensions.AsciiCaseShift;

                    // Update value
                    returnValue.m_Characters[i] = (char)c;
                }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="78">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="34745" End="35144"></OffsetRange>
        <LineRange Start="807" End="815"></LineRange>
        <Text>int nextFreeIndex = SparseArray[indexToClaim];

            DenseArray[Count] = indexToClaim; // Point the next dense id at our newly claimed sparse index.
            SparseArray[indexToClaim] = Count; // Point our newly claimed sparse index at the dense index.

            array0[Count] = obj0;

            ++Count;
            FreeIndex = nextFreeIndex; // Set the free list head for next time.</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="56322" End="56720"></OffsetRange>
        <LineRange Start="1326" End="1333"></LineRange>
        <Text>int nextFreeIndex = SparseArray[indexToClaim];
            DenseArray[Count] = indexToClaim; // Point the next dense id at our newly claimed sparse index.
            SparseArray[indexToClaim] = Count; // Point our newly claimed sparse index at the dense index.

            array0[Count] = obj0;

            ++Count;
            FreeIndex = nextFreeIndex; // Set the free list head for next time.</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="78">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Developer\Reports\ResourcesAuditReport.cs</FileName>
        <OffsetRange Start="4354" End="4586"></OffsetRange>
        <LineRange Start="104" End="112"></LineRange>
        <Text>newList.Sort();

                // Output each item
                for (int i = 0; i &lt; count; i++)
                {
                    newList[i].Output(context, builder);
                }

                builder.AppendLine();</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Developer\Reports\ResourcesDiffReport.cs</FileName>
        <OffsetRange Start="8771" End="9003"></OffsetRange>
        <LineRange Start="210" End="218"></LineRange>
        <Text>newList.Sort();

                // Output each item
                for (int i = 0; i &lt; count; i++)
                {
                    newList[i].Output(context, builder);
                }

                builder.AppendLine();</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="77">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Editor.Tests\EditMode\DomainReloadTests.cs</FileName>
        <OffsetRange Start="1805" End="2065"></OffsetRange>
        <LineRange Start="49" End="52"></LineRange>
        <Text>Developer.TextGenerator code = new Developer.TextGenerator("    ", "{", "}");
            code.AppendLine("// Generated domain reload test file.");
            code.AppendLine("// ReSharper disable All");
            code.AppendLine("#pragma warning disable");</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Editor\ConfigGenerator.cs</FileName>
        <OffsetRange Start="432" End="736"></OffsetRange>
        <LineRange Start="15" End="20"></LineRange>
        <Text>Developer.TextGenerator code = new Developer.TextGenerator("    ", "{", "}");

            // Start header
            code.AppendLine("// Generated file of difference from default config.");
            code.AppendLine("// ReSharper disable All");
            code.AppendLine("#pragma warning disable");</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="77">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Vector2ExtensionsTests.cs</FileName>
        <OffsetRange Start="3824" End="4029"></OffsetRange>
        <LineRange Start="142" End="148"></LineRange>
        <Text>{
            bool parse = "1.5,2".TryParseVector2(out Vector2 parsedLocation);

            bool evaluate = parse &amp;&amp; parsedLocation == new Vector2(1.5f, 2);

            Assert.IsTrue(evaluate);
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Vector2ExtensionsTests.cs</FileName>
        <OffsetRange Start="4158" End="4359"></OffsetRange>
        <LineRange Start="153" End="159"></LineRange>
        <Text>{
            bool parse = "1, 2".TryParseVector2(out Vector2 parsedLocation);

            bool evaluate = parse &amp;&amp; parsedLocation == new Vector2(1, 2);

            Assert.IsTrue(evaluate);
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="77">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Mathematics\FibonacciHash.cs</FileName>
        <OffsetRange Start="912" End="1140"></OffsetRange>
        <LineRange Start="20" End="24"></LineRange>
        <Text>LongDoubleConversionUnion u;
            u.DoubleValue = 0.0;
            u.LongValue = 0x4330000000000000L + pow2Length;
            u.DoubleValue -= 4503599627370496.0;
            int index = (int)(u.LongValue &gt;&gt; 52) - 0x3FF;</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Mathematics\FibonacciHash.cs</FileName>
        <OffsetRange Start="2514" End="2742"></OffsetRange>
        <LineRange Start="52" End="56"></LineRange>
        <Text>LongDoubleConversionUnion u;
            u.DoubleValue = 0.0;
            u.LongValue = 0x4330000000000000L + pow2Length;
            u.DoubleValue -= 4503599627370496.0;
            int index = (int)(u.LongValue &gt;&gt; 52) - 0x3FF;</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="76">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Developer\Reports\Resource\Objects\ObjectInfoFactory.cs</FileName>
        <OffsetRange Start="517" End="813"></OffsetRange>
        <LineRange Start="17" End="22"></LineRange>
        <Text>targetType == typeof(Texture2D) ||
                targetType == typeof(Texture3D) ||
                targetType == typeof(Texture2DArray) ||
                targetType == typeof(RenderTexture) ||
                targetType == typeof(Cubemap) ||
                targetType == typeof(CubemapArray)</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Developer\Reports\Resource\Objects\ObjectInfoFactory.cs</FileName>
        <OffsetRange Start="1399" End="1695"></OffsetRange>
        <LineRange Start="46" End="51"></LineRange>
        <Text>targetType == typeof(Texture2D) ||
                targetType == typeof(Texture3D) ||
                targetType == typeof(Texture2DArray) ||
                targetType == typeof(RenderTexture) ||
                targetType == typeof(Cubemap) ||
                targetType == typeof(CubemapArray)</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="75">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\SimpleListTests.cs</FileName>
        <OffsetRange Start="11601" End="11766"></OffsetRange>
        <LineRange Start="353" End="357"></LineRange>
        <Text>SimpleList&lt;int&gt; mockList = new SimpleList&lt;int&gt;(3);

            mockList.AddUnchecked(0);
            mockList.AddUnchecked(1);
            mockList.AddUnchecked(2);</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\SimpleListTests.cs</FileName>
        <OffsetRange Start="13936" End="14101"></OffsetRange>
        <LineRange Start="431" End="435"></LineRange>
        <Text>SimpleList&lt;int&gt; mockList = new SimpleList&lt;int&gt;(5);

            mockList.AddUnchecked(0);
            mockList.AddUnchecked(1);
            mockList.AddUnchecked(2);</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="75">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\StringKeyDictionaryTests.cs</FileName>
        <OffsetRange Start="9632" End="9844"></OffsetRange>
        <LineRange Start="304" End="307"></LineRange>
        <Text>StringKeyDictionary&lt;string&gt; dictionary = new StringKeyDictionary&lt;string&gt;(16);
            string myKey = "myKey";
            string myValue = "myValue";
            dictionary.AddWithUniqueCheck(myKey, myValue);</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\StringKeyDictionaryTests.cs</FileName>
        <OffsetRange Start="11993" End="12205"></OffsetRange>
        <LineRange Start="375" End="378"></LineRange>
        <Text>StringKeyDictionary&lt;string&gt; dictionary = new StringKeyDictionary&lt;string&gt;(16);
            string myKey = "myKey";
            string myValue = "myValue";
            dictionary.AddWithUniqueCheck(myKey, myValue);</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="75">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\StringKeyDictionaryTests.cs</FileName>
        <OffsetRange Start="10083" End="10289"></OffsetRange>
        <LineRange Start="318" End="321"></LineRange>
        <Text>StringKeyDictionary&lt;string&gt; dictionary = new StringKeyDictionary&lt;string&gt;(16);
            string myKey = "myKey";
            string myValue = "myValue";
            dictionary.AddUnchecked(myKey, myValue);</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\StringKeyDictionaryTests.cs</FileName>
        <OffsetRange Start="13830" End="14036"></OffsetRange>
        <LineRange Start="432" End="435"></LineRange>
        <Text>StringKeyDictionary&lt;string&gt; dictionary = new StringKeyDictionary&lt;string&gt;(16);
            string myKey = "myKey";
            string myValue = "myValue";
            dictionary.AddUnchecked(myKey, myValue);</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="75">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\NativeSparseSet.cs</FileName>
        <OffsetRange Start="33153" End="33422"></OffsetRange>
        <LineRange Start="728" End="734"></LineRange>
        <Text>versionArray = newVersionArray;

            for (int i = currentCapacity; i &lt; newCapacity; i++)
            {
                DenseArray[i] = -1; // Set new dense indices as unclaimed.
                SparseArray[i] = i + 1; // Build the free list chain.
            }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="30811" End="31080"></OffsetRange>
        <LineRange Start="709" End="715"></LineRange>
        <Text>versionArray = newVersionArray;

            for (int i = currentCapacity; i &lt; newCapacity; i++)
            {
                DenseArray[i] = -1; // Set new dense indices as unclaimed.
                SparseArray[i] = i + 1; // Build the free list chain.
            }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="75">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\NativeSparseSet.cs</FileName>
        <OffsetRange Start="36036" End="36322"></OffsetRange>
        <LineRange Start="784" End="790"></LineRange>
        <Text>versionArray = newVersionArray;

                for (int i = currentCapacity; i &lt; newCount; i++)
                {
                    DenseArray[i] = -1; // Set new dense indices as unclaimed.
                    SparseArray[i] = i + 1; // Build the free list chain.
                }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\SparseSet.cs</FileName>
        <OffsetRange Start="32826" End="33112"></OffsetRange>
        <LineRange Start="760" End="766"></LineRange>
        <Text>versionArray = newVersionArray;

                for (int i = currentCapacity; i &lt; newCount; i++)
                {
                    DenseArray[i] = -1; // Set new dense indices as unclaimed.
                    SparseArray[i] = i + 1; // Build the free list chain.
                }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="74">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\Array2DTests.cs</FileName>
        <OffsetRange Start="2337" End="2513"></OffsetRange>
        <LineRange Start="79" End="82"></LineRange>
        <Text>mockArray[1, 0] == 3 &amp;&amp;
                            mockArray[1, 1] == 2 &amp;&amp;
                            mockArray[1, 2] == 1 &amp;&amp;
                            mockArray[1, 3] == 0</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX.Tests\EditMode\Collections\Generic\Array2DTests.cs</FileName>
        <OffsetRange Start="3717" End="3893"></OffsetRange>
        <LineRange Start="128" End="131"></LineRange>
        <Text>mockArray[0, 0] == 5 &amp;&amp;
                            mockArray[1, 0] == 4 &amp;&amp;
                            mockArray[2, 0] == 3 &amp;&amp;
                            mockArray[3, 0] == 2</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="74">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Pooling\SimpleListManagedPool.cs</FileName>
        <OffsetRange Start="10912" End="11129"></OffsetRange>
        <LineRange Start="302" End="309"></LineRange>
        <Text>int inCount = InItems.Count;
            for (int i = 0; i &lt; inCount; i++)
            {
                if (InItems.Array[i] == item)
                {
                    return true;
                }
            }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Pooling\SimpleListManagedPool.cs</FileName>
        <OffsetRange Start="11259" End="11476"></OffsetRange>
        <LineRange Start="317" End="324"></LineRange>
        <Text>int inCount = InItems.Count;
            for (int i = 0; i &lt; inCount; i++)
            {
                if (InItems.Array[i] == item)
                {
                    return true;
                }
            }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="73">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Mathematics\Random\RandomWrapper.cs</FileName>
        <OffsetRange Start="1805" End="2037"></OffsetRange>
        <LineRange Start="62" End="66"></LineRange>
        <Text>/// &lt;inheritdoc /&gt;
        public uint NextUnsignedIntegerExclusive(uint minValue = uint.MinValue, uint maxValue = uint.MaxValue)
        {
            return Range.GetUnsignedInteger(Sample(), minValue + 1, maxValue - 1);
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Mathematics\Random\WELL1024a.cs</FileName>
        <OffsetRange Start="7890" End="8174"></OffsetRange>
        <LineRange Start="205" End="209"></LineRange>
        <Text>/// &lt;inheritdoc cref="IRandomProvider.NextUnsignedIntegerExclusive" /&gt;
        public uint NextUnsignedIntegerExclusive(uint minValue = uint.MinValue, uint maxValue = uint.MaxValue)
        {
            return Range.GetUnsignedInteger(Sample(), minValue + 1, maxValue - 1);
        }</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="72">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\StringExtensions.cs</FileName>
        <OffsetRange Start="5281" End="5627"></OffsetRange>
        <LineRange Start="141" End="147"></LineRange>
        <Text>DESCryptoServiceProvider desProvider = new DESCryptoServiceProvider
            {
                Mode = CipherMode.ECB,
                Padding = PaddingMode.PKCS7,
                Key = (encryptionKey != null &amp;&amp; encryptionKey.Length &gt; 0) ? encryptionKey : EncryptionDefaultKey,
                IV = EncryptionInitializationVector
            };</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\StringExtensions.cs</FileName>
        <OffsetRange Start="6645" End="6991"></OffsetRange>
        <LineRange Start="166" End="172"></LineRange>
        <Text>DESCryptoServiceProvider desProvider = new DESCryptoServiceProvider
            {
                Mode = CipherMode.ECB,
                Padding = PaddingMode.PKCS7,
                Key = (encryptionKey != null &amp;&amp; encryptionKey.Length &gt; 0) ? encryptionKey : EncryptionDefaultKey,
                IV = EncryptionInitializationVector
            };</Text>
      </Fragment>
    </Duplicate>
    <Duplicate Cost="71">
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\Array2D.cs</FileName>
        <OffsetRange Start="2173" End="2733"></OffsetRange>
        <LineRange Start="59" End="70"></LineRange>
        <Text>/// &lt;summary&gt;
        ///     Get a typed object at a specific 2-dimensional index in &lt;see cref="Array" /&gt;.
        /// &lt;/summary&gt;
        /// &lt;param name="x"&gt;The row/line number (vertical axis).&lt;/param&gt;
        /// &lt;param name="y"&gt;The column number (horizontal axis).&lt;/param&gt;
        public T this[int x, int y]
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get =&gt; Array[x * ColumnCount + y];
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set =&gt; Array[x * ColumnCount + y] = value;
        }</Text>
      </Fragment>
      <Fragment>
        <FileName>Projects\GDX_Development\Packages\com.dotbunny.gdx\GDX\Collections\Generic\NativeArray2D.cs</FileName>
        <OffsetRange Start="2006" End="2566"></OffsetRange>
        <LineRange Start="50" End="61"></LineRange>
        <Text>/// &lt;summary&gt;
        ///     Get a typed object at a specific 2-dimensional index in &lt;see cref="Array" /&gt;.
        /// &lt;/summary&gt;
        /// &lt;param name="x"&gt;The row/line number (vertical axis).&lt;/param&gt;
        /// &lt;param name="y"&gt;The column number (horizontal axis).&lt;/param&gt;
        public T this[int x, int y]
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get =&gt; Array[x * ColumnCount + y];
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set =&gt; Array[x * ColumnCount + y] = value;
        }</Text>
      </Fragment>
    </Duplicate>
  </Duplicates>
</DuplicatesReport>